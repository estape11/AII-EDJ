
denoise_nios.elf:     file format elf32-littlenios2
denoise_nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005c68 memsz 0x00005c68 flags r-x
    LOAD off    0x00007000 vaddr 0x04000000 paddr 0x00005c88 align 2**12
         filesz 0x00001ac8 memsz 0x00001c1c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005a58  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000005c  04000000  00005c88  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  0400005c  00005ce4  0000705c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  04001ac8  00007750  00008ac8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00007750  00007750  00008ac8  2**0
                  CONTENTS
  7 .sdram_controller_0 00000000  04001c1c  04001c1c  00008ac8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008ac8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a10  00000000  00000000  00008af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001647c  00000000  00000000  00009500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005f67  00000000  00000000  0001f97c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000069a0  00000000  00000000  000258e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000015b4  00000000  00000000  0002c284  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000027ba  00000000  00000000  0002d838  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ada  00000000  00000000  0002fff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00034acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  00034ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000376f5  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000376f8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00037704  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00037705  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00037706  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0003770a  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0003770e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00037712  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0003771d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00037728  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  00037733  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002d  00000000  00000000  0003773f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0029c206  00000000  00000000  0003776c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
04000000 l    d  .rodata	00000000 .rodata
0400005c l    d  .rwdata	00000000 .rwdata
04001ac8 l    d  .bss	00000000 .bss
00007750 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
04001c1c l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../denoise_nios_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0400005c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 findfp.c
00000b30 l     F .text	00000008 __fp_unlock
00000b44 l     F .text	0000019c __sinit.part.1
00000ce0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
000037a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000038bc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000391c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00003a10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00003af8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00003be4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00003dc0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04001ab8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00004034 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00004170 l     F .text	00000034 alt_dev_reg
04000a30 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000444c l     F .text	0000020c altera_avalon_jtag_uart_irq
00004658 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00004ddc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000523c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000539c l     F .text	0000003c alt_get_errno
000053d8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
04001af0 g     O .bss	00000004 alt_instruction_exception_handler
000035a0 g     F .text	00000054 _isatty_r
00003cfc g     F .text	0000007c alt_main
00000844 g     F .text	000000c0 _puts_r
04001b1c g     O .bss	00000100 alt_irq
000032c8 g     F .text	00000060 _lseek_r
00005ce4 g       *ABS*	00000000 __flash_rwdata_start
04001c1c g       *ABS*	00000000 __alt_heap_start
0000287c g     F .text	0000005c __sseek
00000e90 g     F .text	00000010 __sinit
00000ce8 g     F .text	00000078 __sfmoreglue
00003d9c g     F .text	00000024 __malloc_unlock
00001f68 g     F .text	0000015c memmove
00000e78 g     F .text	00000018 _cleanup
000057c4 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00003544 g     F .text	0000005c _fstat_r
04001ad4 g     O .bss	00000004 errno
000027f8 g     F .text	00000008 __seofread
04001adc g     O .bss	00000004 alt_argv
04009a90 g       *ABS*	00000000 _gp
040008b0 g     O .rwdata	00000180 alt_fd_list
000057e8 g     F .text	00000090 alt_find_dev
00001e20 g     F .text	00000148 memcpy
00000b38 g     F .text	0000000c _cleanup_r
00005320 g     F .text	0000007c alt_io_redirect
00005c88 g       *ABS*	00000000 __DTOR_END__
00000904 g     F .text	00000014 puts
00005a44 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00004850 g     F .text	0000021c altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000036ec g     F .text	00000064 .hidden __udivsi3
00003a4c g     F .text	000000ac isatty
04001ad0 g     O .bss	00000004 __malloc_top_pad
00000ee0 g     F .text	000004c8 __sfvwrite_r
00002750 g     F .text	00000054 _sbrk_r
0000026c g     F .text	0000026c i4vecFrac
000034e4 g     F .text	00000060 _read_r
04001ab0 g     O .rwdata	00000004 alt_max_fd
00002ae8 g     F .text	000000f0 _fclose_r
00002e64 g     F .text	00000030 fflush
04001acc g     O .bss	00000004 __malloc_max_sbrked_mem
00003c20 g     F .text	000000dc lseek
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
04001a90 g     O .rwdata	00000004 _global_impure_ptr
000021ec g     F .text	00000564 _realloc_r
04001c1c g       *ABS*	00000000 __bss_end
0000514c g     F .text	000000f0 alt_iic_isr_register
000056bc g     F .text	00000108 alt_tick
00000eb0 g     F .text	00000018 __fp_lock_all
00005100 g     F .text	0000004c alt_ic_irq_enabled
00005620 g     F .text	0000009c alt_alarm_stop
04001ae4 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
04000888 g     O .rwdata	00000028 alt_dev_null
00004dbc g     F .text	00000020 alt_dcache_flush_all
04001ac8 g       *ABS*	00000000 __ram_rwdata_end
04001aa8 g     O .rwdata	00000008 alt_dev_list
00004070 g     F .text	00000100 write
0400005c g       *ABS*	00000000 __ram_rodata_end
00003958 g     F .text	000000b8 fstat
00003750 g     F .text	00000058 .hidden __umodsi3
04001c1c g       *ABS*	00000000 end
0000438c g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00005c88 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
00004a6c g     F .text	00000224 altera_avalon_jtag_uart_write
00000ea0 g     F .text	00000004 __sfp_lock_acquire
00001d3c g     F .text	000000e4 memchr
00002fb8 g     F .text	00000310 _free_r
000009b0 g     F .text	00000180 __call_exitprocs
04001a98 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
04001ae8 g     O .bss	00000004 _alt_tick_rate
04001aec g     O .bss	00000004 _alt_nticks
00003dfc g     F .text	00000104 read
000041dc g     F .text	0000004c alt_sys_init
00005b70 g     F .text	00000118 __register_exitproc
00000534 g     F .text	000001e4 medianFilter
000046f8 g     F .text	00000068 altera_avalon_jtag_uart_close
000007e4 g     F .text	00000028 .hidden __mulsi3
0400005c g       *ABS*	00000000 __ram_rwdata_start
04000000 g       *ABS*	00000000 __ram_rodata_start
04001af4 g     O .bss	00000028 __malloc_current_mallinfo
00004228 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00005980 g     F .text	000000c4 alt_get_fd
00002a94 g     F .text	00000054 _close_r
00005af4 g     F .text	0000007c memcmp
000042e8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04001c1c g       *ABS*	00000000 __alt_stack_base
00004338 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002940 g     F .text	00000154 __swsetup_r
00000d60 g     F .text	00000118 __sfp
04000480 g     O .rwdata	00000408 __malloc_av_
00000eac g     F .text	00000004 __sinit_lock_release
000027a4 g     F .text	00000054 __sread
00005878 g     F .text	00000108 alt_find_file
00004e18 g     F .text	000000a4 alt_dev_llist_insert
00003d78 g     F .text	00000024 __malloc_lock
00003f84 g     F .text	000000b0 sbrk
00002e08 g     F .text	0000005c _fflush_r
04001ac8 g       *ABS*	00000000 __bss_start
000020c4 g     F .text	00000128 memset
00000718 g     F .text	000000cc main
04001ae0 g     O .bss	00000004 alt_envp
04001ac8 g     O .bss	00000004 __malloc_max_total_mem
00004288 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000028d8 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
00002bd8 g     F .text	00000014 fclose
000004d8 g     F .text	0000005c i4vecMedian
00001530 g     F .text	0000080c _malloc_r
04001ab4 g     O .rwdata	00000004 alt_errno
000013a8 g     F .text	000000c4 _fwalk
000035f4 g     F .text	00000084 .hidden __divsi3
00002e94 g     F .text	00000124 _malloc_trim_r
00005c88 g       *ABS*	00000000 __CTOR_END__
00005c88 g       *ABS*	00000000 __flash_rodata_start
00005c88 g       *ABS*	00000000 __DTOR_LIST__
000041a4 g     F .text	00000038 alt_irq_init
00003f00 g     F .text	00000084 alt_release_fd
00005ae0 g     F .text	00000014 atexit
000028e0 g     F .text	00000060 _write_r
04001a94 g     O .rwdata	00000004 _impure_ptr
04001ad8 g     O .bss	00000004 alt_argc
00002bec g     F .text	0000021c __sflush_r
00004f1c g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00000ec8 g     F .text	00000018 __fp_unlock_all
04001aa0 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004f9c g     F .text	00000050 alt_ic_isr_register
04001ac8 g       *ABS*	00000000 _edata
04001c1c g       *ABS*	00000000 _end
00000230 g       *ABS*	00000000 __ram_exceptions_end
00004760 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00005074 g     F .text	0000008c alt_ic_irq_disable
00002800 g     F .text	0000007c __swrite
04001a9c g     O .rwdata	00000004 __malloc_trim_threshold
0000080c g     F .text	00000038 exit
0000146c g     F .text	000000c4 _fwalk_reent
00003678 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000ea4 g     F .text	00000004 __sfp_lock_release
000038e8 g     F .text	00000034 _exit
00004c90 g     F .text	0000012c alt_alarm_start
00003328 g     F .text	000001bc __smakebuf_r
00000918 g     F .text	00000098 strlen
000054c4 g     F .text	0000015c open
00004f7c g     F .text	00000020 alt_icache_flush_all
04001abc g     O .rwdata	00000004 alt_priority_mask
00004fec g     F .text	00000088 alt_ic_irq_enable
04001ac0 g     O .rwdata	00000008 alt_alarm_list
00004ebc g     F .text	00000060 _do_ctors
000037e4 g     F .text	000000d8 close
00003b60 g     F .text	00000084 alt_load
00000ea8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00810034 	movhi	r2,1024
 140:	1086c704 	addi	r2,r2,6940
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00810034 	movhi	r2,1024
 158:	1086c704 	addi	r2,r2,6940
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a01817 	ldw	r2,-32672(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a01817 	ldw	r2,-32672(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
     23c:	d6a6a414 	ori	gp,gp,39568
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
     244:	1086b214 	ori	r2,r2,6856

    movhi r3, %hi(__bss_end)
     248:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
     24c:	18c70714 	ori	r3,r3,7196

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	0003b600 	call	3b60 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	0003cfc0 	call	3cfc <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <alt_after_alt_main>

0000026c <i4vecFrac>:
          A[N]  On input, A is the array to search.
                On output, the elements of A have been somewhat rearranged.
    Output:
          the value of the K-th fractile of A.
 */
int i4vecFrac ( int n, int a[], int k ) {
     26c:	defff404 	addi	sp,sp,-48
     270:	dfc00b15 	stw	ra,44(sp)
     274:	df000a15 	stw	fp,40(sp)
     278:	df000a04 	addi	fp,sp,40
     27c:	e13ffd15 	stw	r4,-12(fp)
     280:	e17ffe15 	stw	r5,-8(fp)
     284:	e1bfff15 	stw	r6,-4(fp)
	int j;
	int left;
	int temp;
	int x;

	if ( n <= 0 || n < k || k <= 0) {
     288:	e0bffd17 	ldw	r2,-12(fp)
     28c:	0080050e 	bge	zero,r2,2a4 <i4vecFrac+0x38>
     290:	e0fffd17 	ldw	r3,-12(fp)
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	18800216 	blt	r3,r2,2a4 <i4vecFrac+0x38>
     29c:	e0bfff17 	ldw	r2,-4(fp)
     2a0:	00800216 	blt	zero,r2,2ac <i4vecFrac+0x40>
		exit ( 1 );
     2a4:	01000044 	movi	r4,1
     2a8:	000080c0 	call	80c <exit>

	}

	left = 1;
     2ac:	00800044 	movi	r2,1
     2b0:	e0bff915 	stw	r2,-28(fp)
	iryt = n;
     2b4:	e0bffd17 	ldw	r2,-12(fp)
     2b8:	e0bff715 	stw	r2,-36(fp)

	for ( ; ; ) {
		if ( iryt <= left )
     2bc:	e0bff717 	ldw	r2,-36(fp)
     2c0:	e0fff917 	ldw	r3,-28(fp)
     2c4:	18800c16 	blt	r3,r2,2f8 <i4vecFrac+0x8c>
		{
			frac = a[k-1];
     2c8:	e0ffff17 	ldw	r3,-4(fp)
     2cc:	00900034 	movhi	r2,16384
     2d0:	10bfffc4 	addi	r2,r2,-1
     2d4:	1885883a 	add	r2,r3,r2
     2d8:	1085883a 	add	r2,r2,r2
     2dc:	1085883a 	add	r2,r2,r2
     2e0:	1007883a 	mov	r3,r2
     2e4:	e0bffe17 	ldw	r2,-8(fp)
     2e8:	10c5883a 	add	r2,r2,r3
     2ec:	10800017 	ldw	r2,0(r2)
     2f0:	e0bffc15 	stw	r2,-16(fp)
			break;
     2f4:	00007206 	br	4c0 <i4vecFrac+0x254>
		}

		x = a[k-1];
     2f8:	e0ffff17 	ldw	r3,-4(fp)
     2fc:	00900034 	movhi	r2,16384
     300:	10bfffc4 	addi	r2,r2,-1
     304:	1885883a 	add	r2,r3,r2
     308:	1085883a 	add	r2,r2,r2
     30c:	1085883a 	add	r2,r2,r2
     310:	1007883a 	mov	r3,r2
     314:	e0bffe17 	ldw	r2,-8(fp)
     318:	10c5883a 	add	r2,r2,r3
     31c:	10800017 	ldw	r2,0(r2)
     320:	e0bffa15 	stw	r2,-24(fp)
		i = left;
     324:	e0bff917 	ldw	r2,-28(fp)
     328:	e0bff615 	stw	r2,-40(fp)
		j = iryt;
     32c:	e0bff717 	ldw	r2,-36(fp)
     330:	e0bff815 	stw	r2,-32(fp)

		for ( ; ; ) {
			if ( j < i ) {
     334:	e0fff817 	ldw	r3,-32(fp)
     338:	e0bff617 	ldw	r2,-40(fp)
     33c:	18800e0e 	bge	r3,r2,378 <i4vecFrac+0x10c>
				if ( j < k ) {
     340:	e0fff817 	ldw	r3,-32(fp)
     344:	e0bfff17 	ldw	r2,-4(fp)
     348:	1880020e 	bge	r3,r2,354 <i4vecFrac+0xe8>
					left = i;
     34c:	e0bff617 	ldw	r2,-40(fp)
     350:	e0bff915 	stw	r2,-28(fp)

				}
				if ( k < i ) {
     354:	e0ffff17 	ldw	r3,-4(fp)
     358:	e0bff617 	ldw	r2,-40(fp)
     35c:	1880560e 	bge	r3,r2,4b8 <i4vecFrac+0x24c>
					iryt = j;
     360:	e0bff817 	ldw	r2,-32(fp)
     364:	e0bff715 	stw	r2,-36(fp)

				}
				break;
     368:	00005306 	br	4b8 <i4vecFrac+0x24c>
			}

			// Find I so that X <= A(I).
			while ( a[i-1] < x ) {
				i = i + 1;
     36c:	e0bff617 	ldw	r2,-40(fp)
     370:	10800044 	addi	r2,r2,1
     374:	e0bff615 	stw	r2,-40(fp)
				}
				break;
			}

			// Find I so that X <= A(I).
			while ( a[i-1] < x ) {
     378:	e0fff617 	ldw	r3,-40(fp)
     37c:	00900034 	movhi	r2,16384
     380:	10bfffc4 	addi	r2,r2,-1
     384:	1885883a 	add	r2,r3,r2
     388:	1085883a 	add	r2,r2,r2
     38c:	1085883a 	add	r2,r2,r2
     390:	1007883a 	mov	r3,r2
     394:	e0bffe17 	ldw	r2,-8(fp)
     398:	10c5883a 	add	r2,r2,r3
     39c:	10c00017 	ldw	r3,0(r2)
     3a0:	e0bffa17 	ldw	r2,-24(fp)
     3a4:	18bff116 	blt	r3,r2,36c <i4vecFrac+0x100>
				i = i + 1;

			}

			// Find J so that A(J) <= X.
			while ( x < a[j-1] ) {
     3a8:	00000306 	br	3b8 <i4vecFrac+0x14c>
				j = j - 1;
     3ac:	e0bff817 	ldw	r2,-32(fp)
     3b0:	10bfffc4 	addi	r2,r2,-1
     3b4:	e0bff815 	stw	r2,-32(fp)
				i = i + 1;

			}

			// Find J so that A(J) <= X.
			while ( x < a[j-1] ) {
     3b8:	e0fff817 	ldw	r3,-32(fp)
     3bc:	00900034 	movhi	r2,16384
     3c0:	10bfffc4 	addi	r2,r2,-1
     3c4:	1885883a 	add	r2,r3,r2
     3c8:	1085883a 	add	r2,r2,r2
     3cc:	1085883a 	add	r2,r2,r2
     3d0:	1007883a 	mov	r3,r2
     3d4:	e0bffe17 	ldw	r2,-8(fp)
     3d8:	10c5883a 	add	r2,r2,r3
     3dc:	10800017 	ldw	r2,0(r2)
     3e0:	e0fffa17 	ldw	r3,-24(fp)
     3e4:	18bff116 	blt	r3,r2,3ac <i4vecFrac+0x140>
				j = j - 1;

			}

			if ( i <= j ) {
     3e8:	e0bff617 	ldw	r2,-40(fp)
     3ec:	e0fff817 	ldw	r3,-32(fp)
     3f0:	18bfd016 	blt	r3,r2,334 <i4vecFrac+0xc8>
				temp   = a[i-1];
     3f4:	e0fff617 	ldw	r3,-40(fp)
     3f8:	00900034 	movhi	r2,16384
     3fc:	10bfffc4 	addi	r2,r2,-1
     400:	1885883a 	add	r2,r3,r2
     404:	1085883a 	add	r2,r2,r2
     408:	1085883a 	add	r2,r2,r2
     40c:	1007883a 	mov	r3,r2
     410:	e0bffe17 	ldw	r2,-8(fp)
     414:	10c5883a 	add	r2,r2,r3
     418:	10800017 	ldw	r2,0(r2)
     41c:	e0bffb15 	stw	r2,-20(fp)
				a[i-1] = a[j-1];
     420:	e0fff617 	ldw	r3,-40(fp)
     424:	00900034 	movhi	r2,16384
     428:	10bfffc4 	addi	r2,r2,-1
     42c:	1885883a 	add	r2,r3,r2
     430:	1085883a 	add	r2,r2,r2
     434:	1085883a 	add	r2,r2,r2
     438:	1007883a 	mov	r3,r2
     43c:	e0bffe17 	ldw	r2,-8(fp)
     440:	10c7883a 	add	r3,r2,r3
     444:	e13ff817 	ldw	r4,-32(fp)
     448:	00900034 	movhi	r2,16384
     44c:	10bfffc4 	addi	r2,r2,-1
     450:	2085883a 	add	r2,r4,r2
     454:	1085883a 	add	r2,r2,r2
     458:	1085883a 	add	r2,r2,r2
     45c:	1009883a 	mov	r4,r2
     460:	e0bffe17 	ldw	r2,-8(fp)
     464:	1105883a 	add	r2,r2,r4
     468:	10800017 	ldw	r2,0(r2)
     46c:	18800015 	stw	r2,0(r3)
				a[j-1] = temp;
     470:	e0fff817 	ldw	r3,-32(fp)
     474:	00900034 	movhi	r2,16384
     478:	10bfffc4 	addi	r2,r2,-1
     47c:	1885883a 	add	r2,r3,r2
     480:	1085883a 	add	r2,r2,r2
     484:	1085883a 	add	r2,r2,r2
     488:	1007883a 	mov	r3,r2
     48c:	e0bffe17 	ldw	r2,-8(fp)
     490:	10c5883a 	add	r2,r2,r3
     494:	e0fffb17 	ldw	r3,-20(fp)
     498:	10c00015 	stw	r3,0(r2)
				i = i + 1;
     49c:	e0bff617 	ldw	r2,-40(fp)
     4a0:	10800044 	addi	r2,r2,1
     4a4:	e0bff615 	stw	r2,-40(fp)
				j = j - 1;
     4a8:	e0bff817 	ldw	r2,-32(fp)
     4ac:	10bfffc4 	addi	r2,r2,-1
     4b0:	e0bff815 	stw	r2,-32(fp)

			}
		}
     4b4:	003f9f06 	br	334 <i4vecFrac+0xc8>
				}
				if ( k < i ) {
					iryt = j;

				}
				break;
     4b8:	0001883a 	nop
				i = i + 1;
				j = j - 1;

			}
		}
	}
     4bc:	003f7f06 	br	2bc <i4vecFrac+0x50>

	return frac;
     4c0:	e0bffc17 	ldw	r2,-16(fp)
}
     4c4:	e037883a 	mov	sp,fp
     4c8:	dfc00117 	ldw	ra,4(sp)
     4cc:	df000017 	ldw	fp,0(sp)
     4d0:	dec00204 	addi	sp,sp,8
     4d4:	f800283a 	ret

000004d8 <i4vecMedian>:
            On output, the order of the elements of A has been somewhat changed.

    Output:
          the value of the median of A.
 */
int i4vecMedian ( int n, int a[] ){
     4d8:	defffa04 	addi	sp,sp,-24
     4dc:	dfc00515 	stw	ra,20(sp)
     4e0:	df000415 	stw	fp,16(sp)
     4e4:	df000404 	addi	fp,sp,16
     4e8:	e13ffe15 	stw	r4,-8(fp)
     4ec:	e17fff15 	stw	r5,-4(fp)
	int k;
	int median;

	k = ( n + 1 ) / 2;
     4f0:	e0bffe17 	ldw	r2,-8(fp)
     4f4:	10800044 	addi	r2,r2,1
     4f8:	1006d7fa 	srli	r3,r2,31
     4fc:	1885883a 	add	r2,r3,r2
     500:	1005d07a 	srai	r2,r2,1
     504:	e0bffc15 	stw	r2,-16(fp)

	median = i4vecFrac ( n, a, k );
     508:	e1bffc17 	ldw	r6,-16(fp)
     50c:	e17fff17 	ldw	r5,-4(fp)
     510:	e13ffe17 	ldw	r4,-8(fp)
     514:	000026c0 	call	26c <i4vecFrac>
     518:	e0bffd15 	stw	r2,-12(fp)

	return median;
     51c:	e0bffd17 	ldw	r2,-12(fp)
}
     520:	e037883a 	mov	sp,fp
     524:	dfc00117 	ldw	ra,4(sp)
     528:	df000017 	ldw	fp,0(sp)
     52c:	dec00204 	addi	sp,sp,8
     530:	f800283a 	ret

00000534 <medianFilter>:
          data[M*N], the noisy grayscale data.
          i and j initial.
          j and j final.
*/

void medianFilter(int m, int n, int* data, int initialI, int initialJ, int finalI, int finalJ ){
     534:	defff204 	addi	sp,sp,-56
     538:	dfc00d15 	stw	ra,52(sp)
     53c:	df000c15 	stw	fp,48(sp)
     540:	dc000b15 	stw	r16,44(sp)
     544:	df000c04 	addi	fp,sp,48
     548:	e13ffb15 	stw	r4,-20(fp)
     54c:	e17ffc15 	stw	r5,-16(fp)
     550:	e1bffd15 	stw	r6,-12(fp)
     554:	e1fffe15 	stw	r7,-8(fp)
	int i, j;
	int p[5];

	//gray = ( int * ) malloc ( m * n * sizeof ( int ) );
	// Process the main part of the image:
	for ( i = initialI; i < finalI - 1; i++ ) {
     558:	e0bffe17 	ldw	r2,-8(fp)
     55c:	e0bff415 	stw	r2,-48(fp)
     560:	00006206 	br	6ec <medianFilter+0x1b8>
		for ( j = initialJ; j < finalJ - 1; j++ ) {
     564:	e0800217 	ldw	r2,8(fp)
     568:	e0bff515 	stw	r2,-44(fp)
     56c:	00005806 	br	6d0 <medianFilter+0x19c>
			p[0] = data[i-1+ j   *m];
     570:	e0bff417 	ldw	r2,-48(fp)
     574:	143fffc4 	addi	r16,r2,-1
     578:	e17ffb17 	ldw	r5,-20(fp)
     57c:	e13ff517 	ldw	r4,-44(fp)
     580:	00007e40 	call	7e4 <__mulsi3>
     584:	8085883a 	add	r2,r16,r2
     588:	1085883a 	add	r2,r2,r2
     58c:	1085883a 	add	r2,r2,r2
     590:	1007883a 	mov	r3,r2
     594:	e0bffd17 	ldw	r2,-12(fp)
     598:	10c5883a 	add	r2,r2,r3
     59c:	10800017 	ldw	r2,0(r2)
     5a0:	e0bff615 	stw	r2,-40(fp)
			p[1] = data[i+1+ j   *m];
     5a4:	e0bff417 	ldw	r2,-48(fp)
     5a8:	14000044 	addi	r16,r2,1
     5ac:	e17ffb17 	ldw	r5,-20(fp)
     5b0:	e13ff517 	ldw	r4,-44(fp)
     5b4:	00007e40 	call	7e4 <__mulsi3>
     5b8:	8085883a 	add	r2,r16,r2
     5bc:	1085883a 	add	r2,r2,r2
     5c0:	1085883a 	add	r2,r2,r2
     5c4:	1007883a 	mov	r3,r2
     5c8:	e0bffd17 	ldw	r2,-12(fp)
     5cc:	10c5883a 	add	r2,r2,r3
     5d0:	10800017 	ldw	r2,0(r2)
     5d4:	e0bff715 	stw	r2,-36(fp)
			p[2] = data[i  +(j+1)*m];
     5d8:	e0bff517 	ldw	r2,-44(fp)
     5dc:	10800044 	addi	r2,r2,1
     5e0:	e17ffb17 	ldw	r5,-20(fp)
     5e4:	1009883a 	mov	r4,r2
     5e8:	00007e40 	call	7e4 <__mulsi3>
     5ec:	1007883a 	mov	r3,r2
     5f0:	e0bff417 	ldw	r2,-48(fp)
     5f4:	1885883a 	add	r2,r3,r2
     5f8:	1085883a 	add	r2,r2,r2
     5fc:	1085883a 	add	r2,r2,r2
     600:	1007883a 	mov	r3,r2
     604:	e0bffd17 	ldw	r2,-12(fp)
     608:	10c5883a 	add	r2,r2,r3
     60c:	10800017 	ldw	r2,0(r2)
     610:	e0bff815 	stw	r2,-32(fp)
			p[3] = data[i  +(j-1)*m];
     614:	e0bff517 	ldw	r2,-44(fp)
     618:	10bfffc4 	addi	r2,r2,-1
     61c:	e17ffb17 	ldw	r5,-20(fp)
     620:	1009883a 	mov	r4,r2
     624:	00007e40 	call	7e4 <__mulsi3>
     628:	1007883a 	mov	r3,r2
     62c:	e0bff417 	ldw	r2,-48(fp)
     630:	1885883a 	add	r2,r3,r2
     634:	1085883a 	add	r2,r2,r2
     638:	1085883a 	add	r2,r2,r2
     63c:	1007883a 	mov	r3,r2
     640:	e0bffd17 	ldw	r2,-12(fp)
     644:	10c5883a 	add	r2,r2,r3
     648:	10800017 	ldw	r2,0(r2)
     64c:	e0bff915 	stw	r2,-28(fp)
			p[4] = data[i  + j   *m];
     650:	e17ffb17 	ldw	r5,-20(fp)
     654:	e13ff517 	ldw	r4,-44(fp)
     658:	00007e40 	call	7e4 <__mulsi3>
     65c:	1007883a 	mov	r3,r2
     660:	e0bff417 	ldw	r2,-48(fp)
     664:	1885883a 	add	r2,r3,r2
     668:	1085883a 	add	r2,r2,r2
     66c:	1085883a 	add	r2,r2,r2
     670:	1007883a 	mov	r3,r2
     674:	e0bffd17 	ldw	r2,-12(fp)
     678:	10c5883a 	add	r2,r2,r3
     67c:	10800017 	ldw	r2,0(r2)
     680:	e0bffa15 	stw	r2,-24(fp)

			data[i+j*m] = i4vecMedian ( 5, p );
     684:	e17ffb17 	ldw	r5,-20(fp)
     688:	e13ff517 	ldw	r4,-44(fp)
     68c:	00007e40 	call	7e4 <__mulsi3>
     690:	1007883a 	mov	r3,r2
     694:	e0bff417 	ldw	r2,-48(fp)
     698:	1885883a 	add	r2,r3,r2
     69c:	1085883a 	add	r2,r2,r2
     6a0:	1085883a 	add	r2,r2,r2
     6a4:	1007883a 	mov	r3,r2
     6a8:	e0bffd17 	ldw	r2,-12(fp)
     6ac:	10e1883a 	add	r16,r2,r3
     6b0:	e0bff604 	addi	r2,fp,-40
     6b4:	100b883a 	mov	r5,r2
     6b8:	01000144 	movi	r4,5
     6bc:	00004d80 	call	4d8 <i4vecMedian>
     6c0:	80800015 	stw	r2,0(r16)
	int p[5];

	//gray = ( int * ) malloc ( m * n * sizeof ( int ) );
	// Process the main part of the image:
	for ( i = initialI; i < finalI - 1; i++ ) {
		for ( j = initialJ; j < finalJ - 1; j++ ) {
     6c4:	e0bff517 	ldw	r2,-44(fp)
     6c8:	10800044 	addi	r2,r2,1
     6cc:	e0bff515 	stw	r2,-44(fp)
     6d0:	e0800417 	ldw	r2,16(fp)
     6d4:	10bfffc4 	addi	r2,r2,-1
     6d8:	e0fff517 	ldw	r3,-44(fp)
     6dc:	18bfa416 	blt	r3,r2,570 <medianFilter+0x3c>
	int i, j;
	int p[5];

	//gray = ( int * ) malloc ( m * n * sizeof ( int ) );
	// Process the main part of the image:
	for ( i = initialI; i < finalI - 1; i++ ) {
     6e0:	e0bff417 	ldw	r2,-48(fp)
     6e4:	10800044 	addi	r2,r2,1
     6e8:	e0bff415 	stw	r2,-48(fp)
     6ec:	e0800317 	ldw	r2,12(fp)
     6f0:	10bfffc4 	addi	r2,r2,-1
     6f4:	e0fff417 	ldw	r3,-48(fp)
     6f8:	18bf9a16 	blt	r3,r2,564 <medianFilter+0x30>
			p[4] = data[i  + j   *m];

			data[i+j*m] = i4vecMedian ( 5, p );
		}
	}
}
     6fc:	0001883a 	nop
     700:	e6ffff04 	addi	sp,fp,-4
     704:	dfc00217 	ldw	ra,8(sp)
     708:	df000117 	ldw	fp,4(sp)
     70c:	dc000017 	ldw	r16,0(sp)
     710:	dec00304 	addi	sp,sp,12
     714:	f800283a 	ret

00000718 <main>:

int main() {
     718:	defff404 	addi	sp,sp,-48
     71c:	dfc00b15 	stw	ra,44(sp)
     720:	df000a15 	stw	fp,40(sp)
     724:	df000a04 	addi	fp,sp,40
	printf("> NIOS II Started\n");
     728:	01010034 	movhi	r4,1024
     72c:	21000004 	addi	r4,r4,0
     730:	00009040 	call	904 <puts>
	volatile int* leds = (int*) 0x10000; // leds address
     734:	00800074 	movhi	r2,1
     738:	e0bff915 	stw	r2,-28(fp)
	volatile int* sdram = (int*) 0x04100000; // SDRAM address
     73c:	00810434 	movhi	r2,1040
     740:	e0bffa15 	stw	r2,-24(fp)
	*leds=0x0;
     744:	e0bff917 	ldw	r2,-28(fp)
     748:	10000015 	stw	zero,0(r2)

	int m, n, iInitialNIOS, jInitialNIOS;
	//float fracNIOS;

	volatile int* imageSDRAM = (sdram + 5); // to not rewrite the commutication data
     74c:	e0bffa17 	ldw	r2,-24(fp)
     750:	10800504 	addi	r2,r2,20
     754:	e0bffb15 	stw	r2,-20(fp)

	while(1){
		while(*leds!=0xFF){} // wait until ARM send a signal to start
     758:	0001883a 	nop
     75c:	e0bff917 	ldw	r2,-28(fp)
     760:	10800017 	ldw	r2,0(r2)
     764:	10803fd8 	cmpnei	r2,r2,255
     768:	103ffc1e 	bne	r2,zero,75c <main+0x44>
		//fracNIOS = sdram[0]/100;

		m = sdram[1];
     76c:	e0bffa17 	ldw	r2,-24(fp)
     770:	10800117 	ldw	r2,4(r2)
     774:	e0bffc15 	stw	r2,-16(fp)
		n = sdram[2];
     778:	e0bffa17 	ldw	r2,-24(fp)
     77c:	10800217 	ldw	r2,8(r2)
     780:	e0bffd15 	stw	r2,-12(fp)
		iInitialNIOS = sdram[3];
     784:	e0bffa17 	ldw	r2,-24(fp)
     788:	10800317 	ldw	r2,12(r2)
     78c:	e0bffe15 	stw	r2,-8(fp)
		jInitialNIOS = sdram[4];
     790:	e0bffa17 	ldw	r2,-24(fp)
     794:	10800417 	ldw	r2,16(r2)
     798:	e0bfff15 	stw	r2,-4(fp)
		//printf("> Received parameters: \n\t fraction: %f\n\t m: %d\n\t n: %d\n\t i: %d\n\t j: %d", fracNIOS, m, n,iInitialNIOS,jInitialNIOS);

		// NIOS processing
		medianFilter(m, n, imageSDRAM, iInitialNIOS, jInitialNIOS, m, n );
     79c:	e0bffd17 	ldw	r2,-12(fp)
     7a0:	d8800215 	stw	r2,8(sp)
     7a4:	e0bffc17 	ldw	r2,-16(fp)
     7a8:	d8800115 	stw	r2,4(sp)
     7ac:	e0bfff17 	ldw	r2,-4(fp)
     7b0:	d8800015 	stw	r2,0(sp)
     7b4:	e1fffe17 	ldw	r7,-8(fp)
     7b8:	e1bffb17 	ldw	r6,-20(fp)
     7bc:	e17ffd17 	ldw	r5,-12(fp)
     7c0:	e13ffc17 	ldw	r4,-16(fp)
     7c4:	00005340 	call	534 <medianFilter>
		printf("+ Executed\n");
     7c8:	01010034 	movhi	r4,1024
     7cc:	21000504 	addi	r4,r4,20
     7d0:	00009040 	call	904 <puts>
		*leds=0x1; // To send the termination code to ARM
     7d4:	e0bff917 	ldw	r2,-28(fp)
     7d8:	00c00044 	movi	r3,1
     7dc:	10c00015 	stw	r3,0(r2)
	}
     7e0:	003fdd06 	br	758 <main+0x40>

000007e4 <__mulsi3>:
     7e4:	0005883a 	mov	r2,zero
     7e8:	20000726 	beq	r4,zero,808 <__mulsi3+0x24>
     7ec:	20c0004c 	andi	r3,r4,1
     7f0:	2008d07a 	srli	r4,r4,1
     7f4:	18000126 	beq	r3,zero,7fc <__mulsi3+0x18>
     7f8:	1145883a 	add	r2,r2,r5
     7fc:	294b883a 	add	r5,r5,r5
     800:	203ffa1e 	bne	r4,zero,7ec <__mulsi3+0x8>
     804:	f800283a 	ret
     808:	f800283a 	ret

0000080c <exit>:
     80c:	defffe04 	addi	sp,sp,-8
     810:	000b883a 	mov	r5,zero
     814:	dc000015 	stw	r16,0(sp)
     818:	dfc00115 	stw	ra,4(sp)
     81c:	2021883a 	mov	r16,r4
     820:	00009b00 	call	9b0 <__call_exitprocs>
     824:	00810034 	movhi	r2,1024
     828:	1086a404 	addi	r2,r2,6800
     82c:	11000017 	ldw	r4,0(r2)
     830:	20800f17 	ldw	r2,60(r4)
     834:	10000126 	beq	r2,zero,83c <exit+0x30>
     838:	103ee83a 	callr	r2
     83c:	8009883a 	mov	r4,r16
     840:	00038e80 	call	38e8 <_exit>

00000844 <_puts_r>:
     844:	defff604 	addi	sp,sp,-40
     848:	dc000715 	stw	r16,28(sp)
     84c:	2021883a 	mov	r16,r4
     850:	2809883a 	mov	r4,r5
     854:	dc400815 	stw	r17,32(sp)
     858:	dfc00915 	stw	ra,36(sp)
     85c:	2823883a 	mov	r17,r5
     860:	00009180 	call	918 <strlen>
     864:	10c00044 	addi	r3,r2,1
     868:	d8800115 	stw	r2,4(sp)
     86c:	00810034 	movhi	r2,1024
     870:	10800904 	addi	r2,r2,36
     874:	d8800215 	stw	r2,8(sp)
     878:	00800044 	movi	r2,1
     87c:	d8800315 	stw	r2,12(sp)
     880:	00800084 	movi	r2,2
     884:	dc400015 	stw	r17,0(sp)
     888:	d8c00615 	stw	r3,24(sp)
     88c:	dec00415 	stw	sp,16(sp)
     890:	d8800515 	stw	r2,20(sp)
     894:	80000226 	beq	r16,zero,8a0 <_puts_r+0x5c>
     898:	80800e17 	ldw	r2,56(r16)
     89c:	10001426 	beq	r2,zero,8f0 <_puts_r+0xac>
     8a0:	81400217 	ldw	r5,8(r16)
     8a4:	2880030b 	ldhu	r2,12(r5)
     8a8:	10c8000c 	andi	r3,r2,8192
     8ac:	1800061e 	bne	r3,zero,8c8 <_puts_r+0x84>
     8b0:	29001917 	ldw	r4,100(r5)
     8b4:	00f7ffc4 	movi	r3,-8193
     8b8:	10880014 	ori	r2,r2,8192
     8bc:	20c6703a 	and	r3,r4,r3
     8c0:	2880030d 	sth	r2,12(r5)
     8c4:	28c01915 	stw	r3,100(r5)
     8c8:	d9800404 	addi	r6,sp,16
     8cc:	8009883a 	mov	r4,r16
     8d0:	0000ee00 	call	ee0 <__sfvwrite_r>
     8d4:	1000091e 	bne	r2,zero,8fc <_puts_r+0xb8>
     8d8:	00800284 	movi	r2,10
     8dc:	dfc00917 	ldw	ra,36(sp)
     8e0:	dc400817 	ldw	r17,32(sp)
     8e4:	dc000717 	ldw	r16,28(sp)
     8e8:	dec00a04 	addi	sp,sp,40
     8ec:	f800283a 	ret
     8f0:	8009883a 	mov	r4,r16
     8f4:	0000e900 	call	e90 <__sinit>
     8f8:	003fe906 	br	8a0 <_puts_r+0x5c>
     8fc:	00bfffc4 	movi	r2,-1
     900:	003ff606 	br	8dc <_puts_r+0x98>

00000904 <puts>:
     904:	00810034 	movhi	r2,1024
     908:	1086a504 	addi	r2,r2,6804
     90c:	200b883a 	mov	r5,r4
     910:	11000017 	ldw	r4,0(r2)
     914:	00008441 	jmpi	844 <_puts_r>

00000918 <strlen>:
     918:	208000cc 	andi	r2,r4,3
     91c:	10002026 	beq	r2,zero,9a0 <strlen+0x88>
     920:	20800007 	ldb	r2,0(r4)
     924:	10002026 	beq	r2,zero,9a8 <strlen+0x90>
     928:	2005883a 	mov	r2,r4
     92c:	00000206 	br	938 <strlen+0x20>
     930:	10c00007 	ldb	r3,0(r2)
     934:	18001826 	beq	r3,zero,998 <strlen+0x80>
     938:	10800044 	addi	r2,r2,1
     93c:	10c000cc 	andi	r3,r2,3
     940:	183ffb1e 	bne	r3,zero,930 <strlen+0x18>
     944:	10c00017 	ldw	r3,0(r2)
     948:	01ffbff4 	movhi	r7,65279
     94c:	39ffbfc4 	addi	r7,r7,-257
     950:	00ca303a 	nor	r5,zero,r3
     954:	01a02074 	movhi	r6,32897
     958:	19c7883a 	add	r3,r3,r7
     95c:	31a02004 	addi	r6,r6,-32640
     960:	1946703a 	and	r3,r3,r5
     964:	1986703a 	and	r3,r3,r6
     968:	1800091e 	bne	r3,zero,990 <strlen+0x78>
     96c:	10800104 	addi	r2,r2,4
     970:	10c00017 	ldw	r3,0(r2)
     974:	19cb883a 	add	r5,r3,r7
     978:	00c6303a 	nor	r3,zero,r3
     97c:	28c6703a 	and	r3,r5,r3
     980:	1986703a 	and	r3,r3,r6
     984:	183ff926 	beq	r3,zero,96c <strlen+0x54>
     988:	00000106 	br	990 <strlen+0x78>
     98c:	10800044 	addi	r2,r2,1
     990:	10c00007 	ldb	r3,0(r2)
     994:	183ffd1e 	bne	r3,zero,98c <strlen+0x74>
     998:	1105c83a 	sub	r2,r2,r4
     99c:	f800283a 	ret
     9a0:	2005883a 	mov	r2,r4
     9a4:	003fe706 	br	944 <strlen+0x2c>
     9a8:	0005883a 	mov	r2,zero
     9ac:	f800283a 	ret

000009b0 <__call_exitprocs>:
     9b0:	defff504 	addi	sp,sp,-44
     9b4:	df000915 	stw	fp,36(sp)
     9b8:	dd400615 	stw	r21,24(sp)
     9bc:	dc800315 	stw	r18,12(sp)
     9c0:	dfc00a15 	stw	ra,40(sp)
     9c4:	ddc00815 	stw	r23,32(sp)
     9c8:	dd800715 	stw	r22,28(sp)
     9cc:	dd000515 	stw	r20,20(sp)
     9d0:	dcc00415 	stw	r19,16(sp)
     9d4:	dc400215 	stw	r17,8(sp)
     9d8:	dc000115 	stw	r16,4(sp)
     9dc:	d9000015 	stw	r4,0(sp)
     9e0:	2839883a 	mov	fp,r5
     9e4:	04800044 	movi	r18,1
     9e8:	057fffc4 	movi	r21,-1
     9ec:	00810034 	movhi	r2,1024
     9f0:	1086a404 	addi	r2,r2,6800
     9f4:	12000017 	ldw	r8,0(r2)
     9f8:	45005217 	ldw	r20,328(r8)
     9fc:	44c05204 	addi	r19,r8,328
     a00:	a0001c26 	beq	r20,zero,a74 <__call_exitprocs+0xc4>
     a04:	a0800117 	ldw	r2,4(r20)
     a08:	15ffffc4 	addi	r23,r2,-1
     a0c:	b8000d16 	blt	r23,zero,a44 <__call_exitprocs+0x94>
     a10:	14000044 	addi	r16,r2,1
     a14:	8421883a 	add	r16,r16,r16
     a18:	8421883a 	add	r16,r16,r16
     a1c:	84402004 	addi	r17,r16,128
     a20:	a463883a 	add	r17,r20,r17
     a24:	a421883a 	add	r16,r20,r16
     a28:	e0001e26 	beq	fp,zero,aa4 <__call_exitprocs+0xf4>
     a2c:	80804017 	ldw	r2,256(r16)
     a30:	e0801c26 	beq	fp,r2,aa4 <__call_exitprocs+0xf4>
     a34:	bdffffc4 	addi	r23,r23,-1
     a38:	843fff04 	addi	r16,r16,-4
     a3c:	8c7fff04 	addi	r17,r17,-4
     a40:	bd7ff91e 	bne	r23,r21,a28 <__call_exitprocs+0x78>
     a44:	00800034 	movhi	r2,0
     a48:	10800004 	addi	r2,r2,0
     a4c:	10000926 	beq	r2,zero,a74 <__call_exitprocs+0xc4>
     a50:	a0800117 	ldw	r2,4(r20)
     a54:	1000301e 	bne	r2,zero,b18 <__call_exitprocs+0x168>
     a58:	a0800017 	ldw	r2,0(r20)
     a5c:	10003226 	beq	r2,zero,b28 <__call_exitprocs+0x178>
     a60:	a009883a 	mov	r4,r20
     a64:	98800015 	stw	r2,0(r19)
     a68:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
     a6c:	9d000017 	ldw	r20,0(r19)
     a70:	a03fe41e 	bne	r20,zero,a04 <__call_exitprocs+0x54>
     a74:	dfc00a17 	ldw	ra,40(sp)
     a78:	df000917 	ldw	fp,36(sp)
     a7c:	ddc00817 	ldw	r23,32(sp)
     a80:	dd800717 	ldw	r22,28(sp)
     a84:	dd400617 	ldw	r21,24(sp)
     a88:	dd000517 	ldw	r20,20(sp)
     a8c:	dcc00417 	ldw	r19,16(sp)
     a90:	dc800317 	ldw	r18,12(sp)
     a94:	dc400217 	ldw	r17,8(sp)
     a98:	dc000117 	ldw	r16,4(sp)
     a9c:	dec00b04 	addi	sp,sp,44
     aa0:	f800283a 	ret
     aa4:	a0800117 	ldw	r2,4(r20)
     aa8:	80c00017 	ldw	r3,0(r16)
     aac:	10bfffc4 	addi	r2,r2,-1
     ab0:	15c01426 	beq	r2,r23,b04 <__call_exitprocs+0x154>
     ab4:	80000015 	stw	zero,0(r16)
     ab8:	183fde26 	beq	r3,zero,a34 <__call_exitprocs+0x84>
     abc:	95c8983a 	sll	r4,r18,r23
     ac0:	a0806217 	ldw	r2,392(r20)
     ac4:	a5800117 	ldw	r22,4(r20)
     ac8:	2084703a 	and	r2,r4,r2
     acc:	10000b26 	beq	r2,zero,afc <__call_exitprocs+0x14c>
     ad0:	a0806317 	ldw	r2,396(r20)
     ad4:	2088703a 	and	r4,r4,r2
     ad8:	20000c1e 	bne	r4,zero,b0c <__call_exitprocs+0x15c>
     adc:	89400017 	ldw	r5,0(r17)
     ae0:	d9000017 	ldw	r4,0(sp)
     ae4:	183ee83a 	callr	r3
     ae8:	a0800117 	ldw	r2,4(r20)
     aec:	15bfbf1e 	bne	r2,r22,9ec <__call_exitprocs+0x3c>
     af0:	98800017 	ldw	r2,0(r19)
     af4:	153fcf26 	beq	r2,r20,a34 <__call_exitprocs+0x84>
     af8:	003fbc06 	br	9ec <__call_exitprocs+0x3c>
     afc:	183ee83a 	callr	r3
     b00:	003ff906 	br	ae8 <__call_exitprocs+0x138>
     b04:	a5c00115 	stw	r23,4(r20)
     b08:	003feb06 	br	ab8 <__call_exitprocs+0x108>
     b0c:	89000017 	ldw	r4,0(r17)
     b10:	183ee83a 	callr	r3
     b14:	003ff406 	br	ae8 <__call_exitprocs+0x138>
     b18:	a0800017 	ldw	r2,0(r20)
     b1c:	a027883a 	mov	r19,r20
     b20:	1029883a 	mov	r20,r2
     b24:	003fb606 	br	a00 <__call_exitprocs+0x50>
     b28:	0005883a 	mov	r2,zero
     b2c:	003ffb06 	br	b1c <__call_exitprocs+0x16c>

00000b30 <__fp_unlock>:
     b30:	0005883a 	mov	r2,zero
     b34:	f800283a 	ret

00000b38 <_cleanup_r>:
     b38:	01400034 	movhi	r5,0
     b3c:	294aba04 	addi	r5,r5,10984
     b40:	000146c1 	jmpi	146c <_fwalk_reent>

00000b44 <__sinit.part.1>:
     b44:	defff704 	addi	sp,sp,-36
     b48:	00c00034 	movhi	r3,0
     b4c:	dfc00815 	stw	ra,32(sp)
     b50:	ddc00715 	stw	r23,28(sp)
     b54:	dd800615 	stw	r22,24(sp)
     b58:	dd400515 	stw	r21,20(sp)
     b5c:	dd000415 	stw	r20,16(sp)
     b60:	dcc00315 	stw	r19,12(sp)
     b64:	dc800215 	stw	r18,8(sp)
     b68:	dc400115 	stw	r17,4(sp)
     b6c:	dc000015 	stw	r16,0(sp)
     b70:	18c2ce04 	addi	r3,r3,2872
     b74:	24000117 	ldw	r16,4(r4)
     b78:	20c00f15 	stw	r3,60(r4)
     b7c:	2080bb04 	addi	r2,r4,748
     b80:	00c000c4 	movi	r3,3
     b84:	20c0b915 	stw	r3,740(r4)
     b88:	2080ba15 	stw	r2,744(r4)
     b8c:	2000b815 	stw	zero,736(r4)
     b90:	05c00204 	movi	r23,8
     b94:	00800104 	movi	r2,4
     b98:	2025883a 	mov	r18,r4
     b9c:	b80d883a 	mov	r6,r23
     ba0:	81001704 	addi	r4,r16,92
     ba4:	000b883a 	mov	r5,zero
     ba8:	80000015 	stw	zero,0(r16)
     bac:	80000115 	stw	zero,4(r16)
     bb0:	80000215 	stw	zero,8(r16)
     bb4:	8080030d 	sth	r2,12(r16)
     bb8:	80001915 	stw	zero,100(r16)
     bbc:	8000038d 	sth	zero,14(r16)
     bc0:	80000415 	stw	zero,16(r16)
     bc4:	80000515 	stw	zero,20(r16)
     bc8:	80000615 	stw	zero,24(r16)
     bcc:	00020c40 	call	20c4 <memset>
     bd0:	05800034 	movhi	r22,0
     bd4:	94400217 	ldw	r17,8(r18)
     bd8:	05400034 	movhi	r21,0
     bdc:	05000034 	movhi	r20,0
     be0:	04c00034 	movhi	r19,0
     be4:	b589e904 	addi	r22,r22,10148
     be8:	ad4a0004 	addi	r21,r21,10240
     bec:	a50a1f04 	addi	r20,r20,10364
     bf0:	9cca3604 	addi	r19,r19,10456
     bf4:	85800815 	stw	r22,32(r16)
     bf8:	85400915 	stw	r21,36(r16)
     bfc:	85000a15 	stw	r20,40(r16)
     c00:	84c00b15 	stw	r19,44(r16)
     c04:	84000715 	stw	r16,28(r16)
     c08:	00800284 	movi	r2,10
     c0c:	8880030d 	sth	r2,12(r17)
     c10:	00800044 	movi	r2,1
     c14:	b80d883a 	mov	r6,r23
     c18:	89001704 	addi	r4,r17,92
     c1c:	000b883a 	mov	r5,zero
     c20:	88000015 	stw	zero,0(r17)
     c24:	88000115 	stw	zero,4(r17)
     c28:	88000215 	stw	zero,8(r17)
     c2c:	88001915 	stw	zero,100(r17)
     c30:	8880038d 	sth	r2,14(r17)
     c34:	88000415 	stw	zero,16(r17)
     c38:	88000515 	stw	zero,20(r17)
     c3c:	88000615 	stw	zero,24(r17)
     c40:	00020c40 	call	20c4 <memset>
     c44:	94000317 	ldw	r16,12(r18)
     c48:	00800484 	movi	r2,18
     c4c:	8c400715 	stw	r17,28(r17)
     c50:	8d800815 	stw	r22,32(r17)
     c54:	8d400915 	stw	r21,36(r17)
     c58:	8d000a15 	stw	r20,40(r17)
     c5c:	8cc00b15 	stw	r19,44(r17)
     c60:	8080030d 	sth	r2,12(r16)
     c64:	00800084 	movi	r2,2
     c68:	80000015 	stw	zero,0(r16)
     c6c:	80000115 	stw	zero,4(r16)
     c70:	80000215 	stw	zero,8(r16)
     c74:	80001915 	stw	zero,100(r16)
     c78:	8080038d 	sth	r2,14(r16)
     c7c:	80000415 	stw	zero,16(r16)
     c80:	80000515 	stw	zero,20(r16)
     c84:	80000615 	stw	zero,24(r16)
     c88:	b80d883a 	mov	r6,r23
     c8c:	000b883a 	mov	r5,zero
     c90:	81001704 	addi	r4,r16,92
     c94:	00020c40 	call	20c4 <memset>
     c98:	00800044 	movi	r2,1
     c9c:	84000715 	stw	r16,28(r16)
     ca0:	85800815 	stw	r22,32(r16)
     ca4:	85400915 	stw	r21,36(r16)
     ca8:	85000a15 	stw	r20,40(r16)
     cac:	84c00b15 	stw	r19,44(r16)
     cb0:	90800e15 	stw	r2,56(r18)
     cb4:	dfc00817 	ldw	ra,32(sp)
     cb8:	ddc00717 	ldw	r23,28(sp)
     cbc:	dd800617 	ldw	r22,24(sp)
     cc0:	dd400517 	ldw	r21,20(sp)
     cc4:	dd000417 	ldw	r20,16(sp)
     cc8:	dcc00317 	ldw	r19,12(sp)
     ccc:	dc800217 	ldw	r18,8(sp)
     cd0:	dc400117 	ldw	r17,4(sp)
     cd4:	dc000017 	ldw	r16,0(sp)
     cd8:	dec00904 	addi	sp,sp,36
     cdc:	f800283a 	ret

00000ce0 <__fp_lock>:
     ce0:	0005883a 	mov	r2,zero
     ce4:	f800283a 	ret

00000ce8 <__sfmoreglue>:
     ce8:	defffc04 	addi	sp,sp,-16
     cec:	dc800215 	stw	r18,8(sp)
     cf0:	2825883a 	mov	r18,r5
     cf4:	dc000015 	stw	r16,0(sp)
     cf8:	01401a04 	movi	r5,104
     cfc:	2021883a 	mov	r16,r4
     d00:	913fffc4 	addi	r4,r18,-1
     d04:	dfc00315 	stw	ra,12(sp)
     d08:	dc400115 	stw	r17,4(sp)
     d0c:	00007e40 	call	7e4 <__mulsi3>
     d10:	8009883a 	mov	r4,r16
     d14:	11401d04 	addi	r5,r2,116
     d18:	1023883a 	mov	r17,r2
     d1c:	00015300 	call	1530 <_malloc_r>
     d20:	1021883a 	mov	r16,r2
     d24:	10000726 	beq	r2,zero,d44 <__sfmoreglue+0x5c>
     d28:	11000304 	addi	r4,r2,12
     d2c:	10000015 	stw	zero,0(r2)
     d30:	14800115 	stw	r18,4(r2)
     d34:	11000215 	stw	r4,8(r2)
     d38:	89801a04 	addi	r6,r17,104
     d3c:	000b883a 	mov	r5,zero
     d40:	00020c40 	call	20c4 <memset>
     d44:	8005883a 	mov	r2,r16
     d48:	dfc00317 	ldw	ra,12(sp)
     d4c:	dc800217 	ldw	r18,8(sp)
     d50:	dc400117 	ldw	r17,4(sp)
     d54:	dc000017 	ldw	r16,0(sp)
     d58:	dec00404 	addi	sp,sp,16
     d5c:	f800283a 	ret

00000d60 <__sfp>:
     d60:	defffb04 	addi	sp,sp,-20
     d64:	dc000015 	stw	r16,0(sp)
     d68:	04010034 	movhi	r16,1024
     d6c:	8406a404 	addi	r16,r16,6800
     d70:	dcc00315 	stw	r19,12(sp)
     d74:	2027883a 	mov	r19,r4
     d78:	81000017 	ldw	r4,0(r16)
     d7c:	dfc00415 	stw	ra,16(sp)
     d80:	dc800215 	stw	r18,8(sp)
     d84:	20800e17 	ldw	r2,56(r4)
     d88:	dc400115 	stw	r17,4(sp)
     d8c:	1000021e 	bne	r2,zero,d98 <__sfp+0x38>
     d90:	0000b440 	call	b44 <__sinit.part.1>
     d94:	81000017 	ldw	r4,0(r16)
     d98:	2480b804 	addi	r18,r4,736
     d9c:	047fffc4 	movi	r17,-1
     da0:	91000117 	ldw	r4,4(r18)
     da4:	94000217 	ldw	r16,8(r18)
     da8:	213fffc4 	addi	r4,r4,-1
     dac:	20000a16 	blt	r4,zero,dd8 <__sfp+0x78>
     db0:	8080030f 	ldh	r2,12(r16)
     db4:	10000c26 	beq	r2,zero,de8 <__sfp+0x88>
     db8:	80c01d04 	addi	r3,r16,116
     dbc:	00000206 	br	dc8 <__sfp+0x68>
     dc0:	18bfe60f 	ldh	r2,-104(r3)
     dc4:	10000826 	beq	r2,zero,de8 <__sfp+0x88>
     dc8:	213fffc4 	addi	r4,r4,-1
     dcc:	1c3ffd04 	addi	r16,r3,-12
     dd0:	18c01a04 	addi	r3,r3,104
     dd4:	247ffa1e 	bne	r4,r17,dc0 <__sfp+0x60>
     dd8:	90800017 	ldw	r2,0(r18)
     ddc:	10001d26 	beq	r2,zero,e54 <__sfp+0xf4>
     de0:	1025883a 	mov	r18,r2
     de4:	003fee06 	br	da0 <__sfp+0x40>
     de8:	00bfffc4 	movi	r2,-1
     dec:	8080038d 	sth	r2,14(r16)
     df0:	00800044 	movi	r2,1
     df4:	8080030d 	sth	r2,12(r16)
     df8:	80001915 	stw	zero,100(r16)
     dfc:	80000015 	stw	zero,0(r16)
     e00:	80000215 	stw	zero,8(r16)
     e04:	80000115 	stw	zero,4(r16)
     e08:	80000415 	stw	zero,16(r16)
     e0c:	80000515 	stw	zero,20(r16)
     e10:	80000615 	stw	zero,24(r16)
     e14:	01800204 	movi	r6,8
     e18:	000b883a 	mov	r5,zero
     e1c:	81001704 	addi	r4,r16,92
     e20:	00020c40 	call	20c4 <memset>
     e24:	8005883a 	mov	r2,r16
     e28:	80000c15 	stw	zero,48(r16)
     e2c:	80000d15 	stw	zero,52(r16)
     e30:	80001115 	stw	zero,68(r16)
     e34:	80001215 	stw	zero,72(r16)
     e38:	dfc00417 	ldw	ra,16(sp)
     e3c:	dcc00317 	ldw	r19,12(sp)
     e40:	dc800217 	ldw	r18,8(sp)
     e44:	dc400117 	ldw	r17,4(sp)
     e48:	dc000017 	ldw	r16,0(sp)
     e4c:	dec00504 	addi	sp,sp,20
     e50:	f800283a 	ret
     e54:	01400104 	movi	r5,4
     e58:	9809883a 	mov	r4,r19
     e5c:	0000ce80 	call	ce8 <__sfmoreglue>
     e60:	90800015 	stw	r2,0(r18)
     e64:	103fde1e 	bne	r2,zero,de0 <__sfp+0x80>
     e68:	00800304 	movi	r2,12
     e6c:	98800015 	stw	r2,0(r19)
     e70:	0005883a 	mov	r2,zero
     e74:	003ff006 	br	e38 <__sfp+0xd8>

00000e78 <_cleanup>:
     e78:	00810034 	movhi	r2,1024
     e7c:	1086a404 	addi	r2,r2,6800
     e80:	11000017 	ldw	r4,0(r2)
     e84:	01400034 	movhi	r5,0
     e88:	294aba04 	addi	r5,r5,10984
     e8c:	000146c1 	jmpi	146c <_fwalk_reent>

00000e90 <__sinit>:
     e90:	20800e17 	ldw	r2,56(r4)
     e94:	10000126 	beq	r2,zero,e9c <__sinit+0xc>
     e98:	f800283a 	ret
     e9c:	0000b441 	jmpi	b44 <__sinit.part.1>

00000ea0 <__sfp_lock_acquire>:
     ea0:	f800283a 	ret

00000ea4 <__sfp_lock_release>:
     ea4:	f800283a 	ret

00000ea8 <__sinit_lock_acquire>:
     ea8:	f800283a 	ret

00000eac <__sinit_lock_release>:
     eac:	f800283a 	ret

00000eb0 <__fp_lock_all>:
     eb0:	00810034 	movhi	r2,1024
     eb4:	1086a504 	addi	r2,r2,6804
     eb8:	11000017 	ldw	r4,0(r2)
     ebc:	01400034 	movhi	r5,0
     ec0:	29433804 	addi	r5,r5,3296
     ec4:	00013a81 	jmpi	13a8 <_fwalk>

00000ec8 <__fp_unlock_all>:
     ec8:	00810034 	movhi	r2,1024
     ecc:	1086a504 	addi	r2,r2,6804
     ed0:	11000017 	ldw	r4,0(r2)
     ed4:	01400034 	movhi	r5,0
     ed8:	2942cc04 	addi	r5,r5,2864
     edc:	00013a81 	jmpi	13a8 <_fwalk>

00000ee0 <__sfvwrite_r>:
     ee0:	30800217 	ldw	r2,8(r6)
     ee4:	10006726 	beq	r2,zero,1084 <__sfvwrite_r+0x1a4>
     ee8:	28c0030b 	ldhu	r3,12(r5)
     eec:	defff404 	addi	sp,sp,-48
     ef0:	dd400715 	stw	r21,28(sp)
     ef4:	dd000615 	stw	r20,24(sp)
     ef8:	dc000215 	stw	r16,8(sp)
     efc:	dfc00b15 	stw	ra,44(sp)
     f00:	df000a15 	stw	fp,40(sp)
     f04:	ddc00915 	stw	r23,36(sp)
     f08:	dd800815 	stw	r22,32(sp)
     f0c:	dcc00515 	stw	r19,20(sp)
     f10:	dc800415 	stw	r18,16(sp)
     f14:	dc400315 	stw	r17,12(sp)
     f18:	1880020c 	andi	r2,r3,8
     f1c:	2821883a 	mov	r16,r5
     f20:	202b883a 	mov	r21,r4
     f24:	3029883a 	mov	r20,r6
     f28:	10002726 	beq	r2,zero,fc8 <__sfvwrite_r+0xe8>
     f2c:	28800417 	ldw	r2,16(r5)
     f30:	10002526 	beq	r2,zero,fc8 <__sfvwrite_r+0xe8>
     f34:	1880008c 	andi	r2,r3,2
     f38:	a4400017 	ldw	r17,0(r20)
     f3c:	10002a26 	beq	r2,zero,fe8 <__sfvwrite_r+0x108>
     f40:	05a00034 	movhi	r22,32768
     f44:	0027883a 	mov	r19,zero
     f48:	0025883a 	mov	r18,zero
     f4c:	b5bf0004 	addi	r22,r22,-1024
     f50:	980d883a 	mov	r6,r19
     f54:	a809883a 	mov	r4,r21
     f58:	90004626 	beq	r18,zero,1074 <__sfvwrite_r+0x194>
     f5c:	900f883a 	mov	r7,r18
     f60:	b480022e 	bgeu	r22,r18,f6c <__sfvwrite_r+0x8c>
     f64:	01e00034 	movhi	r7,32768
     f68:	39ff0004 	addi	r7,r7,-1024
     f6c:	80800917 	ldw	r2,36(r16)
     f70:	81400717 	ldw	r5,28(r16)
     f74:	103ee83a 	callr	r2
     f78:	00805a0e 	bge	zero,r2,10e4 <__sfvwrite_r+0x204>
     f7c:	a0c00217 	ldw	r3,8(r20)
     f80:	98a7883a 	add	r19,r19,r2
     f84:	90a5c83a 	sub	r18,r18,r2
     f88:	1885c83a 	sub	r2,r3,r2
     f8c:	a0800215 	stw	r2,8(r20)
     f90:	103fef1e 	bne	r2,zero,f50 <__sfvwrite_r+0x70>
     f94:	0005883a 	mov	r2,zero
     f98:	dfc00b17 	ldw	ra,44(sp)
     f9c:	df000a17 	ldw	fp,40(sp)
     fa0:	ddc00917 	ldw	r23,36(sp)
     fa4:	dd800817 	ldw	r22,32(sp)
     fa8:	dd400717 	ldw	r21,28(sp)
     fac:	dd000617 	ldw	r20,24(sp)
     fb0:	dcc00517 	ldw	r19,20(sp)
     fb4:	dc800417 	ldw	r18,16(sp)
     fb8:	dc400317 	ldw	r17,12(sp)
     fbc:	dc000217 	ldw	r16,8(sp)
     fc0:	dec00c04 	addi	sp,sp,48
     fc4:	f800283a 	ret
     fc8:	800b883a 	mov	r5,r16
     fcc:	a809883a 	mov	r4,r21
     fd0:	00029400 	call	2940 <__swsetup_r>
     fd4:	1000ee1e 	bne	r2,zero,1390 <__sfvwrite_r+0x4b0>
     fd8:	80c0030b 	ldhu	r3,12(r16)
     fdc:	a4400017 	ldw	r17,0(r20)
     fe0:	1880008c 	andi	r2,r3,2
     fe4:	103fd61e 	bne	r2,zero,f40 <__sfvwrite_r+0x60>
     fe8:	1880004c 	andi	r2,r3,1
     fec:	1000421e 	bne	r2,zero,10f8 <__sfvwrite_r+0x218>
     ff0:	0039883a 	mov	fp,zero
     ff4:	0025883a 	mov	r18,zero
     ff8:	90001a26 	beq	r18,zero,1064 <__sfvwrite_r+0x184>
     ffc:	1880800c 	andi	r2,r3,512
    1000:	84c00217 	ldw	r19,8(r16)
    1004:	10002126 	beq	r2,zero,108c <__sfvwrite_r+0x1ac>
    1008:	982f883a 	mov	r23,r19
    100c:	94c09636 	bltu	r18,r19,1268 <__sfvwrite_r+0x388>
    1010:	1881200c 	andi	r2,r3,1152
    1014:	1000a11e 	bne	r2,zero,129c <__sfvwrite_r+0x3bc>
    1018:	81000017 	ldw	r4,0(r16)
    101c:	b80d883a 	mov	r6,r23
    1020:	e00b883a 	mov	r5,fp
    1024:	0001f680 	call	1f68 <memmove>
    1028:	80c00217 	ldw	r3,8(r16)
    102c:	81000017 	ldw	r4,0(r16)
    1030:	9005883a 	mov	r2,r18
    1034:	1ce7c83a 	sub	r19,r3,r19
    1038:	25cf883a 	add	r7,r4,r23
    103c:	84c00215 	stw	r19,8(r16)
    1040:	81c00015 	stw	r7,0(r16)
    1044:	a0c00217 	ldw	r3,8(r20)
    1048:	e0b9883a 	add	fp,fp,r2
    104c:	90a5c83a 	sub	r18,r18,r2
    1050:	18a7c83a 	sub	r19,r3,r2
    1054:	a4c00215 	stw	r19,8(r20)
    1058:	983fce26 	beq	r19,zero,f94 <__sfvwrite_r+0xb4>
    105c:	80c0030b 	ldhu	r3,12(r16)
    1060:	903fe61e 	bne	r18,zero,ffc <__sfvwrite_r+0x11c>
    1064:	8f000017 	ldw	fp,0(r17)
    1068:	8c800117 	ldw	r18,4(r17)
    106c:	8c400204 	addi	r17,r17,8
    1070:	003fe106 	br	ff8 <__sfvwrite_r+0x118>
    1074:	8cc00017 	ldw	r19,0(r17)
    1078:	8c800117 	ldw	r18,4(r17)
    107c:	8c400204 	addi	r17,r17,8
    1080:	003fb306 	br	f50 <__sfvwrite_r+0x70>
    1084:	0005883a 	mov	r2,zero
    1088:	f800283a 	ret
    108c:	81000017 	ldw	r4,0(r16)
    1090:	80800417 	ldw	r2,16(r16)
    1094:	11005a36 	bltu	r2,r4,1200 <__sfvwrite_r+0x320>
    1098:	85c00517 	ldw	r23,20(r16)
    109c:	95c05836 	bltu	r18,r23,1200 <__sfvwrite_r+0x320>
    10a0:	00a00034 	movhi	r2,32768
    10a4:	10bfffc4 	addi	r2,r2,-1
    10a8:	9009883a 	mov	r4,r18
    10ac:	1480012e 	bgeu	r2,r18,10b4 <__sfvwrite_r+0x1d4>
    10b0:	1009883a 	mov	r4,r2
    10b4:	b80b883a 	mov	r5,r23
    10b8:	00035f40 	call	35f4 <__divsi3>
    10bc:	b80b883a 	mov	r5,r23
    10c0:	1009883a 	mov	r4,r2
    10c4:	00007e40 	call	7e4 <__mulsi3>
    10c8:	81400717 	ldw	r5,28(r16)
    10cc:	80c00917 	ldw	r3,36(r16)
    10d0:	100f883a 	mov	r7,r2
    10d4:	e00d883a 	mov	r6,fp
    10d8:	a809883a 	mov	r4,r21
    10dc:	183ee83a 	callr	r3
    10e0:	00bfd816 	blt	zero,r2,1044 <__sfvwrite_r+0x164>
    10e4:	8080030b 	ldhu	r2,12(r16)
    10e8:	10801014 	ori	r2,r2,64
    10ec:	8080030d 	sth	r2,12(r16)
    10f0:	00bfffc4 	movi	r2,-1
    10f4:	003fa806 	br	f98 <__sfvwrite_r+0xb8>
    10f8:	0027883a 	mov	r19,zero
    10fc:	0011883a 	mov	r8,zero
    1100:	0039883a 	mov	fp,zero
    1104:	0025883a 	mov	r18,zero
    1108:	90001f26 	beq	r18,zero,1188 <__sfvwrite_r+0x2a8>
    110c:	40005a26 	beq	r8,zero,1278 <__sfvwrite_r+0x398>
    1110:	982d883a 	mov	r22,r19
    1114:	94c0012e 	bgeu	r18,r19,111c <__sfvwrite_r+0x23c>
    1118:	902d883a 	mov	r22,r18
    111c:	81000017 	ldw	r4,0(r16)
    1120:	80800417 	ldw	r2,16(r16)
    1124:	b02f883a 	mov	r23,r22
    1128:	81c00517 	ldw	r7,20(r16)
    112c:	1100032e 	bgeu	r2,r4,113c <__sfvwrite_r+0x25c>
    1130:	80c00217 	ldw	r3,8(r16)
    1134:	38c7883a 	add	r3,r7,r3
    1138:	1d801816 	blt	r3,r22,119c <__sfvwrite_r+0x2bc>
    113c:	b1c03e16 	blt	r22,r7,1238 <__sfvwrite_r+0x358>
    1140:	80800917 	ldw	r2,36(r16)
    1144:	81400717 	ldw	r5,28(r16)
    1148:	e00d883a 	mov	r6,fp
    114c:	da000115 	stw	r8,4(sp)
    1150:	a809883a 	mov	r4,r21
    1154:	103ee83a 	callr	r2
    1158:	102f883a 	mov	r23,r2
    115c:	da000117 	ldw	r8,4(sp)
    1160:	00bfe00e 	bge	zero,r2,10e4 <__sfvwrite_r+0x204>
    1164:	9de7c83a 	sub	r19,r19,r23
    1168:	98001f26 	beq	r19,zero,11e8 <__sfvwrite_r+0x308>
    116c:	a0800217 	ldw	r2,8(r20)
    1170:	e5f9883a 	add	fp,fp,r23
    1174:	95e5c83a 	sub	r18,r18,r23
    1178:	15efc83a 	sub	r23,r2,r23
    117c:	a5c00215 	stw	r23,8(r20)
    1180:	b83f8426 	beq	r23,zero,f94 <__sfvwrite_r+0xb4>
    1184:	903fe11e 	bne	r18,zero,110c <__sfvwrite_r+0x22c>
    1188:	8f000017 	ldw	fp,0(r17)
    118c:	8c800117 	ldw	r18,4(r17)
    1190:	0011883a 	mov	r8,zero
    1194:	8c400204 	addi	r17,r17,8
    1198:	003fdb06 	br	1108 <__sfvwrite_r+0x228>
    119c:	180d883a 	mov	r6,r3
    11a0:	e00b883a 	mov	r5,fp
    11a4:	da000115 	stw	r8,4(sp)
    11a8:	d8c00015 	stw	r3,0(sp)
    11ac:	0001f680 	call	1f68 <memmove>
    11b0:	d8c00017 	ldw	r3,0(sp)
    11b4:	80800017 	ldw	r2,0(r16)
    11b8:	800b883a 	mov	r5,r16
    11bc:	a809883a 	mov	r4,r21
    11c0:	10c5883a 	add	r2,r2,r3
    11c4:	80800015 	stw	r2,0(r16)
    11c8:	d8c00015 	stw	r3,0(sp)
    11cc:	0002e080 	call	2e08 <_fflush_r>
    11d0:	d8c00017 	ldw	r3,0(sp)
    11d4:	da000117 	ldw	r8,4(sp)
    11d8:	103fc21e 	bne	r2,zero,10e4 <__sfvwrite_r+0x204>
    11dc:	182f883a 	mov	r23,r3
    11e0:	9de7c83a 	sub	r19,r19,r23
    11e4:	983fe11e 	bne	r19,zero,116c <__sfvwrite_r+0x28c>
    11e8:	800b883a 	mov	r5,r16
    11ec:	a809883a 	mov	r4,r21
    11f0:	0002e080 	call	2e08 <_fflush_r>
    11f4:	103fbb1e 	bne	r2,zero,10e4 <__sfvwrite_r+0x204>
    11f8:	0011883a 	mov	r8,zero
    11fc:	003fdb06 	br	116c <__sfvwrite_r+0x28c>
    1200:	94c0012e 	bgeu	r18,r19,1208 <__sfvwrite_r+0x328>
    1204:	9027883a 	mov	r19,r18
    1208:	980d883a 	mov	r6,r19
    120c:	e00b883a 	mov	r5,fp
    1210:	0001f680 	call	1f68 <memmove>
    1214:	80800217 	ldw	r2,8(r16)
    1218:	80c00017 	ldw	r3,0(r16)
    121c:	14c5c83a 	sub	r2,r2,r19
    1220:	1cc7883a 	add	r3,r3,r19
    1224:	80800215 	stw	r2,8(r16)
    1228:	80c00015 	stw	r3,0(r16)
    122c:	10004326 	beq	r2,zero,133c <__sfvwrite_r+0x45c>
    1230:	9805883a 	mov	r2,r19
    1234:	003f8306 	br	1044 <__sfvwrite_r+0x164>
    1238:	b00d883a 	mov	r6,r22
    123c:	e00b883a 	mov	r5,fp
    1240:	da000115 	stw	r8,4(sp)
    1244:	0001f680 	call	1f68 <memmove>
    1248:	80800217 	ldw	r2,8(r16)
    124c:	80c00017 	ldw	r3,0(r16)
    1250:	da000117 	ldw	r8,4(sp)
    1254:	1585c83a 	sub	r2,r2,r22
    1258:	1dad883a 	add	r22,r3,r22
    125c:	80800215 	stw	r2,8(r16)
    1260:	85800015 	stw	r22,0(r16)
    1264:	003fbf06 	br	1164 <__sfvwrite_r+0x284>
    1268:	81000017 	ldw	r4,0(r16)
    126c:	9027883a 	mov	r19,r18
    1270:	902f883a 	mov	r23,r18
    1274:	003f6906 	br	101c <__sfvwrite_r+0x13c>
    1278:	900d883a 	mov	r6,r18
    127c:	01400284 	movi	r5,10
    1280:	e009883a 	mov	r4,fp
    1284:	0001d3c0 	call	1d3c <memchr>
    1288:	10003e26 	beq	r2,zero,1384 <__sfvwrite_r+0x4a4>
    128c:	10800044 	addi	r2,r2,1
    1290:	1727c83a 	sub	r19,r2,fp
    1294:	02000044 	movi	r8,1
    1298:	003f9d06 	br	1110 <__sfvwrite_r+0x230>
    129c:	80800517 	ldw	r2,20(r16)
    12a0:	81400417 	ldw	r5,16(r16)
    12a4:	81c00017 	ldw	r7,0(r16)
    12a8:	10a7883a 	add	r19,r2,r2
    12ac:	9885883a 	add	r2,r19,r2
    12b0:	1026d7fa 	srli	r19,r2,31
    12b4:	396dc83a 	sub	r22,r7,r5
    12b8:	b1000044 	addi	r4,r22,1
    12bc:	9885883a 	add	r2,r19,r2
    12c0:	1027d07a 	srai	r19,r2,1
    12c4:	2485883a 	add	r2,r4,r18
    12c8:	980d883a 	mov	r6,r19
    12cc:	9880022e 	bgeu	r19,r2,12d8 <__sfvwrite_r+0x3f8>
    12d0:	1027883a 	mov	r19,r2
    12d4:	100d883a 	mov	r6,r2
    12d8:	18c1000c 	andi	r3,r3,1024
    12dc:	18001c26 	beq	r3,zero,1350 <__sfvwrite_r+0x470>
    12e0:	300b883a 	mov	r5,r6
    12e4:	a809883a 	mov	r4,r21
    12e8:	00015300 	call	1530 <_malloc_r>
    12ec:	102f883a 	mov	r23,r2
    12f0:	10002926 	beq	r2,zero,1398 <__sfvwrite_r+0x4b8>
    12f4:	81400417 	ldw	r5,16(r16)
    12f8:	b00d883a 	mov	r6,r22
    12fc:	1009883a 	mov	r4,r2
    1300:	0001e200 	call	1e20 <memcpy>
    1304:	8080030b 	ldhu	r2,12(r16)
    1308:	00fedfc4 	movi	r3,-1153
    130c:	10c4703a 	and	r2,r2,r3
    1310:	10802014 	ori	r2,r2,128
    1314:	8080030d 	sth	r2,12(r16)
    1318:	bd89883a 	add	r4,r23,r22
    131c:	9d8fc83a 	sub	r7,r19,r22
    1320:	85c00415 	stw	r23,16(r16)
    1324:	84c00515 	stw	r19,20(r16)
    1328:	81000015 	stw	r4,0(r16)
    132c:	9027883a 	mov	r19,r18
    1330:	81c00215 	stw	r7,8(r16)
    1334:	902f883a 	mov	r23,r18
    1338:	003f3806 	br	101c <__sfvwrite_r+0x13c>
    133c:	800b883a 	mov	r5,r16
    1340:	a809883a 	mov	r4,r21
    1344:	0002e080 	call	2e08 <_fflush_r>
    1348:	103fb926 	beq	r2,zero,1230 <__sfvwrite_r+0x350>
    134c:	003f6506 	br	10e4 <__sfvwrite_r+0x204>
    1350:	a809883a 	mov	r4,r21
    1354:	00021ec0 	call	21ec <_realloc_r>
    1358:	102f883a 	mov	r23,r2
    135c:	103fee1e 	bne	r2,zero,1318 <__sfvwrite_r+0x438>
    1360:	81400417 	ldw	r5,16(r16)
    1364:	a809883a 	mov	r4,r21
    1368:	0002fb80 	call	2fb8 <_free_r>
    136c:	8080030b 	ldhu	r2,12(r16)
    1370:	00ffdfc4 	movi	r3,-129
    1374:	1884703a 	and	r2,r3,r2
    1378:	00c00304 	movi	r3,12
    137c:	a8c00015 	stw	r3,0(r21)
    1380:	003f5906 	br	10e8 <__sfvwrite_r+0x208>
    1384:	94c00044 	addi	r19,r18,1
    1388:	02000044 	movi	r8,1
    138c:	003f6006 	br	1110 <__sfvwrite_r+0x230>
    1390:	00bfffc4 	movi	r2,-1
    1394:	003f0006 	br	f98 <__sfvwrite_r+0xb8>
    1398:	00800304 	movi	r2,12
    139c:	a8800015 	stw	r2,0(r21)
    13a0:	8080030b 	ldhu	r2,12(r16)
    13a4:	003f5006 	br	10e8 <__sfvwrite_r+0x208>

000013a8 <_fwalk>:
    13a8:	defff704 	addi	sp,sp,-36
    13ac:	dd000415 	stw	r20,16(sp)
    13b0:	dfc00815 	stw	ra,32(sp)
    13b4:	ddc00715 	stw	r23,28(sp)
    13b8:	dd800615 	stw	r22,24(sp)
    13bc:	dd400515 	stw	r21,20(sp)
    13c0:	dcc00315 	stw	r19,12(sp)
    13c4:	dc800215 	stw	r18,8(sp)
    13c8:	dc400115 	stw	r17,4(sp)
    13cc:	dc000015 	stw	r16,0(sp)
    13d0:	2500b804 	addi	r20,r4,736
    13d4:	a0002326 	beq	r20,zero,1464 <_fwalk+0xbc>
    13d8:	282b883a 	mov	r21,r5
    13dc:	002f883a 	mov	r23,zero
    13e0:	05800044 	movi	r22,1
    13e4:	04ffffc4 	movi	r19,-1
    13e8:	a4400117 	ldw	r17,4(r20)
    13ec:	a4800217 	ldw	r18,8(r20)
    13f0:	8c7fffc4 	addi	r17,r17,-1
    13f4:	88000d16 	blt	r17,zero,142c <_fwalk+0x84>
    13f8:	94000304 	addi	r16,r18,12
    13fc:	94800384 	addi	r18,r18,14
    1400:	8080000b 	ldhu	r2,0(r16)
    1404:	8c7fffc4 	addi	r17,r17,-1
    1408:	813ffd04 	addi	r4,r16,-12
    140c:	b080042e 	bgeu	r22,r2,1420 <_fwalk+0x78>
    1410:	9080000f 	ldh	r2,0(r18)
    1414:	14c00226 	beq	r2,r19,1420 <_fwalk+0x78>
    1418:	a83ee83a 	callr	r21
    141c:	b8aeb03a 	or	r23,r23,r2
    1420:	84001a04 	addi	r16,r16,104
    1424:	94801a04 	addi	r18,r18,104
    1428:	8cfff51e 	bne	r17,r19,1400 <_fwalk+0x58>
    142c:	a5000017 	ldw	r20,0(r20)
    1430:	a03fed1e 	bne	r20,zero,13e8 <_fwalk+0x40>
    1434:	b805883a 	mov	r2,r23
    1438:	dfc00817 	ldw	ra,32(sp)
    143c:	ddc00717 	ldw	r23,28(sp)
    1440:	dd800617 	ldw	r22,24(sp)
    1444:	dd400517 	ldw	r21,20(sp)
    1448:	dd000417 	ldw	r20,16(sp)
    144c:	dcc00317 	ldw	r19,12(sp)
    1450:	dc800217 	ldw	r18,8(sp)
    1454:	dc400117 	ldw	r17,4(sp)
    1458:	dc000017 	ldw	r16,0(sp)
    145c:	dec00904 	addi	sp,sp,36
    1460:	f800283a 	ret
    1464:	002f883a 	mov	r23,zero
    1468:	003ff206 	br	1434 <_fwalk+0x8c>

0000146c <_fwalk_reent>:
    146c:	defff704 	addi	sp,sp,-36
    1470:	dd000415 	stw	r20,16(sp)
    1474:	dfc00815 	stw	ra,32(sp)
    1478:	ddc00715 	stw	r23,28(sp)
    147c:	dd800615 	stw	r22,24(sp)
    1480:	dd400515 	stw	r21,20(sp)
    1484:	dcc00315 	stw	r19,12(sp)
    1488:	dc800215 	stw	r18,8(sp)
    148c:	dc400115 	stw	r17,4(sp)
    1490:	dc000015 	stw	r16,0(sp)
    1494:	2500b804 	addi	r20,r4,736
    1498:	a0002326 	beq	r20,zero,1528 <_fwalk_reent+0xbc>
    149c:	282b883a 	mov	r21,r5
    14a0:	2027883a 	mov	r19,r4
    14a4:	002f883a 	mov	r23,zero
    14a8:	05800044 	movi	r22,1
    14ac:	04bfffc4 	movi	r18,-1
    14b0:	a4400117 	ldw	r17,4(r20)
    14b4:	a4000217 	ldw	r16,8(r20)
    14b8:	8c7fffc4 	addi	r17,r17,-1
    14bc:	88000c16 	blt	r17,zero,14f0 <_fwalk_reent+0x84>
    14c0:	84000304 	addi	r16,r16,12
    14c4:	8080000b 	ldhu	r2,0(r16)
    14c8:	8c7fffc4 	addi	r17,r17,-1
    14cc:	817ffd04 	addi	r5,r16,-12
    14d0:	b080052e 	bgeu	r22,r2,14e8 <_fwalk_reent+0x7c>
    14d4:	8080008f 	ldh	r2,2(r16)
    14d8:	9809883a 	mov	r4,r19
    14dc:	14800226 	beq	r2,r18,14e8 <_fwalk_reent+0x7c>
    14e0:	a83ee83a 	callr	r21
    14e4:	b8aeb03a 	or	r23,r23,r2
    14e8:	84001a04 	addi	r16,r16,104
    14ec:	8cbff51e 	bne	r17,r18,14c4 <_fwalk_reent+0x58>
    14f0:	a5000017 	ldw	r20,0(r20)
    14f4:	a03fee1e 	bne	r20,zero,14b0 <_fwalk_reent+0x44>
    14f8:	b805883a 	mov	r2,r23
    14fc:	dfc00817 	ldw	ra,32(sp)
    1500:	ddc00717 	ldw	r23,28(sp)
    1504:	dd800617 	ldw	r22,24(sp)
    1508:	dd400517 	ldw	r21,20(sp)
    150c:	dd000417 	ldw	r20,16(sp)
    1510:	dcc00317 	ldw	r19,12(sp)
    1514:	dc800217 	ldw	r18,8(sp)
    1518:	dc400117 	ldw	r17,4(sp)
    151c:	dc000017 	ldw	r16,0(sp)
    1520:	dec00904 	addi	sp,sp,36
    1524:	f800283a 	ret
    1528:	002f883a 	mov	r23,zero
    152c:	003ff206 	br	14f8 <_fwalk_reent+0x8c>

00001530 <_malloc_r>:
    1530:	defff504 	addi	sp,sp,-44
    1534:	dc800315 	stw	r18,12(sp)
    1538:	dfc00a15 	stw	ra,40(sp)
    153c:	df000915 	stw	fp,36(sp)
    1540:	ddc00815 	stw	r23,32(sp)
    1544:	dd800715 	stw	r22,28(sp)
    1548:	dd400615 	stw	r21,24(sp)
    154c:	dd000515 	stw	r20,20(sp)
    1550:	dcc00415 	stw	r19,16(sp)
    1554:	dc400215 	stw	r17,8(sp)
    1558:	dc000115 	stw	r16,4(sp)
    155c:	288002c4 	addi	r2,r5,11
    1560:	00c00584 	movi	r3,22
    1564:	2025883a 	mov	r18,r4
    1568:	18807f2e 	bgeu	r3,r2,1768 <_malloc_r+0x238>
    156c:	047ffe04 	movi	r17,-8
    1570:	1462703a 	and	r17,r2,r17
    1574:	8800a316 	blt	r17,zero,1804 <_malloc_r+0x2d4>
    1578:	8940a236 	bltu	r17,r5,1804 <_malloc_r+0x2d4>
    157c:	0003d780 	call	3d78 <__malloc_lock>
    1580:	00807dc4 	movi	r2,503
    1584:	1441e92e 	bgeu	r2,r17,1d2c <_malloc_r+0x7fc>
    1588:	8804d27a 	srli	r2,r17,9
    158c:	1000a126 	beq	r2,zero,1814 <_malloc_r+0x2e4>
    1590:	00c00104 	movi	r3,4
    1594:	18811e36 	bltu	r3,r2,1a10 <_malloc_r+0x4e0>
    1598:	8804d1ba 	srli	r2,r17,6
    159c:	12000e44 	addi	r8,r2,57
    15a0:	11c00e04 	addi	r7,r2,56
    15a4:	4209883a 	add	r4,r8,r8
    15a8:	04c10034 	movhi	r19,1024
    15ac:	2109883a 	add	r4,r4,r4
    15b0:	9cc12004 	addi	r19,r19,1152
    15b4:	2109883a 	add	r4,r4,r4
    15b8:	9909883a 	add	r4,r19,r4
    15bc:	24000117 	ldw	r16,4(r4)
    15c0:	213ffe04 	addi	r4,r4,-8
    15c4:	24009726 	beq	r4,r16,1824 <_malloc_r+0x2f4>
    15c8:	80800117 	ldw	r2,4(r16)
    15cc:	01bfff04 	movi	r6,-4
    15d0:	014003c4 	movi	r5,15
    15d4:	1184703a 	and	r2,r2,r6
    15d8:	1447c83a 	sub	r3,r2,r17
    15dc:	28c00716 	blt	r5,r3,15fc <_malloc_r+0xcc>
    15e0:	1800920e 	bge	r3,zero,182c <_malloc_r+0x2fc>
    15e4:	84000317 	ldw	r16,12(r16)
    15e8:	24008e26 	beq	r4,r16,1824 <_malloc_r+0x2f4>
    15ec:	80800117 	ldw	r2,4(r16)
    15f0:	1184703a 	and	r2,r2,r6
    15f4:	1447c83a 	sub	r3,r2,r17
    15f8:	28fff90e 	bge	r5,r3,15e0 <_malloc_r+0xb0>
    15fc:	3809883a 	mov	r4,r7
    1600:	01810034 	movhi	r6,1024
    1604:	9c000417 	ldw	r16,16(r19)
    1608:	31812004 	addi	r6,r6,1152
    160c:	32000204 	addi	r8,r6,8
    1610:	82013426 	beq	r16,r8,1ae4 <_malloc_r+0x5b4>
    1614:	80c00117 	ldw	r3,4(r16)
    1618:	00bfff04 	movi	r2,-4
    161c:	188e703a 	and	r7,r3,r2
    1620:	3c45c83a 	sub	r2,r7,r17
    1624:	00c003c4 	movi	r3,15
    1628:	18811f16 	blt	r3,r2,1aa8 <_malloc_r+0x578>
    162c:	32000515 	stw	r8,20(r6)
    1630:	32000415 	stw	r8,16(r6)
    1634:	10007f0e 	bge	r2,zero,1834 <_malloc_r+0x304>
    1638:	00807fc4 	movi	r2,511
    163c:	11c0fd36 	bltu	r2,r7,1a34 <_malloc_r+0x504>
    1640:	3806d0fa 	srli	r3,r7,3
    1644:	01c00044 	movi	r7,1
    1648:	30800117 	ldw	r2,4(r6)
    164c:	19400044 	addi	r5,r3,1
    1650:	294b883a 	add	r5,r5,r5
    1654:	1807d0ba 	srai	r3,r3,2
    1658:	294b883a 	add	r5,r5,r5
    165c:	294b883a 	add	r5,r5,r5
    1660:	298b883a 	add	r5,r5,r6
    1664:	38c6983a 	sll	r3,r7,r3
    1668:	29c00017 	ldw	r7,0(r5)
    166c:	2a7ffe04 	addi	r9,r5,-8
    1670:	1886b03a 	or	r3,r3,r2
    1674:	82400315 	stw	r9,12(r16)
    1678:	81c00215 	stw	r7,8(r16)
    167c:	30c00115 	stw	r3,4(r6)
    1680:	2c000015 	stw	r16,0(r5)
    1684:	3c000315 	stw	r16,12(r7)
    1688:	2005d0ba 	srai	r2,r4,2
    168c:	01400044 	movi	r5,1
    1690:	288a983a 	sll	r5,r5,r2
    1694:	19406f36 	bltu	r3,r5,1854 <_malloc_r+0x324>
    1698:	28c4703a 	and	r2,r5,r3
    169c:	10000a1e 	bne	r2,zero,16c8 <_malloc_r+0x198>
    16a0:	00bfff04 	movi	r2,-4
    16a4:	294b883a 	add	r5,r5,r5
    16a8:	2088703a 	and	r4,r4,r2
    16ac:	28c4703a 	and	r2,r5,r3
    16b0:	21000104 	addi	r4,r4,4
    16b4:	1000041e 	bne	r2,zero,16c8 <_malloc_r+0x198>
    16b8:	294b883a 	add	r5,r5,r5
    16bc:	28c4703a 	and	r2,r5,r3
    16c0:	21000104 	addi	r4,r4,4
    16c4:	103ffc26 	beq	r2,zero,16b8 <_malloc_r+0x188>
    16c8:	02bfff04 	movi	r10,-4
    16cc:	024003c4 	movi	r9,15
    16d0:	21800044 	addi	r6,r4,1
    16d4:	318d883a 	add	r6,r6,r6
    16d8:	318d883a 	add	r6,r6,r6
    16dc:	318d883a 	add	r6,r6,r6
    16e0:	998d883a 	add	r6,r19,r6
    16e4:	333ffe04 	addi	r12,r6,-8
    16e8:	2017883a 	mov	r11,r4
    16ec:	31800104 	addi	r6,r6,4
    16f0:	34000017 	ldw	r16,0(r6)
    16f4:	31fffd04 	addi	r7,r6,-12
    16f8:	81c0041e 	bne	r16,r7,170c <_malloc_r+0x1dc>
    16fc:	0000fb06 	br	1aec <_malloc_r+0x5bc>
    1700:	1801030e 	bge	r3,zero,1b10 <_malloc_r+0x5e0>
    1704:	84000317 	ldw	r16,12(r16)
    1708:	81c0f826 	beq	r16,r7,1aec <_malloc_r+0x5bc>
    170c:	80800117 	ldw	r2,4(r16)
    1710:	1284703a 	and	r2,r2,r10
    1714:	1447c83a 	sub	r3,r2,r17
    1718:	48fff90e 	bge	r9,r3,1700 <_malloc_r+0x1d0>
    171c:	80800317 	ldw	r2,12(r16)
    1720:	81000217 	ldw	r4,8(r16)
    1724:	89400054 	ori	r5,r17,1
    1728:	81400115 	stw	r5,4(r16)
    172c:	20800315 	stw	r2,12(r4)
    1730:	11000215 	stw	r4,8(r2)
    1734:	8463883a 	add	r17,r16,r17
    1738:	9c400515 	stw	r17,20(r19)
    173c:	9c400415 	stw	r17,16(r19)
    1740:	18800054 	ori	r2,r3,1
    1744:	88800115 	stw	r2,4(r17)
    1748:	8a000315 	stw	r8,12(r17)
    174c:	8a000215 	stw	r8,8(r17)
    1750:	88e3883a 	add	r17,r17,r3
    1754:	88c00015 	stw	r3,0(r17)
    1758:	9009883a 	mov	r4,r18
    175c:	0003d9c0 	call	3d9c <__malloc_unlock>
    1760:	80800204 	addi	r2,r16,8
    1764:	00001b06 	br	17d4 <_malloc_r+0x2a4>
    1768:	04400404 	movi	r17,16
    176c:	89402536 	bltu	r17,r5,1804 <_malloc_r+0x2d4>
    1770:	0003d780 	call	3d78 <__malloc_lock>
    1774:	00800184 	movi	r2,6
    1778:	01000084 	movi	r4,2
    177c:	04c10034 	movhi	r19,1024
    1780:	1085883a 	add	r2,r2,r2
    1784:	9cc12004 	addi	r19,r19,1152
    1788:	1085883a 	add	r2,r2,r2
    178c:	9885883a 	add	r2,r19,r2
    1790:	14000117 	ldw	r16,4(r2)
    1794:	10fffe04 	addi	r3,r2,-8
    1798:	80c0d926 	beq	r16,r3,1b00 <_malloc_r+0x5d0>
    179c:	80c00117 	ldw	r3,4(r16)
    17a0:	81000317 	ldw	r4,12(r16)
    17a4:	00bfff04 	movi	r2,-4
    17a8:	1884703a 	and	r2,r3,r2
    17ac:	81400217 	ldw	r5,8(r16)
    17b0:	8085883a 	add	r2,r16,r2
    17b4:	10c00117 	ldw	r3,4(r2)
    17b8:	29000315 	stw	r4,12(r5)
    17bc:	21400215 	stw	r5,8(r4)
    17c0:	18c00054 	ori	r3,r3,1
    17c4:	10c00115 	stw	r3,4(r2)
    17c8:	9009883a 	mov	r4,r18
    17cc:	0003d9c0 	call	3d9c <__malloc_unlock>
    17d0:	80800204 	addi	r2,r16,8
    17d4:	dfc00a17 	ldw	ra,40(sp)
    17d8:	df000917 	ldw	fp,36(sp)
    17dc:	ddc00817 	ldw	r23,32(sp)
    17e0:	dd800717 	ldw	r22,28(sp)
    17e4:	dd400617 	ldw	r21,24(sp)
    17e8:	dd000517 	ldw	r20,20(sp)
    17ec:	dcc00417 	ldw	r19,16(sp)
    17f0:	dc800317 	ldw	r18,12(sp)
    17f4:	dc400217 	ldw	r17,8(sp)
    17f8:	dc000117 	ldw	r16,4(sp)
    17fc:	dec00b04 	addi	sp,sp,44
    1800:	f800283a 	ret
    1804:	00800304 	movi	r2,12
    1808:	90800015 	stw	r2,0(r18)
    180c:	0005883a 	mov	r2,zero
    1810:	003ff006 	br	17d4 <_malloc_r+0x2a4>
    1814:	01002004 	movi	r4,128
    1818:	02001004 	movi	r8,64
    181c:	01c00fc4 	movi	r7,63
    1820:	003f6106 	br	15a8 <_malloc_r+0x78>
    1824:	4009883a 	mov	r4,r8
    1828:	003f7506 	br	1600 <_malloc_r+0xd0>
    182c:	81000317 	ldw	r4,12(r16)
    1830:	003fde06 	br	17ac <_malloc_r+0x27c>
    1834:	81c5883a 	add	r2,r16,r7
    1838:	11400117 	ldw	r5,4(r2)
    183c:	9009883a 	mov	r4,r18
    1840:	29400054 	ori	r5,r5,1
    1844:	11400115 	stw	r5,4(r2)
    1848:	0003d9c0 	call	3d9c <__malloc_unlock>
    184c:	80800204 	addi	r2,r16,8
    1850:	003fe006 	br	17d4 <_malloc_r+0x2a4>
    1854:	9c000217 	ldw	r16,8(r19)
    1858:	00bfff04 	movi	r2,-4
    185c:	85800117 	ldw	r22,4(r16)
    1860:	b0ac703a 	and	r22,r22,r2
    1864:	b4400336 	bltu	r22,r17,1874 <_malloc_r+0x344>
    1868:	b445c83a 	sub	r2,r22,r17
    186c:	00c003c4 	movi	r3,15
    1870:	18805d16 	blt	r3,r2,19e8 <_malloc_r+0x4b8>
    1874:	05c10034 	movhi	r23,1024
    1878:	00810034 	movhi	r2,1024
    187c:	1086b404 	addi	r2,r2,6864
    1880:	bdc6a604 	addi	r23,r23,6808
    1884:	15400017 	ldw	r21,0(r2)
    1888:	b8c00017 	ldw	r3,0(r23)
    188c:	00bfffc4 	movi	r2,-1
    1890:	858d883a 	add	r6,r16,r22
    1894:	8d6b883a 	add	r21,r17,r21
    1898:	1880ea26 	beq	r3,r2,1c44 <_malloc_r+0x714>
    189c:	ad4403c4 	addi	r21,r21,4111
    18a0:	00bc0004 	movi	r2,-4096
    18a4:	a8aa703a 	and	r21,r21,r2
    18a8:	a80b883a 	mov	r5,r21
    18ac:	9009883a 	mov	r4,r18
    18b0:	d9800015 	stw	r6,0(sp)
    18b4:	00027500 	call	2750 <_sbrk_r>
    18b8:	1029883a 	mov	r20,r2
    18bc:	00bfffc4 	movi	r2,-1
    18c0:	d9800017 	ldw	r6,0(sp)
    18c4:	a080e826 	beq	r20,r2,1c68 <_malloc_r+0x738>
    18c8:	a180a636 	bltu	r20,r6,1b64 <_malloc_r+0x634>
    18cc:	07010034 	movhi	fp,1024
    18d0:	e706bd04 	addi	fp,fp,6900
    18d4:	e0800017 	ldw	r2,0(fp)
    18d8:	a887883a 	add	r3,r21,r2
    18dc:	e0c00015 	stw	r3,0(fp)
    18e0:	3500e626 	beq	r6,r20,1c7c <_malloc_r+0x74c>
    18e4:	b9000017 	ldw	r4,0(r23)
    18e8:	00bfffc4 	movi	r2,-1
    18ec:	2080ee26 	beq	r4,r2,1ca8 <_malloc_r+0x778>
    18f0:	a185c83a 	sub	r2,r20,r6
    18f4:	10c5883a 	add	r2,r2,r3
    18f8:	e0800015 	stw	r2,0(fp)
    18fc:	a0c001cc 	andi	r3,r20,7
    1900:	1800bc26 	beq	r3,zero,1bf4 <_malloc_r+0x6c4>
    1904:	a0e9c83a 	sub	r20,r20,r3
    1908:	00840204 	movi	r2,4104
    190c:	a5000204 	addi	r20,r20,8
    1910:	10c7c83a 	sub	r3,r2,r3
    1914:	a545883a 	add	r2,r20,r21
    1918:	1083ffcc 	andi	r2,r2,4095
    191c:	18abc83a 	sub	r21,r3,r2
    1920:	a80b883a 	mov	r5,r21
    1924:	9009883a 	mov	r4,r18
    1928:	00027500 	call	2750 <_sbrk_r>
    192c:	00ffffc4 	movi	r3,-1
    1930:	10c0e126 	beq	r2,r3,1cb8 <_malloc_r+0x788>
    1934:	1505c83a 	sub	r2,r2,r20
    1938:	1545883a 	add	r2,r2,r21
    193c:	10800054 	ori	r2,r2,1
    1940:	e0c00017 	ldw	r3,0(fp)
    1944:	9d000215 	stw	r20,8(r19)
    1948:	a0800115 	stw	r2,4(r20)
    194c:	a8c7883a 	add	r3,r21,r3
    1950:	e0c00015 	stw	r3,0(fp)
    1954:	84c00e26 	beq	r16,r19,1990 <_malloc_r+0x460>
    1958:	018003c4 	movi	r6,15
    195c:	3580a72e 	bgeu	r6,r22,1bfc <_malloc_r+0x6cc>
    1960:	81400117 	ldw	r5,4(r16)
    1964:	013ffe04 	movi	r4,-8
    1968:	b0bffd04 	addi	r2,r22,-12
    196c:	1104703a 	and	r2,r2,r4
    1970:	2900004c 	andi	r4,r5,1
    1974:	2088b03a 	or	r4,r4,r2
    1978:	81000115 	stw	r4,4(r16)
    197c:	01400144 	movi	r5,5
    1980:	8089883a 	add	r4,r16,r2
    1984:	21400115 	stw	r5,4(r4)
    1988:	21400215 	stw	r5,8(r4)
    198c:	3080cd36 	bltu	r6,r2,1cc4 <_malloc_r+0x794>
    1990:	00810034 	movhi	r2,1024
    1994:	1086b304 	addi	r2,r2,6860
    1998:	11000017 	ldw	r4,0(r2)
    199c:	20c0012e 	bgeu	r4,r3,19a4 <_malloc_r+0x474>
    19a0:	10c00015 	stw	r3,0(r2)
    19a4:	00810034 	movhi	r2,1024
    19a8:	1086b204 	addi	r2,r2,6856
    19ac:	11000017 	ldw	r4,0(r2)
    19b0:	9c000217 	ldw	r16,8(r19)
    19b4:	20c0012e 	bgeu	r4,r3,19bc <_malloc_r+0x48c>
    19b8:	10c00015 	stw	r3,0(r2)
    19bc:	80c00117 	ldw	r3,4(r16)
    19c0:	00bfff04 	movi	r2,-4
    19c4:	1886703a 	and	r3,r3,r2
    19c8:	1c45c83a 	sub	r2,r3,r17
    19cc:	1c400236 	bltu	r3,r17,19d8 <_malloc_r+0x4a8>
    19d0:	00c003c4 	movi	r3,15
    19d4:	18800416 	blt	r3,r2,19e8 <_malloc_r+0x4b8>
    19d8:	9009883a 	mov	r4,r18
    19dc:	0003d9c0 	call	3d9c <__malloc_unlock>
    19e0:	0005883a 	mov	r2,zero
    19e4:	003f7b06 	br	17d4 <_malloc_r+0x2a4>
    19e8:	88c00054 	ori	r3,r17,1
    19ec:	80c00115 	stw	r3,4(r16)
    19f0:	8463883a 	add	r17,r16,r17
    19f4:	10800054 	ori	r2,r2,1
    19f8:	9c400215 	stw	r17,8(r19)
    19fc:	88800115 	stw	r2,4(r17)
    1a00:	9009883a 	mov	r4,r18
    1a04:	0003d9c0 	call	3d9c <__malloc_unlock>
    1a08:	80800204 	addi	r2,r16,8
    1a0c:	003f7106 	br	17d4 <_malloc_r+0x2a4>
    1a10:	00c00504 	movi	r3,20
    1a14:	18804a2e 	bgeu	r3,r2,1b40 <_malloc_r+0x610>
    1a18:	00c01504 	movi	r3,84
    1a1c:	18806e36 	bltu	r3,r2,1bd8 <_malloc_r+0x6a8>
    1a20:	8804d33a 	srli	r2,r17,12
    1a24:	12001bc4 	addi	r8,r2,111
    1a28:	11c01b84 	addi	r7,r2,110
    1a2c:	4209883a 	add	r4,r8,r8
    1a30:	003edd06 	br	15a8 <_malloc_r+0x78>
    1a34:	3804d27a 	srli	r2,r7,9
    1a38:	00c00104 	movi	r3,4
    1a3c:	1880442e 	bgeu	r3,r2,1b50 <_malloc_r+0x620>
    1a40:	00c00504 	movi	r3,20
    1a44:	18808136 	bltu	r3,r2,1c4c <_malloc_r+0x71c>
    1a48:	11401704 	addi	r5,r2,92
    1a4c:	10c016c4 	addi	r3,r2,91
    1a50:	294b883a 	add	r5,r5,r5
    1a54:	294b883a 	add	r5,r5,r5
    1a58:	294b883a 	add	r5,r5,r5
    1a5c:	994b883a 	add	r5,r19,r5
    1a60:	28800017 	ldw	r2,0(r5)
    1a64:	01810034 	movhi	r6,1024
    1a68:	297ffe04 	addi	r5,r5,-8
    1a6c:	31812004 	addi	r6,r6,1152
    1a70:	28806526 	beq	r5,r2,1c08 <_malloc_r+0x6d8>
    1a74:	01bfff04 	movi	r6,-4
    1a78:	10c00117 	ldw	r3,4(r2)
    1a7c:	1986703a 	and	r3,r3,r6
    1a80:	38c0022e 	bgeu	r7,r3,1a8c <_malloc_r+0x55c>
    1a84:	10800217 	ldw	r2,8(r2)
    1a88:	28bffb1e 	bne	r5,r2,1a78 <_malloc_r+0x548>
    1a8c:	11400317 	ldw	r5,12(r2)
    1a90:	98c00117 	ldw	r3,4(r19)
    1a94:	81400315 	stw	r5,12(r16)
    1a98:	80800215 	stw	r2,8(r16)
    1a9c:	2c000215 	stw	r16,8(r5)
    1aa0:	14000315 	stw	r16,12(r2)
    1aa4:	003ef806 	br	1688 <_malloc_r+0x158>
    1aa8:	88c00054 	ori	r3,r17,1
    1aac:	80c00115 	stw	r3,4(r16)
    1ab0:	8463883a 	add	r17,r16,r17
    1ab4:	34400515 	stw	r17,20(r6)
    1ab8:	34400415 	stw	r17,16(r6)
    1abc:	10c00054 	ori	r3,r2,1
    1ac0:	8a000315 	stw	r8,12(r17)
    1ac4:	8a000215 	stw	r8,8(r17)
    1ac8:	88c00115 	stw	r3,4(r17)
    1acc:	88a3883a 	add	r17,r17,r2
    1ad0:	88800015 	stw	r2,0(r17)
    1ad4:	9009883a 	mov	r4,r18
    1ad8:	0003d9c0 	call	3d9c <__malloc_unlock>
    1adc:	80800204 	addi	r2,r16,8
    1ae0:	003f3c06 	br	17d4 <_malloc_r+0x2a4>
    1ae4:	30c00117 	ldw	r3,4(r6)
    1ae8:	003ee706 	br	1688 <_malloc_r+0x158>
    1aec:	5ac00044 	addi	r11,r11,1
    1af0:	588000cc 	andi	r2,r11,3
    1af4:	31800204 	addi	r6,r6,8
    1af8:	103efd1e 	bne	r2,zero,16f0 <_malloc_r+0x1c0>
    1afc:	00002406 	br	1b90 <_malloc_r+0x660>
    1b00:	14000317 	ldw	r16,12(r2)
    1b04:	143f251e 	bne	r2,r16,179c <_malloc_r+0x26c>
    1b08:	21000084 	addi	r4,r4,2
    1b0c:	003ebc06 	br	1600 <_malloc_r+0xd0>
    1b10:	8085883a 	add	r2,r16,r2
    1b14:	10c00117 	ldw	r3,4(r2)
    1b18:	81000317 	ldw	r4,12(r16)
    1b1c:	81400217 	ldw	r5,8(r16)
    1b20:	18c00054 	ori	r3,r3,1
    1b24:	10c00115 	stw	r3,4(r2)
    1b28:	29000315 	stw	r4,12(r5)
    1b2c:	21400215 	stw	r5,8(r4)
    1b30:	9009883a 	mov	r4,r18
    1b34:	0003d9c0 	call	3d9c <__malloc_unlock>
    1b38:	80800204 	addi	r2,r16,8
    1b3c:	003f2506 	br	17d4 <_malloc_r+0x2a4>
    1b40:	12001704 	addi	r8,r2,92
    1b44:	11c016c4 	addi	r7,r2,91
    1b48:	4209883a 	add	r4,r8,r8
    1b4c:	003e9606 	br	15a8 <_malloc_r+0x78>
    1b50:	3804d1ba 	srli	r2,r7,6
    1b54:	11400e44 	addi	r5,r2,57
    1b58:	10c00e04 	addi	r3,r2,56
    1b5c:	294b883a 	add	r5,r5,r5
    1b60:	003fbc06 	br	1a54 <_malloc_r+0x524>
    1b64:	84ff5926 	beq	r16,r19,18cc <_malloc_r+0x39c>
    1b68:	00810034 	movhi	r2,1024
    1b6c:	10812004 	addi	r2,r2,1152
    1b70:	14000217 	ldw	r16,8(r2)
    1b74:	00bfff04 	movi	r2,-4
    1b78:	80c00117 	ldw	r3,4(r16)
    1b7c:	1886703a 	and	r3,r3,r2
    1b80:	003f9106 	br	19c8 <_malloc_r+0x498>
    1b84:	60800217 	ldw	r2,8(r12)
    1b88:	213fffc4 	addi	r4,r4,-1
    1b8c:	1300651e 	bne	r2,r12,1d24 <_malloc_r+0x7f4>
    1b90:	208000cc 	andi	r2,r4,3
    1b94:	633ffe04 	addi	r12,r12,-8
    1b98:	103ffa1e 	bne	r2,zero,1b84 <_malloc_r+0x654>
    1b9c:	98800117 	ldw	r2,4(r19)
    1ba0:	0146303a 	nor	r3,zero,r5
    1ba4:	1884703a 	and	r2,r3,r2
    1ba8:	98800115 	stw	r2,4(r19)
    1bac:	294b883a 	add	r5,r5,r5
    1bb0:	117f2836 	bltu	r2,r5,1854 <_malloc_r+0x324>
    1bb4:	283f2726 	beq	r5,zero,1854 <_malloc_r+0x324>
    1bb8:	2886703a 	and	r3,r5,r2
    1bbc:	5809883a 	mov	r4,r11
    1bc0:	183ec31e 	bne	r3,zero,16d0 <_malloc_r+0x1a0>
    1bc4:	294b883a 	add	r5,r5,r5
    1bc8:	2886703a 	and	r3,r5,r2
    1bcc:	21000104 	addi	r4,r4,4
    1bd0:	183ffc26 	beq	r3,zero,1bc4 <_malloc_r+0x694>
    1bd4:	003ebe06 	br	16d0 <_malloc_r+0x1a0>
    1bd8:	00c05504 	movi	r3,340
    1bdc:	18801236 	bltu	r3,r2,1c28 <_malloc_r+0x6f8>
    1be0:	8804d3fa 	srli	r2,r17,15
    1be4:	12001e04 	addi	r8,r2,120
    1be8:	11c01dc4 	addi	r7,r2,119
    1bec:	4209883a 	add	r4,r8,r8
    1bf0:	003e6d06 	br	15a8 <_malloc_r+0x78>
    1bf4:	00c40004 	movi	r3,4096
    1bf8:	003f4606 	br	1914 <_malloc_r+0x3e4>
    1bfc:	00800044 	movi	r2,1
    1c00:	a0800115 	stw	r2,4(r20)
    1c04:	003f7406 	br	19d8 <_malloc_r+0x4a8>
    1c08:	1805d0ba 	srai	r2,r3,2
    1c0c:	01c00044 	movi	r7,1
    1c10:	30c00117 	ldw	r3,4(r6)
    1c14:	388e983a 	sll	r7,r7,r2
    1c18:	2805883a 	mov	r2,r5
    1c1c:	38c6b03a 	or	r3,r7,r3
    1c20:	30c00115 	stw	r3,4(r6)
    1c24:	003f9b06 	br	1a94 <_malloc_r+0x564>
    1c28:	00c15504 	movi	r3,1364
    1c2c:	18801a36 	bltu	r3,r2,1c98 <_malloc_r+0x768>
    1c30:	8804d4ba 	srli	r2,r17,18
    1c34:	12001f44 	addi	r8,r2,125
    1c38:	11c01f04 	addi	r7,r2,124
    1c3c:	4209883a 	add	r4,r8,r8
    1c40:	003e5906 	br	15a8 <_malloc_r+0x78>
    1c44:	ad400404 	addi	r21,r21,16
    1c48:	003f1706 	br	18a8 <_malloc_r+0x378>
    1c4c:	00c01504 	movi	r3,84
    1c50:	18802336 	bltu	r3,r2,1ce0 <_malloc_r+0x7b0>
    1c54:	3804d33a 	srli	r2,r7,12
    1c58:	11401bc4 	addi	r5,r2,111
    1c5c:	10c01b84 	addi	r3,r2,110
    1c60:	294b883a 	add	r5,r5,r5
    1c64:	003f7b06 	br	1a54 <_malloc_r+0x524>
    1c68:	9c000217 	ldw	r16,8(r19)
    1c6c:	00bfff04 	movi	r2,-4
    1c70:	80c00117 	ldw	r3,4(r16)
    1c74:	1886703a 	and	r3,r3,r2
    1c78:	003f5306 	br	19c8 <_malloc_r+0x498>
    1c7c:	3083ffcc 	andi	r2,r6,4095
    1c80:	103f181e 	bne	r2,zero,18e4 <_malloc_r+0x3b4>
    1c84:	99000217 	ldw	r4,8(r19)
    1c88:	b545883a 	add	r2,r22,r21
    1c8c:	10800054 	ori	r2,r2,1
    1c90:	20800115 	stw	r2,4(r4)
    1c94:	003f3e06 	br	1990 <_malloc_r+0x460>
    1c98:	01003f84 	movi	r4,254
    1c9c:	02001fc4 	movi	r8,127
    1ca0:	01c01f84 	movi	r7,126
    1ca4:	003e4006 	br	15a8 <_malloc_r+0x78>
    1ca8:	00810034 	movhi	r2,1024
    1cac:	1086a604 	addi	r2,r2,6808
    1cb0:	15000015 	stw	r20,0(r2)
    1cb4:	003f1106 	br	18fc <_malloc_r+0x3cc>
    1cb8:	00800044 	movi	r2,1
    1cbc:	002b883a 	mov	r21,zero
    1cc0:	003f1f06 	br	1940 <_malloc_r+0x410>
    1cc4:	81400204 	addi	r5,r16,8
    1cc8:	9009883a 	mov	r4,r18
    1ccc:	0002fb80 	call	2fb8 <_free_r>
    1cd0:	00810034 	movhi	r2,1024
    1cd4:	1086bd04 	addi	r2,r2,6900
    1cd8:	10c00017 	ldw	r3,0(r2)
    1cdc:	003f2c06 	br	1990 <_malloc_r+0x460>
    1ce0:	00c05504 	movi	r3,340
    1ce4:	18800536 	bltu	r3,r2,1cfc <_malloc_r+0x7cc>
    1ce8:	3804d3fa 	srli	r2,r7,15
    1cec:	11401e04 	addi	r5,r2,120
    1cf0:	10c01dc4 	addi	r3,r2,119
    1cf4:	294b883a 	add	r5,r5,r5
    1cf8:	003f5606 	br	1a54 <_malloc_r+0x524>
    1cfc:	00c15504 	movi	r3,1364
    1d00:	18800536 	bltu	r3,r2,1d18 <_malloc_r+0x7e8>
    1d04:	3804d4ba 	srli	r2,r7,18
    1d08:	11401f44 	addi	r5,r2,125
    1d0c:	10c01f04 	addi	r3,r2,124
    1d10:	294b883a 	add	r5,r5,r5
    1d14:	003f4f06 	br	1a54 <_malloc_r+0x524>
    1d18:	01403f84 	movi	r5,254
    1d1c:	00c01f84 	movi	r3,126
    1d20:	003f4c06 	br	1a54 <_malloc_r+0x524>
    1d24:	98800117 	ldw	r2,4(r19)
    1d28:	003fa006 	br	1bac <_malloc_r+0x67c>
    1d2c:	8808d0fa 	srli	r4,r17,3
    1d30:	20800044 	addi	r2,r4,1
    1d34:	1085883a 	add	r2,r2,r2
    1d38:	003e9006 	br	177c <_malloc_r+0x24c>

00001d3c <memchr>:
    1d3c:	208000cc 	andi	r2,r4,3
    1d40:	280f883a 	mov	r7,r5
    1d44:	10003426 	beq	r2,zero,1e18 <memchr+0xdc>
    1d48:	30bfffc4 	addi	r2,r6,-1
    1d4c:	30001a26 	beq	r6,zero,1db8 <memchr+0x7c>
    1d50:	20c00003 	ldbu	r3,0(r4)
    1d54:	29803fcc 	andi	r6,r5,255
    1d58:	30c0051e 	bne	r6,r3,1d70 <memchr+0x34>
    1d5c:	00001806 	br	1dc0 <memchr+0x84>
    1d60:	10001526 	beq	r2,zero,1db8 <memchr+0x7c>
    1d64:	20c00003 	ldbu	r3,0(r4)
    1d68:	10bfffc4 	addi	r2,r2,-1
    1d6c:	30c01426 	beq	r6,r3,1dc0 <memchr+0x84>
    1d70:	21000044 	addi	r4,r4,1
    1d74:	20c000cc 	andi	r3,r4,3
    1d78:	183ff91e 	bne	r3,zero,1d60 <memchr+0x24>
    1d7c:	020000c4 	movi	r8,3
    1d80:	40801136 	bltu	r8,r2,1dc8 <memchr+0x8c>
    1d84:	10000c26 	beq	r2,zero,1db8 <memchr+0x7c>
    1d88:	20c00003 	ldbu	r3,0(r4)
    1d8c:	29403fcc 	andi	r5,r5,255
    1d90:	28c00b26 	beq	r5,r3,1dc0 <memchr+0x84>
    1d94:	20c00044 	addi	r3,r4,1
    1d98:	39803fcc 	andi	r6,r7,255
    1d9c:	2089883a 	add	r4,r4,r2
    1da0:	00000306 	br	1db0 <memchr+0x74>
    1da4:	18c00044 	addi	r3,r3,1
    1da8:	197fffc3 	ldbu	r5,-1(r3)
    1dac:	31400526 	beq	r6,r5,1dc4 <memchr+0x88>
    1db0:	1805883a 	mov	r2,r3
    1db4:	20fffb1e 	bne	r4,r3,1da4 <memchr+0x68>
    1db8:	0005883a 	mov	r2,zero
    1dbc:	f800283a 	ret
    1dc0:	2005883a 	mov	r2,r4
    1dc4:	f800283a 	ret
    1dc8:	28c03fcc 	andi	r3,r5,255
    1dcc:	1812923a 	slli	r9,r3,8
    1dd0:	02ffbff4 	movhi	r11,65279
    1dd4:	02a02074 	movhi	r10,32897
    1dd8:	48d2b03a 	or	r9,r9,r3
    1ddc:	4806943a 	slli	r3,r9,16
    1de0:	5affbfc4 	addi	r11,r11,-257
    1de4:	52a02004 	addi	r10,r10,-32640
    1de8:	48d2b03a 	or	r9,r9,r3
    1dec:	20c00017 	ldw	r3,0(r4)
    1df0:	48c6f03a 	xor	r3,r9,r3
    1df4:	1acd883a 	add	r6,r3,r11
    1df8:	00c6303a 	nor	r3,zero,r3
    1dfc:	30c6703a 	and	r3,r6,r3
    1e00:	1a86703a 	and	r3,r3,r10
    1e04:	183fe01e 	bne	r3,zero,1d88 <memchr+0x4c>
    1e08:	10bfff04 	addi	r2,r2,-4
    1e0c:	21000104 	addi	r4,r4,4
    1e10:	40bff636 	bltu	r8,r2,1dec <memchr+0xb0>
    1e14:	003fdb06 	br	1d84 <memchr+0x48>
    1e18:	3005883a 	mov	r2,r6
    1e1c:	003fd706 	br	1d7c <memchr+0x40>

00001e20 <memcpy>:
    1e20:	defffd04 	addi	sp,sp,-12
    1e24:	dfc00215 	stw	ra,8(sp)
    1e28:	dc400115 	stw	r17,4(sp)
    1e2c:	dc000015 	stw	r16,0(sp)
    1e30:	00c003c4 	movi	r3,15
    1e34:	2005883a 	mov	r2,r4
    1e38:	1980452e 	bgeu	r3,r6,1f50 <memcpy+0x130>
    1e3c:	2906b03a 	or	r3,r5,r4
    1e40:	18c000cc 	andi	r3,r3,3
    1e44:	1800441e 	bne	r3,zero,1f58 <memcpy+0x138>
    1e48:	347ffc04 	addi	r17,r6,-16
    1e4c:	8822d13a 	srli	r17,r17,4
    1e50:	28c00104 	addi	r3,r5,4
    1e54:	23400104 	addi	r13,r4,4
    1e58:	8820913a 	slli	r16,r17,4
    1e5c:	2b000204 	addi	r12,r5,8
    1e60:	22c00204 	addi	r11,r4,8
    1e64:	84000504 	addi	r16,r16,20
    1e68:	2a800304 	addi	r10,r5,12
    1e6c:	22400304 	addi	r9,r4,12
    1e70:	2c21883a 	add	r16,r5,r16
    1e74:	2811883a 	mov	r8,r5
    1e78:	200f883a 	mov	r7,r4
    1e7c:	41000017 	ldw	r4,0(r8)
    1e80:	1fc00017 	ldw	ra,0(r3)
    1e84:	63c00017 	ldw	r15,0(r12)
    1e88:	39000015 	stw	r4,0(r7)
    1e8c:	53800017 	ldw	r14,0(r10)
    1e90:	6fc00015 	stw	ra,0(r13)
    1e94:	5bc00015 	stw	r15,0(r11)
    1e98:	4b800015 	stw	r14,0(r9)
    1e9c:	18c00404 	addi	r3,r3,16
    1ea0:	39c00404 	addi	r7,r7,16
    1ea4:	42000404 	addi	r8,r8,16
    1ea8:	6b400404 	addi	r13,r13,16
    1eac:	63000404 	addi	r12,r12,16
    1eb0:	5ac00404 	addi	r11,r11,16
    1eb4:	52800404 	addi	r10,r10,16
    1eb8:	4a400404 	addi	r9,r9,16
    1ebc:	1c3fef1e 	bne	r3,r16,1e7c <memcpy+0x5c>
    1ec0:	89c00044 	addi	r7,r17,1
    1ec4:	380e913a 	slli	r7,r7,4
    1ec8:	310003cc 	andi	r4,r6,15
    1ecc:	02c000c4 	movi	r11,3
    1ed0:	11c7883a 	add	r3,r2,r7
    1ed4:	29cb883a 	add	r5,r5,r7
    1ed8:	5900212e 	bgeu	r11,r4,1f60 <memcpy+0x140>
    1edc:	1813883a 	mov	r9,r3
    1ee0:	2811883a 	mov	r8,r5
    1ee4:	200f883a 	mov	r7,r4
    1ee8:	42800017 	ldw	r10,0(r8)
    1eec:	4a400104 	addi	r9,r9,4
    1ef0:	39ffff04 	addi	r7,r7,-4
    1ef4:	4abfff15 	stw	r10,-4(r9)
    1ef8:	42000104 	addi	r8,r8,4
    1efc:	59fffa36 	bltu	r11,r7,1ee8 <memcpy+0xc8>
    1f00:	213fff04 	addi	r4,r4,-4
    1f04:	2008d0ba 	srli	r4,r4,2
    1f08:	318000cc 	andi	r6,r6,3
    1f0c:	21000044 	addi	r4,r4,1
    1f10:	2109883a 	add	r4,r4,r4
    1f14:	2109883a 	add	r4,r4,r4
    1f18:	1907883a 	add	r3,r3,r4
    1f1c:	290b883a 	add	r5,r5,r4
    1f20:	30000626 	beq	r6,zero,1f3c <memcpy+0x11c>
    1f24:	198d883a 	add	r6,r3,r6
    1f28:	29c00003 	ldbu	r7,0(r5)
    1f2c:	18c00044 	addi	r3,r3,1
    1f30:	29400044 	addi	r5,r5,1
    1f34:	19ffffc5 	stb	r7,-1(r3)
    1f38:	19bffb1e 	bne	r3,r6,1f28 <memcpy+0x108>
    1f3c:	dfc00217 	ldw	ra,8(sp)
    1f40:	dc400117 	ldw	r17,4(sp)
    1f44:	dc000017 	ldw	r16,0(sp)
    1f48:	dec00304 	addi	sp,sp,12
    1f4c:	f800283a 	ret
    1f50:	2007883a 	mov	r3,r4
    1f54:	003ff206 	br	1f20 <memcpy+0x100>
    1f58:	2007883a 	mov	r3,r4
    1f5c:	003ff106 	br	1f24 <memcpy+0x104>
    1f60:	200d883a 	mov	r6,r4
    1f64:	003fee06 	br	1f20 <memcpy+0x100>

00001f68 <memmove>:
    1f68:	2005883a 	mov	r2,r4
    1f6c:	29000b2e 	bgeu	r5,r4,1f9c <memmove+0x34>
    1f70:	298f883a 	add	r7,r5,r6
    1f74:	21c0092e 	bgeu	r4,r7,1f9c <memmove+0x34>
    1f78:	2187883a 	add	r3,r4,r6
    1f7c:	198bc83a 	sub	r5,r3,r6
    1f80:	30004826 	beq	r6,zero,20a4 <memmove+0x13c>
    1f84:	39ffffc4 	addi	r7,r7,-1
    1f88:	39000003 	ldbu	r4,0(r7)
    1f8c:	18ffffc4 	addi	r3,r3,-1
    1f90:	19000005 	stb	r4,0(r3)
    1f94:	28fffb1e 	bne	r5,r3,1f84 <memmove+0x1c>
    1f98:	f800283a 	ret
    1f9c:	00c003c4 	movi	r3,15
    1fa0:	1980412e 	bgeu	r3,r6,20a8 <memmove+0x140>
    1fa4:	2886b03a 	or	r3,r5,r2
    1fa8:	18c000cc 	andi	r3,r3,3
    1fac:	1800401e 	bne	r3,zero,20b0 <memmove+0x148>
    1fb0:	33fffc04 	addi	r15,r6,-16
    1fb4:	781ed13a 	srli	r15,r15,4
    1fb8:	28c00104 	addi	r3,r5,4
    1fbc:	13400104 	addi	r13,r2,4
    1fc0:	781c913a 	slli	r14,r15,4
    1fc4:	2b000204 	addi	r12,r5,8
    1fc8:	12c00204 	addi	r11,r2,8
    1fcc:	73800504 	addi	r14,r14,20
    1fd0:	2a800304 	addi	r10,r5,12
    1fd4:	12400304 	addi	r9,r2,12
    1fd8:	2b9d883a 	add	r14,r5,r14
    1fdc:	2811883a 	mov	r8,r5
    1fe0:	100f883a 	mov	r7,r2
    1fe4:	41000017 	ldw	r4,0(r8)
    1fe8:	39c00404 	addi	r7,r7,16
    1fec:	18c00404 	addi	r3,r3,16
    1ff0:	393ffc15 	stw	r4,-16(r7)
    1ff4:	193ffc17 	ldw	r4,-16(r3)
    1ff8:	6b400404 	addi	r13,r13,16
    1ffc:	5ac00404 	addi	r11,r11,16
    2000:	693ffc15 	stw	r4,-16(r13)
    2004:	61000017 	ldw	r4,0(r12)
    2008:	4a400404 	addi	r9,r9,16
    200c:	42000404 	addi	r8,r8,16
    2010:	593ffc15 	stw	r4,-16(r11)
    2014:	51000017 	ldw	r4,0(r10)
    2018:	63000404 	addi	r12,r12,16
    201c:	52800404 	addi	r10,r10,16
    2020:	493ffc15 	stw	r4,-16(r9)
    2024:	1bbfef1e 	bne	r3,r14,1fe4 <memmove+0x7c>
    2028:	79000044 	addi	r4,r15,1
    202c:	2008913a 	slli	r4,r4,4
    2030:	328003cc 	andi	r10,r6,15
    2034:	02c000c4 	movi	r11,3
    2038:	1107883a 	add	r3,r2,r4
    203c:	290b883a 	add	r5,r5,r4
    2040:	5a801e2e 	bgeu	r11,r10,20bc <memmove+0x154>
    2044:	1813883a 	mov	r9,r3
    2048:	2811883a 	mov	r8,r5
    204c:	500f883a 	mov	r7,r10
    2050:	41000017 	ldw	r4,0(r8)
    2054:	4a400104 	addi	r9,r9,4
    2058:	39ffff04 	addi	r7,r7,-4
    205c:	493fff15 	stw	r4,-4(r9)
    2060:	42000104 	addi	r8,r8,4
    2064:	59fffa36 	bltu	r11,r7,2050 <memmove+0xe8>
    2068:	513fff04 	addi	r4,r10,-4
    206c:	2008d0ba 	srli	r4,r4,2
    2070:	318000cc 	andi	r6,r6,3
    2074:	21000044 	addi	r4,r4,1
    2078:	2109883a 	add	r4,r4,r4
    207c:	2109883a 	add	r4,r4,r4
    2080:	1907883a 	add	r3,r3,r4
    2084:	290b883a 	add	r5,r5,r4
    2088:	30000b26 	beq	r6,zero,20b8 <memmove+0x150>
    208c:	198d883a 	add	r6,r3,r6
    2090:	29c00003 	ldbu	r7,0(r5)
    2094:	18c00044 	addi	r3,r3,1
    2098:	29400044 	addi	r5,r5,1
    209c:	19ffffc5 	stb	r7,-1(r3)
    20a0:	19bffb1e 	bne	r3,r6,2090 <memmove+0x128>
    20a4:	f800283a 	ret
    20a8:	1007883a 	mov	r3,r2
    20ac:	003ff606 	br	2088 <memmove+0x120>
    20b0:	1007883a 	mov	r3,r2
    20b4:	003ff506 	br	208c <memmove+0x124>
    20b8:	f800283a 	ret
    20bc:	500d883a 	mov	r6,r10
    20c0:	003ff106 	br	2088 <memmove+0x120>

000020c4 <memset>:
    20c4:	20c000cc 	andi	r3,r4,3
    20c8:	2005883a 	mov	r2,r4
    20cc:	18004426 	beq	r3,zero,21e0 <memset+0x11c>
    20d0:	31ffffc4 	addi	r7,r6,-1
    20d4:	30004026 	beq	r6,zero,21d8 <memset+0x114>
    20d8:	2813883a 	mov	r9,r5
    20dc:	200d883a 	mov	r6,r4
    20e0:	2007883a 	mov	r3,r4
    20e4:	00000406 	br	20f8 <memset+0x34>
    20e8:	3a3fffc4 	addi	r8,r7,-1
    20ec:	31800044 	addi	r6,r6,1
    20f0:	38003926 	beq	r7,zero,21d8 <memset+0x114>
    20f4:	400f883a 	mov	r7,r8
    20f8:	18c00044 	addi	r3,r3,1
    20fc:	32400005 	stb	r9,0(r6)
    2100:	1a0000cc 	andi	r8,r3,3
    2104:	403ff81e 	bne	r8,zero,20e8 <memset+0x24>
    2108:	010000c4 	movi	r4,3
    210c:	21c02d2e 	bgeu	r4,r7,21c4 <memset+0x100>
    2110:	29003fcc 	andi	r4,r5,255
    2114:	200c923a 	slli	r6,r4,8
    2118:	3108b03a 	or	r4,r6,r4
    211c:	200c943a 	slli	r6,r4,16
    2120:	218cb03a 	or	r6,r4,r6
    2124:	010003c4 	movi	r4,15
    2128:	21c0182e 	bgeu	r4,r7,218c <memset+0xc8>
    212c:	3b3ffc04 	addi	r12,r7,-16
    2130:	6018d13a 	srli	r12,r12,4
    2134:	1a000104 	addi	r8,r3,4
    2138:	1ac00204 	addi	r11,r3,8
    213c:	6008913a 	slli	r4,r12,4
    2140:	1a800304 	addi	r10,r3,12
    2144:	1813883a 	mov	r9,r3
    2148:	21000504 	addi	r4,r4,20
    214c:	1909883a 	add	r4,r3,r4
    2150:	49800015 	stw	r6,0(r9)
    2154:	41800015 	stw	r6,0(r8)
    2158:	59800015 	stw	r6,0(r11)
    215c:	51800015 	stw	r6,0(r10)
    2160:	42000404 	addi	r8,r8,16
    2164:	4a400404 	addi	r9,r9,16
    2168:	5ac00404 	addi	r11,r11,16
    216c:	52800404 	addi	r10,r10,16
    2170:	413ff71e 	bne	r8,r4,2150 <memset+0x8c>
    2174:	63000044 	addi	r12,r12,1
    2178:	6018913a 	slli	r12,r12,4
    217c:	39c003cc 	andi	r7,r7,15
    2180:	010000c4 	movi	r4,3
    2184:	1b07883a 	add	r3,r3,r12
    2188:	21c00e2e 	bgeu	r4,r7,21c4 <memset+0x100>
    218c:	1813883a 	mov	r9,r3
    2190:	3811883a 	mov	r8,r7
    2194:	010000c4 	movi	r4,3
    2198:	49800015 	stw	r6,0(r9)
    219c:	423fff04 	addi	r8,r8,-4
    21a0:	4a400104 	addi	r9,r9,4
    21a4:	223ffc36 	bltu	r4,r8,2198 <memset+0xd4>
    21a8:	393fff04 	addi	r4,r7,-4
    21ac:	2008d0ba 	srli	r4,r4,2
    21b0:	39c000cc 	andi	r7,r7,3
    21b4:	21000044 	addi	r4,r4,1
    21b8:	2109883a 	add	r4,r4,r4
    21bc:	2109883a 	add	r4,r4,r4
    21c0:	1907883a 	add	r3,r3,r4
    21c4:	38000526 	beq	r7,zero,21dc <memset+0x118>
    21c8:	19cf883a 	add	r7,r3,r7
    21cc:	19400005 	stb	r5,0(r3)
    21d0:	18c00044 	addi	r3,r3,1
    21d4:	38fffd1e 	bne	r7,r3,21cc <memset+0x108>
    21d8:	f800283a 	ret
    21dc:	f800283a 	ret
    21e0:	2007883a 	mov	r3,r4
    21e4:	300f883a 	mov	r7,r6
    21e8:	003fc706 	br	2108 <memset+0x44>

000021ec <_realloc_r>:
    21ec:	defff604 	addi	sp,sp,-40
    21f0:	dc800215 	stw	r18,8(sp)
    21f4:	dfc00915 	stw	ra,36(sp)
    21f8:	df000815 	stw	fp,32(sp)
    21fc:	ddc00715 	stw	r23,28(sp)
    2200:	dd800615 	stw	r22,24(sp)
    2204:	dd400515 	stw	r21,20(sp)
    2208:	dd000415 	stw	r20,16(sp)
    220c:	dcc00315 	stw	r19,12(sp)
    2210:	dc400115 	stw	r17,4(sp)
    2214:	dc000015 	stw	r16,0(sp)
    2218:	3025883a 	mov	r18,r6
    221c:	2800b726 	beq	r5,zero,24fc <_realloc_r+0x310>
    2220:	282b883a 	mov	r21,r5
    2224:	2029883a 	mov	r20,r4
    2228:	0003d780 	call	3d78 <__malloc_lock>
    222c:	a8bfff17 	ldw	r2,-4(r21)
    2230:	043fff04 	movi	r16,-4
    2234:	90c002c4 	addi	r3,r18,11
    2238:	01000584 	movi	r4,22
    223c:	acfffe04 	addi	r19,r21,-8
    2240:	1420703a 	and	r16,r2,r16
    2244:	20c0332e 	bgeu	r4,r3,2314 <_realloc_r+0x128>
    2248:	047ffe04 	movi	r17,-8
    224c:	1c62703a 	and	r17,r3,r17
    2250:	8807883a 	mov	r3,r17
    2254:	88005816 	blt	r17,zero,23b8 <_realloc_r+0x1cc>
    2258:	8c805736 	bltu	r17,r18,23b8 <_realloc_r+0x1cc>
    225c:	80c0300e 	bge	r16,r3,2320 <_realloc_r+0x134>
    2260:	07010034 	movhi	fp,1024
    2264:	e7012004 	addi	fp,fp,1152
    2268:	e1c00217 	ldw	r7,8(fp)
    226c:	9c09883a 	add	r4,r19,r16
    2270:	22000117 	ldw	r8,4(r4)
    2274:	21c06326 	beq	r4,r7,2404 <_realloc_r+0x218>
    2278:	017fff84 	movi	r5,-2
    227c:	414a703a 	and	r5,r8,r5
    2280:	214b883a 	add	r5,r4,r5
    2284:	29800117 	ldw	r6,4(r5)
    2288:	3180004c 	andi	r6,r6,1
    228c:	30003f26 	beq	r6,zero,238c <_realloc_r+0x1a0>
    2290:	1080004c 	andi	r2,r2,1
    2294:	10008326 	beq	r2,zero,24a4 <_realloc_r+0x2b8>
    2298:	900b883a 	mov	r5,r18
    229c:	a009883a 	mov	r4,r20
    22a0:	00015300 	call	1530 <_malloc_r>
    22a4:	1025883a 	mov	r18,r2
    22a8:	10011e26 	beq	r2,zero,2724 <_realloc_r+0x538>
    22ac:	a93fff17 	ldw	r4,-4(r21)
    22b0:	10fffe04 	addi	r3,r2,-8
    22b4:	00bfff84 	movi	r2,-2
    22b8:	2084703a 	and	r2,r4,r2
    22bc:	9885883a 	add	r2,r19,r2
    22c0:	1880ee26 	beq	r3,r2,267c <_realloc_r+0x490>
    22c4:	81bfff04 	addi	r6,r16,-4
    22c8:	00800904 	movi	r2,36
    22cc:	1180b836 	bltu	r2,r6,25b0 <_realloc_r+0x3c4>
    22d0:	00c004c4 	movi	r3,19
    22d4:	19809636 	bltu	r3,r6,2530 <_realloc_r+0x344>
    22d8:	9005883a 	mov	r2,r18
    22dc:	a807883a 	mov	r3,r21
    22e0:	19000017 	ldw	r4,0(r3)
    22e4:	11000015 	stw	r4,0(r2)
    22e8:	19000117 	ldw	r4,4(r3)
    22ec:	11000115 	stw	r4,4(r2)
    22f0:	18c00217 	ldw	r3,8(r3)
    22f4:	10c00215 	stw	r3,8(r2)
    22f8:	a80b883a 	mov	r5,r21
    22fc:	a009883a 	mov	r4,r20
    2300:	0002fb80 	call	2fb8 <_free_r>
    2304:	a009883a 	mov	r4,r20
    2308:	0003d9c0 	call	3d9c <__malloc_unlock>
    230c:	9005883a 	mov	r2,r18
    2310:	00001206 	br	235c <_realloc_r+0x170>
    2314:	00c00404 	movi	r3,16
    2318:	1823883a 	mov	r17,r3
    231c:	003fce06 	br	2258 <_realloc_r+0x6c>
    2320:	a825883a 	mov	r18,r21
    2324:	8445c83a 	sub	r2,r16,r17
    2328:	00c003c4 	movi	r3,15
    232c:	18802636 	bltu	r3,r2,23c8 <_realloc_r+0x1dc>
    2330:	99800117 	ldw	r6,4(r19)
    2334:	9c07883a 	add	r3,r19,r16
    2338:	3180004c 	andi	r6,r6,1
    233c:	3420b03a 	or	r16,r6,r16
    2340:	9c000115 	stw	r16,4(r19)
    2344:	18800117 	ldw	r2,4(r3)
    2348:	10800054 	ori	r2,r2,1
    234c:	18800115 	stw	r2,4(r3)
    2350:	a009883a 	mov	r4,r20
    2354:	0003d9c0 	call	3d9c <__malloc_unlock>
    2358:	9005883a 	mov	r2,r18
    235c:	dfc00917 	ldw	ra,36(sp)
    2360:	df000817 	ldw	fp,32(sp)
    2364:	ddc00717 	ldw	r23,28(sp)
    2368:	dd800617 	ldw	r22,24(sp)
    236c:	dd400517 	ldw	r21,20(sp)
    2370:	dd000417 	ldw	r20,16(sp)
    2374:	dcc00317 	ldw	r19,12(sp)
    2378:	dc800217 	ldw	r18,8(sp)
    237c:	dc400117 	ldw	r17,4(sp)
    2380:	dc000017 	ldw	r16,0(sp)
    2384:	dec00a04 	addi	sp,sp,40
    2388:	f800283a 	ret
    238c:	017fff04 	movi	r5,-4
    2390:	414a703a 	and	r5,r8,r5
    2394:	814d883a 	add	r6,r16,r5
    2398:	30c01f16 	blt	r6,r3,2418 <_realloc_r+0x22c>
    239c:	20800317 	ldw	r2,12(r4)
    23a0:	20c00217 	ldw	r3,8(r4)
    23a4:	a825883a 	mov	r18,r21
    23a8:	3021883a 	mov	r16,r6
    23ac:	18800315 	stw	r2,12(r3)
    23b0:	10c00215 	stw	r3,8(r2)
    23b4:	003fdb06 	br	2324 <_realloc_r+0x138>
    23b8:	00800304 	movi	r2,12
    23bc:	a0800015 	stw	r2,0(r20)
    23c0:	0005883a 	mov	r2,zero
    23c4:	003fe506 	br	235c <_realloc_r+0x170>
    23c8:	98c00117 	ldw	r3,4(r19)
    23cc:	9c4b883a 	add	r5,r19,r17
    23d0:	11000054 	ori	r4,r2,1
    23d4:	18c0004c 	andi	r3,r3,1
    23d8:	1c62b03a 	or	r17,r3,r17
    23dc:	9c400115 	stw	r17,4(r19)
    23e0:	29000115 	stw	r4,4(r5)
    23e4:	2885883a 	add	r2,r5,r2
    23e8:	10c00117 	ldw	r3,4(r2)
    23ec:	29400204 	addi	r5,r5,8
    23f0:	a009883a 	mov	r4,r20
    23f4:	18c00054 	ori	r3,r3,1
    23f8:	10c00115 	stw	r3,4(r2)
    23fc:	0002fb80 	call	2fb8 <_free_r>
    2400:	003fd306 	br	2350 <_realloc_r+0x164>
    2404:	017fff04 	movi	r5,-4
    2408:	414a703a 	and	r5,r8,r5
    240c:	89800404 	addi	r6,r17,16
    2410:	8151883a 	add	r8,r16,r5
    2414:	4180590e 	bge	r8,r6,257c <_realloc_r+0x390>
    2418:	1080004c 	andi	r2,r2,1
    241c:	103f9e1e 	bne	r2,zero,2298 <_realloc_r+0xac>
    2420:	adbffe17 	ldw	r22,-8(r21)
    2424:	00bfff04 	movi	r2,-4
    2428:	9dadc83a 	sub	r22,r19,r22
    242c:	b1800117 	ldw	r6,4(r22)
    2430:	3084703a 	and	r2,r6,r2
    2434:	20002026 	beq	r4,zero,24b8 <_realloc_r+0x2cc>
    2438:	80af883a 	add	r23,r16,r2
    243c:	b96f883a 	add	r23,r23,r5
    2440:	21c05f26 	beq	r4,r7,25c0 <_realloc_r+0x3d4>
    2444:	b8c01c16 	blt	r23,r3,24b8 <_realloc_r+0x2cc>
    2448:	20800317 	ldw	r2,12(r4)
    244c:	20c00217 	ldw	r3,8(r4)
    2450:	81bfff04 	addi	r6,r16,-4
    2454:	01000904 	movi	r4,36
    2458:	18800315 	stw	r2,12(r3)
    245c:	10c00215 	stw	r3,8(r2)
    2460:	b0c00217 	ldw	r3,8(r22)
    2464:	b0800317 	ldw	r2,12(r22)
    2468:	b4800204 	addi	r18,r22,8
    246c:	18800315 	stw	r2,12(r3)
    2470:	10c00215 	stw	r3,8(r2)
    2474:	21801b36 	bltu	r4,r6,24e4 <_realloc_r+0x2f8>
    2478:	008004c4 	movi	r2,19
    247c:	1180352e 	bgeu	r2,r6,2554 <_realloc_r+0x368>
    2480:	a8800017 	ldw	r2,0(r21)
    2484:	b0800215 	stw	r2,8(r22)
    2488:	a8800117 	ldw	r2,4(r21)
    248c:	b0800315 	stw	r2,12(r22)
    2490:	008006c4 	movi	r2,27
    2494:	11807f36 	bltu	r2,r6,2694 <_realloc_r+0x4a8>
    2498:	b0800404 	addi	r2,r22,16
    249c:	ad400204 	addi	r21,r21,8
    24a0:	00002d06 	br	2558 <_realloc_r+0x36c>
    24a4:	adbffe17 	ldw	r22,-8(r21)
    24a8:	00bfff04 	movi	r2,-4
    24ac:	9dadc83a 	sub	r22,r19,r22
    24b0:	b1000117 	ldw	r4,4(r22)
    24b4:	2084703a 	and	r2,r4,r2
    24b8:	b03f7726 	beq	r22,zero,2298 <_realloc_r+0xac>
    24bc:	80af883a 	add	r23,r16,r2
    24c0:	b8ff7516 	blt	r23,r3,2298 <_realloc_r+0xac>
    24c4:	b0800317 	ldw	r2,12(r22)
    24c8:	b0c00217 	ldw	r3,8(r22)
    24cc:	81bfff04 	addi	r6,r16,-4
    24d0:	01000904 	movi	r4,36
    24d4:	18800315 	stw	r2,12(r3)
    24d8:	10c00215 	stw	r3,8(r2)
    24dc:	b4800204 	addi	r18,r22,8
    24e0:	21bfe52e 	bgeu	r4,r6,2478 <_realloc_r+0x28c>
    24e4:	a80b883a 	mov	r5,r21
    24e8:	9009883a 	mov	r4,r18
    24ec:	0001f680 	call	1f68 <memmove>
    24f0:	b821883a 	mov	r16,r23
    24f4:	b027883a 	mov	r19,r22
    24f8:	003f8a06 	br	2324 <_realloc_r+0x138>
    24fc:	300b883a 	mov	r5,r6
    2500:	dfc00917 	ldw	ra,36(sp)
    2504:	df000817 	ldw	fp,32(sp)
    2508:	ddc00717 	ldw	r23,28(sp)
    250c:	dd800617 	ldw	r22,24(sp)
    2510:	dd400517 	ldw	r21,20(sp)
    2514:	dd000417 	ldw	r20,16(sp)
    2518:	dcc00317 	ldw	r19,12(sp)
    251c:	dc800217 	ldw	r18,8(sp)
    2520:	dc400117 	ldw	r17,4(sp)
    2524:	dc000017 	ldw	r16,0(sp)
    2528:	dec00a04 	addi	sp,sp,40
    252c:	00015301 	jmpi	1530 <_malloc_r>
    2530:	a8c00017 	ldw	r3,0(r21)
    2534:	90c00015 	stw	r3,0(r18)
    2538:	a8c00117 	ldw	r3,4(r21)
    253c:	90c00115 	stw	r3,4(r18)
    2540:	00c006c4 	movi	r3,27
    2544:	19804536 	bltu	r3,r6,265c <_realloc_r+0x470>
    2548:	90800204 	addi	r2,r18,8
    254c:	a8c00204 	addi	r3,r21,8
    2550:	003f6306 	br	22e0 <_realloc_r+0xf4>
    2554:	9005883a 	mov	r2,r18
    2558:	a8c00017 	ldw	r3,0(r21)
    255c:	b821883a 	mov	r16,r23
    2560:	b027883a 	mov	r19,r22
    2564:	10c00015 	stw	r3,0(r2)
    2568:	a8c00117 	ldw	r3,4(r21)
    256c:	10c00115 	stw	r3,4(r2)
    2570:	a8c00217 	ldw	r3,8(r21)
    2574:	10c00215 	stw	r3,8(r2)
    2578:	003f6a06 	br	2324 <_realloc_r+0x138>
    257c:	9c67883a 	add	r19,r19,r17
    2580:	4445c83a 	sub	r2,r8,r17
    2584:	e4c00215 	stw	r19,8(fp)
    2588:	10800054 	ori	r2,r2,1
    258c:	98800115 	stw	r2,4(r19)
    2590:	a8bfff17 	ldw	r2,-4(r21)
    2594:	a009883a 	mov	r4,r20
    2598:	1080004c 	andi	r2,r2,1
    259c:	1462b03a 	or	r17,r2,r17
    25a0:	ac7fff15 	stw	r17,-4(r21)
    25a4:	0003d9c0 	call	3d9c <__malloc_unlock>
    25a8:	a805883a 	mov	r2,r21
    25ac:	003f6b06 	br	235c <_realloc_r+0x170>
    25b0:	a80b883a 	mov	r5,r21
    25b4:	9009883a 	mov	r4,r18
    25b8:	0001f680 	call	1f68 <memmove>
    25bc:	003f4e06 	br	22f8 <_realloc_r+0x10c>
    25c0:	89000404 	addi	r4,r17,16
    25c4:	b93fbc16 	blt	r23,r4,24b8 <_realloc_r+0x2cc>
    25c8:	b0800317 	ldw	r2,12(r22)
    25cc:	b0c00217 	ldw	r3,8(r22)
    25d0:	81bfff04 	addi	r6,r16,-4
    25d4:	01000904 	movi	r4,36
    25d8:	18800315 	stw	r2,12(r3)
    25dc:	10c00215 	stw	r3,8(r2)
    25e0:	b4800204 	addi	r18,r22,8
    25e4:	21804336 	bltu	r4,r6,26f4 <_realloc_r+0x508>
    25e8:	008004c4 	movi	r2,19
    25ec:	11803f2e 	bgeu	r2,r6,26ec <_realloc_r+0x500>
    25f0:	a8800017 	ldw	r2,0(r21)
    25f4:	b0800215 	stw	r2,8(r22)
    25f8:	a8800117 	ldw	r2,4(r21)
    25fc:	b0800315 	stw	r2,12(r22)
    2600:	008006c4 	movi	r2,27
    2604:	11803f36 	bltu	r2,r6,2704 <_realloc_r+0x518>
    2608:	b0800404 	addi	r2,r22,16
    260c:	ad400204 	addi	r21,r21,8
    2610:	a8c00017 	ldw	r3,0(r21)
    2614:	10c00015 	stw	r3,0(r2)
    2618:	a8c00117 	ldw	r3,4(r21)
    261c:	10c00115 	stw	r3,4(r2)
    2620:	a8c00217 	ldw	r3,8(r21)
    2624:	10c00215 	stw	r3,8(r2)
    2628:	b447883a 	add	r3,r22,r17
    262c:	bc45c83a 	sub	r2,r23,r17
    2630:	e0c00215 	stw	r3,8(fp)
    2634:	10800054 	ori	r2,r2,1
    2638:	18800115 	stw	r2,4(r3)
    263c:	b0800117 	ldw	r2,4(r22)
    2640:	a009883a 	mov	r4,r20
    2644:	1080004c 	andi	r2,r2,1
    2648:	1462b03a 	or	r17,r2,r17
    264c:	b4400115 	stw	r17,4(r22)
    2650:	0003d9c0 	call	3d9c <__malloc_unlock>
    2654:	9005883a 	mov	r2,r18
    2658:	003f4006 	br	235c <_realloc_r+0x170>
    265c:	a8c00217 	ldw	r3,8(r21)
    2660:	90c00215 	stw	r3,8(r18)
    2664:	a8c00317 	ldw	r3,12(r21)
    2668:	90c00315 	stw	r3,12(r18)
    266c:	30801126 	beq	r6,r2,26b4 <_realloc_r+0x4c8>
    2670:	90800404 	addi	r2,r18,16
    2674:	a8c00404 	addi	r3,r21,16
    2678:	003f1906 	br	22e0 <_realloc_r+0xf4>
    267c:	90ffff17 	ldw	r3,-4(r18)
    2680:	00bfff04 	movi	r2,-4
    2684:	a825883a 	mov	r18,r21
    2688:	1884703a 	and	r2,r3,r2
    268c:	80a1883a 	add	r16,r16,r2
    2690:	003f2406 	br	2324 <_realloc_r+0x138>
    2694:	a8800217 	ldw	r2,8(r21)
    2698:	b0800415 	stw	r2,16(r22)
    269c:	a8800317 	ldw	r2,12(r21)
    26a0:	b0800515 	stw	r2,20(r22)
    26a4:	31000a26 	beq	r6,r4,26d0 <_realloc_r+0x4e4>
    26a8:	b0800604 	addi	r2,r22,24
    26ac:	ad400404 	addi	r21,r21,16
    26b0:	003fa906 	br	2558 <_realloc_r+0x36c>
    26b4:	a9000417 	ldw	r4,16(r21)
    26b8:	90800604 	addi	r2,r18,24
    26bc:	a8c00604 	addi	r3,r21,24
    26c0:	91000415 	stw	r4,16(r18)
    26c4:	a9000517 	ldw	r4,20(r21)
    26c8:	91000515 	stw	r4,20(r18)
    26cc:	003f0406 	br	22e0 <_realloc_r+0xf4>
    26d0:	a8c00417 	ldw	r3,16(r21)
    26d4:	ad400604 	addi	r21,r21,24
    26d8:	b0800804 	addi	r2,r22,32
    26dc:	b0c00615 	stw	r3,24(r22)
    26e0:	a8ffff17 	ldw	r3,-4(r21)
    26e4:	b0c00715 	stw	r3,28(r22)
    26e8:	003f9b06 	br	2558 <_realloc_r+0x36c>
    26ec:	9005883a 	mov	r2,r18
    26f0:	003fc706 	br	2610 <_realloc_r+0x424>
    26f4:	a80b883a 	mov	r5,r21
    26f8:	9009883a 	mov	r4,r18
    26fc:	0001f680 	call	1f68 <memmove>
    2700:	003fc906 	br	2628 <_realloc_r+0x43c>
    2704:	a8800217 	ldw	r2,8(r21)
    2708:	b0800415 	stw	r2,16(r22)
    270c:	a8800317 	ldw	r2,12(r21)
    2710:	b0800515 	stw	r2,20(r22)
    2714:	31000726 	beq	r6,r4,2734 <_realloc_r+0x548>
    2718:	b0800604 	addi	r2,r22,24
    271c:	ad400404 	addi	r21,r21,16
    2720:	003fbb06 	br	2610 <_realloc_r+0x424>
    2724:	a009883a 	mov	r4,r20
    2728:	0003d9c0 	call	3d9c <__malloc_unlock>
    272c:	0005883a 	mov	r2,zero
    2730:	003f0a06 	br	235c <_realloc_r+0x170>
    2734:	a8c00417 	ldw	r3,16(r21)
    2738:	ad400604 	addi	r21,r21,24
    273c:	b0800804 	addi	r2,r22,32
    2740:	b0c00615 	stw	r3,24(r22)
    2744:	a8ffff17 	ldw	r3,-4(r21)
    2748:	b0c00715 	stw	r3,28(r22)
    274c:	003fb006 	br	2610 <_realloc_r+0x424>

00002750 <_sbrk_r>:
    2750:	defffd04 	addi	sp,sp,-12
    2754:	dc000015 	stw	r16,0(sp)
    2758:	04010034 	movhi	r16,1024
    275c:	dc400115 	stw	r17,4(sp)
    2760:	8406b504 	addi	r16,r16,6868
    2764:	2023883a 	mov	r17,r4
    2768:	2809883a 	mov	r4,r5
    276c:	dfc00215 	stw	ra,8(sp)
    2770:	80000015 	stw	zero,0(r16)
    2774:	0003f840 	call	3f84 <sbrk>
    2778:	00ffffc4 	movi	r3,-1
    277c:	10c00526 	beq	r2,r3,2794 <_sbrk_r+0x44>
    2780:	dfc00217 	ldw	ra,8(sp)
    2784:	dc400117 	ldw	r17,4(sp)
    2788:	dc000017 	ldw	r16,0(sp)
    278c:	dec00304 	addi	sp,sp,12
    2790:	f800283a 	ret
    2794:	80c00017 	ldw	r3,0(r16)
    2798:	183ff926 	beq	r3,zero,2780 <_sbrk_r+0x30>
    279c:	88c00015 	stw	r3,0(r17)
    27a0:	003ff706 	br	2780 <_sbrk_r+0x30>

000027a4 <__sread>:
    27a4:	defffe04 	addi	sp,sp,-8
    27a8:	dc000015 	stw	r16,0(sp)
    27ac:	2821883a 	mov	r16,r5
    27b0:	2940038f 	ldh	r5,14(r5)
    27b4:	dfc00115 	stw	ra,4(sp)
    27b8:	00034e40 	call	34e4 <_read_r>
    27bc:	10000716 	blt	r2,zero,27dc <__sread+0x38>
    27c0:	80c01417 	ldw	r3,80(r16)
    27c4:	1887883a 	add	r3,r3,r2
    27c8:	80c01415 	stw	r3,80(r16)
    27cc:	dfc00117 	ldw	ra,4(sp)
    27d0:	dc000017 	ldw	r16,0(sp)
    27d4:	dec00204 	addi	sp,sp,8
    27d8:	f800283a 	ret
    27dc:	80c0030b 	ldhu	r3,12(r16)
    27e0:	18fbffcc 	andi	r3,r3,61439
    27e4:	80c0030d 	sth	r3,12(r16)
    27e8:	dfc00117 	ldw	ra,4(sp)
    27ec:	dc000017 	ldw	r16,0(sp)
    27f0:	dec00204 	addi	sp,sp,8
    27f4:	f800283a 	ret

000027f8 <__seofread>:
    27f8:	0005883a 	mov	r2,zero
    27fc:	f800283a 	ret

00002800 <__swrite>:
    2800:	2880030b 	ldhu	r2,12(r5)
    2804:	defffb04 	addi	sp,sp,-20
    2808:	dcc00315 	stw	r19,12(sp)
    280c:	dc800215 	stw	r18,8(sp)
    2810:	dc400115 	stw	r17,4(sp)
    2814:	dc000015 	stw	r16,0(sp)
    2818:	dfc00415 	stw	ra,16(sp)
    281c:	10c0400c 	andi	r3,r2,256
    2820:	2821883a 	mov	r16,r5
    2824:	2023883a 	mov	r17,r4
    2828:	3025883a 	mov	r18,r6
    282c:	3827883a 	mov	r19,r7
    2830:	18000526 	beq	r3,zero,2848 <__swrite+0x48>
    2834:	2940038f 	ldh	r5,14(r5)
    2838:	01c00084 	movi	r7,2
    283c:	000d883a 	mov	r6,zero
    2840:	00032c80 	call	32c8 <_lseek_r>
    2844:	8080030b 	ldhu	r2,12(r16)
    2848:	8140038f 	ldh	r5,14(r16)
    284c:	10bbffcc 	andi	r2,r2,61439
    2850:	980f883a 	mov	r7,r19
    2854:	900d883a 	mov	r6,r18
    2858:	8809883a 	mov	r4,r17
    285c:	8080030d 	sth	r2,12(r16)
    2860:	dfc00417 	ldw	ra,16(sp)
    2864:	dcc00317 	ldw	r19,12(sp)
    2868:	dc800217 	ldw	r18,8(sp)
    286c:	dc400117 	ldw	r17,4(sp)
    2870:	dc000017 	ldw	r16,0(sp)
    2874:	dec00504 	addi	sp,sp,20
    2878:	00028e01 	jmpi	28e0 <_write_r>

0000287c <__sseek>:
    287c:	defffe04 	addi	sp,sp,-8
    2880:	dc000015 	stw	r16,0(sp)
    2884:	2821883a 	mov	r16,r5
    2888:	2940038f 	ldh	r5,14(r5)
    288c:	dfc00115 	stw	ra,4(sp)
    2890:	00032c80 	call	32c8 <_lseek_r>
    2894:	00ffffc4 	movi	r3,-1
    2898:	10c00826 	beq	r2,r3,28bc <__sseek+0x40>
    289c:	80c0030b 	ldhu	r3,12(r16)
    28a0:	80801415 	stw	r2,80(r16)
    28a4:	18c40014 	ori	r3,r3,4096
    28a8:	80c0030d 	sth	r3,12(r16)
    28ac:	dfc00117 	ldw	ra,4(sp)
    28b0:	dc000017 	ldw	r16,0(sp)
    28b4:	dec00204 	addi	sp,sp,8
    28b8:	f800283a 	ret
    28bc:	80c0030b 	ldhu	r3,12(r16)
    28c0:	18fbffcc 	andi	r3,r3,61439
    28c4:	80c0030d 	sth	r3,12(r16)
    28c8:	dfc00117 	ldw	ra,4(sp)
    28cc:	dc000017 	ldw	r16,0(sp)
    28d0:	dec00204 	addi	sp,sp,8
    28d4:	f800283a 	ret

000028d8 <__sclose>:
    28d8:	2940038f 	ldh	r5,14(r5)
    28dc:	0002a941 	jmpi	2a94 <_close_r>

000028e0 <_write_r>:
    28e0:	defffd04 	addi	sp,sp,-12
    28e4:	2805883a 	mov	r2,r5
    28e8:	dc000015 	stw	r16,0(sp)
    28ec:	04010034 	movhi	r16,1024
    28f0:	dc400115 	stw	r17,4(sp)
    28f4:	300b883a 	mov	r5,r6
    28f8:	8406b504 	addi	r16,r16,6868
    28fc:	2023883a 	mov	r17,r4
    2900:	380d883a 	mov	r6,r7
    2904:	1009883a 	mov	r4,r2
    2908:	dfc00215 	stw	ra,8(sp)
    290c:	80000015 	stw	zero,0(r16)
    2910:	00040700 	call	4070 <write>
    2914:	00ffffc4 	movi	r3,-1
    2918:	10c00526 	beq	r2,r3,2930 <_write_r+0x50>
    291c:	dfc00217 	ldw	ra,8(sp)
    2920:	dc400117 	ldw	r17,4(sp)
    2924:	dc000017 	ldw	r16,0(sp)
    2928:	dec00304 	addi	sp,sp,12
    292c:	f800283a 	ret
    2930:	80c00017 	ldw	r3,0(r16)
    2934:	183ff926 	beq	r3,zero,291c <_write_r+0x3c>
    2938:	88c00015 	stw	r3,0(r17)
    293c:	003ff706 	br	291c <_write_r+0x3c>

00002940 <__swsetup_r>:
    2940:	00810034 	movhi	r2,1024
    2944:	defffd04 	addi	sp,sp,-12
    2948:	1086a504 	addi	r2,r2,6804
    294c:	dc400115 	stw	r17,4(sp)
    2950:	2023883a 	mov	r17,r4
    2954:	11000017 	ldw	r4,0(r2)
    2958:	dc000015 	stw	r16,0(sp)
    295c:	dfc00215 	stw	ra,8(sp)
    2960:	2821883a 	mov	r16,r5
    2964:	20000226 	beq	r4,zero,2970 <__swsetup_r+0x30>
    2968:	20800e17 	ldw	r2,56(r4)
    296c:	10003126 	beq	r2,zero,2a34 <__swsetup_r+0xf4>
    2970:	8080030b 	ldhu	r2,12(r16)
    2974:	10c0020c 	andi	r3,r2,8
    2978:	1009883a 	mov	r4,r2
    297c:	18000f26 	beq	r3,zero,29bc <__swsetup_r+0x7c>
    2980:	80c00417 	ldw	r3,16(r16)
    2984:	18001526 	beq	r3,zero,29dc <__swsetup_r+0x9c>
    2988:	1100004c 	andi	r4,r2,1
    298c:	20001c1e 	bne	r4,zero,2a00 <__swsetup_r+0xc0>
    2990:	1080008c 	andi	r2,r2,2
    2994:	1000291e 	bne	r2,zero,2a3c <__swsetup_r+0xfc>
    2998:	80800517 	ldw	r2,20(r16)
    299c:	80800215 	stw	r2,8(r16)
    29a0:	18001c26 	beq	r3,zero,2a14 <__swsetup_r+0xd4>
    29a4:	0005883a 	mov	r2,zero
    29a8:	dfc00217 	ldw	ra,8(sp)
    29ac:	dc400117 	ldw	r17,4(sp)
    29b0:	dc000017 	ldw	r16,0(sp)
    29b4:	dec00304 	addi	sp,sp,12
    29b8:	f800283a 	ret
    29bc:	2080040c 	andi	r2,r4,16
    29c0:	10002e26 	beq	r2,zero,2a7c <__swsetup_r+0x13c>
    29c4:	2080010c 	andi	r2,r4,4
    29c8:	10001e1e 	bne	r2,zero,2a44 <__swsetup_r+0x104>
    29cc:	80c00417 	ldw	r3,16(r16)
    29d0:	20800214 	ori	r2,r4,8
    29d4:	8080030d 	sth	r2,12(r16)
    29d8:	183feb1e 	bne	r3,zero,2988 <__swsetup_r+0x48>
    29dc:	1100a00c 	andi	r4,r2,640
    29e0:	01408004 	movi	r5,512
    29e4:	217fe826 	beq	r4,r5,2988 <__swsetup_r+0x48>
    29e8:	800b883a 	mov	r5,r16
    29ec:	8809883a 	mov	r4,r17
    29f0:	00033280 	call	3328 <__smakebuf_r>
    29f4:	8080030b 	ldhu	r2,12(r16)
    29f8:	80c00417 	ldw	r3,16(r16)
    29fc:	003fe206 	br	2988 <__swsetup_r+0x48>
    2a00:	80800517 	ldw	r2,20(r16)
    2a04:	80000215 	stw	zero,8(r16)
    2a08:	0085c83a 	sub	r2,zero,r2
    2a0c:	80800615 	stw	r2,24(r16)
    2a10:	183fe41e 	bne	r3,zero,29a4 <__swsetup_r+0x64>
    2a14:	80c0030b 	ldhu	r3,12(r16)
    2a18:	0005883a 	mov	r2,zero
    2a1c:	1900200c 	andi	r4,r3,128
    2a20:	203fe126 	beq	r4,zero,29a8 <__swsetup_r+0x68>
    2a24:	18c01014 	ori	r3,r3,64
    2a28:	80c0030d 	sth	r3,12(r16)
    2a2c:	00bfffc4 	movi	r2,-1
    2a30:	003fdd06 	br	29a8 <__swsetup_r+0x68>
    2a34:	0000e900 	call	e90 <__sinit>
    2a38:	003fcd06 	br	2970 <__swsetup_r+0x30>
    2a3c:	0005883a 	mov	r2,zero
    2a40:	003fd606 	br	299c <__swsetup_r+0x5c>
    2a44:	81400c17 	ldw	r5,48(r16)
    2a48:	28000626 	beq	r5,zero,2a64 <__swsetup_r+0x124>
    2a4c:	80801004 	addi	r2,r16,64
    2a50:	28800326 	beq	r5,r2,2a60 <__swsetup_r+0x120>
    2a54:	8809883a 	mov	r4,r17
    2a58:	0002fb80 	call	2fb8 <_free_r>
    2a5c:	8100030b 	ldhu	r4,12(r16)
    2a60:	80000c15 	stw	zero,48(r16)
    2a64:	80c00417 	ldw	r3,16(r16)
    2a68:	00bff6c4 	movi	r2,-37
    2a6c:	1108703a 	and	r4,r2,r4
    2a70:	80000115 	stw	zero,4(r16)
    2a74:	80c00015 	stw	r3,0(r16)
    2a78:	003fd506 	br	29d0 <__swsetup_r+0x90>
    2a7c:	00800244 	movi	r2,9
    2a80:	88800015 	stw	r2,0(r17)
    2a84:	20801014 	ori	r2,r4,64
    2a88:	8080030d 	sth	r2,12(r16)
    2a8c:	00bfffc4 	movi	r2,-1
    2a90:	003fc506 	br	29a8 <__swsetup_r+0x68>

00002a94 <_close_r>:
    2a94:	defffd04 	addi	sp,sp,-12
    2a98:	dc000015 	stw	r16,0(sp)
    2a9c:	04010034 	movhi	r16,1024
    2aa0:	dc400115 	stw	r17,4(sp)
    2aa4:	8406b504 	addi	r16,r16,6868
    2aa8:	2023883a 	mov	r17,r4
    2aac:	2809883a 	mov	r4,r5
    2ab0:	dfc00215 	stw	ra,8(sp)
    2ab4:	80000015 	stw	zero,0(r16)
    2ab8:	00037e40 	call	37e4 <close>
    2abc:	00ffffc4 	movi	r3,-1
    2ac0:	10c00526 	beq	r2,r3,2ad8 <_close_r+0x44>
    2ac4:	dfc00217 	ldw	ra,8(sp)
    2ac8:	dc400117 	ldw	r17,4(sp)
    2acc:	dc000017 	ldw	r16,0(sp)
    2ad0:	dec00304 	addi	sp,sp,12
    2ad4:	f800283a 	ret
    2ad8:	80c00017 	ldw	r3,0(r16)
    2adc:	183ff926 	beq	r3,zero,2ac4 <_close_r+0x30>
    2ae0:	88c00015 	stw	r3,0(r17)
    2ae4:	003ff706 	br	2ac4 <_close_r+0x30>

00002ae8 <_fclose_r>:
    2ae8:	28003926 	beq	r5,zero,2bd0 <_fclose_r+0xe8>
    2aec:	defffc04 	addi	sp,sp,-16
    2af0:	dc400115 	stw	r17,4(sp)
    2af4:	dc000015 	stw	r16,0(sp)
    2af8:	dfc00315 	stw	ra,12(sp)
    2afc:	dc800215 	stw	r18,8(sp)
    2b00:	2023883a 	mov	r17,r4
    2b04:	2821883a 	mov	r16,r5
    2b08:	20000226 	beq	r4,zero,2b14 <_fclose_r+0x2c>
    2b0c:	20800e17 	ldw	r2,56(r4)
    2b10:	10002726 	beq	r2,zero,2bb0 <_fclose_r+0xc8>
    2b14:	8080030f 	ldh	r2,12(r16)
    2b18:	1000071e 	bne	r2,zero,2b38 <_fclose_r+0x50>
    2b1c:	0005883a 	mov	r2,zero
    2b20:	dfc00317 	ldw	ra,12(sp)
    2b24:	dc800217 	ldw	r18,8(sp)
    2b28:	dc400117 	ldw	r17,4(sp)
    2b2c:	dc000017 	ldw	r16,0(sp)
    2b30:	dec00404 	addi	sp,sp,16
    2b34:	f800283a 	ret
    2b38:	800b883a 	mov	r5,r16
    2b3c:	8809883a 	mov	r4,r17
    2b40:	0002bec0 	call	2bec <__sflush_r>
    2b44:	1025883a 	mov	r18,r2
    2b48:	80800b17 	ldw	r2,44(r16)
    2b4c:	10000426 	beq	r2,zero,2b60 <_fclose_r+0x78>
    2b50:	81400717 	ldw	r5,28(r16)
    2b54:	8809883a 	mov	r4,r17
    2b58:	103ee83a 	callr	r2
    2b5c:	10001616 	blt	r2,zero,2bb8 <_fclose_r+0xd0>
    2b60:	8080030b 	ldhu	r2,12(r16)
    2b64:	1080200c 	andi	r2,r2,128
    2b68:	1000151e 	bne	r2,zero,2bc0 <_fclose_r+0xd8>
    2b6c:	81400c17 	ldw	r5,48(r16)
    2b70:	28000526 	beq	r5,zero,2b88 <_fclose_r+0xa0>
    2b74:	80801004 	addi	r2,r16,64
    2b78:	28800226 	beq	r5,r2,2b84 <_fclose_r+0x9c>
    2b7c:	8809883a 	mov	r4,r17
    2b80:	0002fb80 	call	2fb8 <_free_r>
    2b84:	80000c15 	stw	zero,48(r16)
    2b88:	81401117 	ldw	r5,68(r16)
    2b8c:	28000326 	beq	r5,zero,2b9c <_fclose_r+0xb4>
    2b90:	8809883a 	mov	r4,r17
    2b94:	0002fb80 	call	2fb8 <_free_r>
    2b98:	80001115 	stw	zero,68(r16)
    2b9c:	0000ea00 	call	ea0 <__sfp_lock_acquire>
    2ba0:	8000030d 	sth	zero,12(r16)
    2ba4:	0000ea40 	call	ea4 <__sfp_lock_release>
    2ba8:	9005883a 	mov	r2,r18
    2bac:	003fdc06 	br	2b20 <_fclose_r+0x38>
    2bb0:	0000e900 	call	e90 <__sinit>
    2bb4:	003fd706 	br	2b14 <_fclose_r+0x2c>
    2bb8:	04bfffc4 	movi	r18,-1
    2bbc:	003fe806 	br	2b60 <_fclose_r+0x78>
    2bc0:	81400417 	ldw	r5,16(r16)
    2bc4:	8809883a 	mov	r4,r17
    2bc8:	0002fb80 	call	2fb8 <_free_r>
    2bcc:	003fe706 	br	2b6c <_fclose_r+0x84>
    2bd0:	0005883a 	mov	r2,zero
    2bd4:	f800283a 	ret

00002bd8 <fclose>:
    2bd8:	00810034 	movhi	r2,1024
    2bdc:	1086a504 	addi	r2,r2,6804
    2be0:	200b883a 	mov	r5,r4
    2be4:	11000017 	ldw	r4,0(r2)
    2be8:	0002ae81 	jmpi	2ae8 <_fclose_r>

00002bec <__sflush_r>:
    2bec:	2880030b 	ldhu	r2,12(r5)
    2bf0:	defffb04 	addi	sp,sp,-20
    2bf4:	dcc00315 	stw	r19,12(sp)
    2bf8:	dc400115 	stw	r17,4(sp)
    2bfc:	dfc00415 	stw	ra,16(sp)
    2c00:	dc800215 	stw	r18,8(sp)
    2c04:	dc000015 	stw	r16,0(sp)
    2c08:	10c0020c 	andi	r3,r2,8
    2c0c:	2823883a 	mov	r17,r5
    2c10:	2027883a 	mov	r19,r4
    2c14:	1800311e 	bne	r3,zero,2cdc <__sflush_r+0xf0>
    2c18:	28c00117 	ldw	r3,4(r5)
    2c1c:	10820014 	ori	r2,r2,2048
    2c20:	2880030d 	sth	r2,12(r5)
    2c24:	00c04b0e 	bge	zero,r3,2d54 <__sflush_r+0x168>
    2c28:	8a000a17 	ldw	r8,40(r17)
    2c2c:	40002326 	beq	r8,zero,2cbc <__sflush_r+0xd0>
    2c30:	9c000017 	ldw	r16,0(r19)
    2c34:	10c4000c 	andi	r3,r2,4096
    2c38:	98000015 	stw	zero,0(r19)
    2c3c:	18004826 	beq	r3,zero,2d60 <__sflush_r+0x174>
    2c40:	89801417 	ldw	r6,80(r17)
    2c44:	10c0010c 	andi	r3,r2,4
    2c48:	18000626 	beq	r3,zero,2c64 <__sflush_r+0x78>
    2c4c:	88c00117 	ldw	r3,4(r17)
    2c50:	88800c17 	ldw	r2,48(r17)
    2c54:	30cdc83a 	sub	r6,r6,r3
    2c58:	10000226 	beq	r2,zero,2c64 <__sflush_r+0x78>
    2c5c:	88800f17 	ldw	r2,60(r17)
    2c60:	308dc83a 	sub	r6,r6,r2
    2c64:	89400717 	ldw	r5,28(r17)
    2c68:	000f883a 	mov	r7,zero
    2c6c:	9809883a 	mov	r4,r19
    2c70:	403ee83a 	callr	r8
    2c74:	00ffffc4 	movi	r3,-1
    2c78:	10c04426 	beq	r2,r3,2d8c <__sflush_r+0x1a0>
    2c7c:	88c0030b 	ldhu	r3,12(r17)
    2c80:	89000417 	ldw	r4,16(r17)
    2c84:	88000115 	stw	zero,4(r17)
    2c88:	197dffcc 	andi	r5,r3,63487
    2c8c:	8940030d 	sth	r5,12(r17)
    2c90:	89000015 	stw	r4,0(r17)
    2c94:	18c4000c 	andi	r3,r3,4096
    2c98:	18002c1e 	bne	r3,zero,2d4c <__sflush_r+0x160>
    2c9c:	89400c17 	ldw	r5,48(r17)
    2ca0:	9c000015 	stw	r16,0(r19)
    2ca4:	28000526 	beq	r5,zero,2cbc <__sflush_r+0xd0>
    2ca8:	88801004 	addi	r2,r17,64
    2cac:	28800226 	beq	r5,r2,2cb8 <__sflush_r+0xcc>
    2cb0:	9809883a 	mov	r4,r19
    2cb4:	0002fb80 	call	2fb8 <_free_r>
    2cb8:	88000c15 	stw	zero,48(r17)
    2cbc:	0005883a 	mov	r2,zero
    2cc0:	dfc00417 	ldw	ra,16(sp)
    2cc4:	dcc00317 	ldw	r19,12(sp)
    2cc8:	dc800217 	ldw	r18,8(sp)
    2ccc:	dc400117 	ldw	r17,4(sp)
    2cd0:	dc000017 	ldw	r16,0(sp)
    2cd4:	dec00504 	addi	sp,sp,20
    2cd8:	f800283a 	ret
    2cdc:	2c800417 	ldw	r18,16(r5)
    2ce0:	903ff626 	beq	r18,zero,2cbc <__sflush_r+0xd0>
    2ce4:	2c000017 	ldw	r16,0(r5)
    2ce8:	108000cc 	andi	r2,r2,3
    2cec:	2c800015 	stw	r18,0(r5)
    2cf0:	84a1c83a 	sub	r16,r16,r18
    2cf4:	1000131e 	bne	r2,zero,2d44 <__sflush_r+0x158>
    2cf8:	28800517 	ldw	r2,20(r5)
    2cfc:	88800215 	stw	r2,8(r17)
    2d00:	04000316 	blt	zero,r16,2d10 <__sflush_r+0x124>
    2d04:	003fed06 	br	2cbc <__sflush_r+0xd0>
    2d08:	90a5883a 	add	r18,r18,r2
    2d0c:	043feb0e 	bge	zero,r16,2cbc <__sflush_r+0xd0>
    2d10:	88800917 	ldw	r2,36(r17)
    2d14:	89400717 	ldw	r5,28(r17)
    2d18:	800f883a 	mov	r7,r16
    2d1c:	900d883a 	mov	r6,r18
    2d20:	9809883a 	mov	r4,r19
    2d24:	103ee83a 	callr	r2
    2d28:	80a1c83a 	sub	r16,r16,r2
    2d2c:	00bff616 	blt	zero,r2,2d08 <__sflush_r+0x11c>
    2d30:	88c0030b 	ldhu	r3,12(r17)
    2d34:	00bfffc4 	movi	r2,-1
    2d38:	18c01014 	ori	r3,r3,64
    2d3c:	88c0030d 	sth	r3,12(r17)
    2d40:	003fdf06 	br	2cc0 <__sflush_r+0xd4>
    2d44:	0005883a 	mov	r2,zero
    2d48:	003fec06 	br	2cfc <__sflush_r+0x110>
    2d4c:	88801415 	stw	r2,80(r17)
    2d50:	003fd206 	br	2c9c <__sflush_r+0xb0>
    2d54:	28c00f17 	ldw	r3,60(r5)
    2d58:	00ffb316 	blt	zero,r3,2c28 <__sflush_r+0x3c>
    2d5c:	003fd706 	br	2cbc <__sflush_r+0xd0>
    2d60:	89400717 	ldw	r5,28(r17)
    2d64:	000d883a 	mov	r6,zero
    2d68:	01c00044 	movi	r7,1
    2d6c:	9809883a 	mov	r4,r19
    2d70:	403ee83a 	callr	r8
    2d74:	100d883a 	mov	r6,r2
    2d78:	00bfffc4 	movi	r2,-1
    2d7c:	30801426 	beq	r6,r2,2dd0 <__sflush_r+0x1e4>
    2d80:	8880030b 	ldhu	r2,12(r17)
    2d84:	8a000a17 	ldw	r8,40(r17)
    2d88:	003fae06 	br	2c44 <__sflush_r+0x58>
    2d8c:	98c00017 	ldw	r3,0(r19)
    2d90:	183fba26 	beq	r3,zero,2c7c <__sflush_r+0x90>
    2d94:	01000744 	movi	r4,29
    2d98:	19000626 	beq	r3,r4,2db4 <__sflush_r+0x1c8>
    2d9c:	01000584 	movi	r4,22
    2da0:	19000426 	beq	r3,r4,2db4 <__sflush_r+0x1c8>
    2da4:	88c0030b 	ldhu	r3,12(r17)
    2da8:	18c01014 	ori	r3,r3,64
    2dac:	88c0030d 	sth	r3,12(r17)
    2db0:	003fc306 	br	2cc0 <__sflush_r+0xd4>
    2db4:	8880030b 	ldhu	r2,12(r17)
    2db8:	88c00417 	ldw	r3,16(r17)
    2dbc:	88000115 	stw	zero,4(r17)
    2dc0:	10bdffcc 	andi	r2,r2,63487
    2dc4:	8880030d 	sth	r2,12(r17)
    2dc8:	88c00015 	stw	r3,0(r17)
    2dcc:	003fb306 	br	2c9c <__sflush_r+0xb0>
    2dd0:	98800017 	ldw	r2,0(r19)
    2dd4:	103fea26 	beq	r2,zero,2d80 <__sflush_r+0x194>
    2dd8:	00c00744 	movi	r3,29
    2ddc:	10c00226 	beq	r2,r3,2de8 <__sflush_r+0x1fc>
    2de0:	00c00584 	movi	r3,22
    2de4:	10c0031e 	bne	r2,r3,2df4 <__sflush_r+0x208>
    2de8:	9c000015 	stw	r16,0(r19)
    2dec:	0005883a 	mov	r2,zero
    2df0:	003fb306 	br	2cc0 <__sflush_r+0xd4>
    2df4:	88c0030b 	ldhu	r3,12(r17)
    2df8:	3005883a 	mov	r2,r6
    2dfc:	18c01014 	ori	r3,r3,64
    2e00:	88c0030d 	sth	r3,12(r17)
    2e04:	003fae06 	br	2cc0 <__sflush_r+0xd4>

00002e08 <_fflush_r>:
    2e08:	defffd04 	addi	sp,sp,-12
    2e0c:	dc000115 	stw	r16,4(sp)
    2e10:	dfc00215 	stw	ra,8(sp)
    2e14:	2021883a 	mov	r16,r4
    2e18:	20000226 	beq	r4,zero,2e24 <_fflush_r+0x1c>
    2e1c:	20800e17 	ldw	r2,56(r4)
    2e20:	10000c26 	beq	r2,zero,2e54 <_fflush_r+0x4c>
    2e24:	2880030f 	ldh	r2,12(r5)
    2e28:	1000051e 	bne	r2,zero,2e40 <_fflush_r+0x38>
    2e2c:	0005883a 	mov	r2,zero
    2e30:	dfc00217 	ldw	ra,8(sp)
    2e34:	dc000117 	ldw	r16,4(sp)
    2e38:	dec00304 	addi	sp,sp,12
    2e3c:	f800283a 	ret
    2e40:	8009883a 	mov	r4,r16
    2e44:	dfc00217 	ldw	ra,8(sp)
    2e48:	dc000117 	ldw	r16,4(sp)
    2e4c:	dec00304 	addi	sp,sp,12
    2e50:	0002bec1 	jmpi	2bec <__sflush_r>
    2e54:	d9400015 	stw	r5,0(sp)
    2e58:	0000e900 	call	e90 <__sinit>
    2e5c:	d9400017 	ldw	r5,0(sp)
    2e60:	003ff006 	br	2e24 <_fflush_r+0x1c>

00002e64 <fflush>:
    2e64:	20000526 	beq	r4,zero,2e7c <fflush+0x18>
    2e68:	00810034 	movhi	r2,1024
    2e6c:	1086a504 	addi	r2,r2,6804
    2e70:	200b883a 	mov	r5,r4
    2e74:	11000017 	ldw	r4,0(r2)
    2e78:	0002e081 	jmpi	2e08 <_fflush_r>
    2e7c:	00810034 	movhi	r2,1024
    2e80:	1086a404 	addi	r2,r2,6800
    2e84:	11000017 	ldw	r4,0(r2)
    2e88:	01400034 	movhi	r5,0
    2e8c:	294b8204 	addi	r5,r5,11784
    2e90:	000146c1 	jmpi	146c <_fwalk_reent>

00002e94 <_malloc_trim_r>:
    2e94:	defffb04 	addi	sp,sp,-20
    2e98:	dcc00315 	stw	r19,12(sp)
    2e9c:	04c10034 	movhi	r19,1024
    2ea0:	dc800215 	stw	r18,8(sp)
    2ea4:	dc400115 	stw	r17,4(sp)
    2ea8:	dc000015 	stw	r16,0(sp)
    2eac:	dfc00415 	stw	ra,16(sp)
    2eb0:	2821883a 	mov	r16,r5
    2eb4:	9cc12004 	addi	r19,r19,1152
    2eb8:	2025883a 	mov	r18,r4
    2ebc:	0003d780 	call	3d78 <__malloc_lock>
    2ec0:	98800217 	ldw	r2,8(r19)
    2ec4:	14400117 	ldw	r17,4(r2)
    2ec8:	00bfff04 	movi	r2,-4
    2ecc:	88a2703a 	and	r17,r17,r2
    2ed0:	8c21c83a 	sub	r16,r17,r16
    2ed4:	8403fbc4 	addi	r16,r16,4079
    2ed8:	8020d33a 	srli	r16,r16,12
    2edc:	0083ffc4 	movi	r2,4095
    2ee0:	843fffc4 	addi	r16,r16,-1
    2ee4:	8020933a 	slli	r16,r16,12
    2ee8:	1400060e 	bge	r2,r16,2f04 <_malloc_trim_r+0x70>
    2eec:	000b883a 	mov	r5,zero
    2ef0:	9009883a 	mov	r4,r18
    2ef4:	00027500 	call	2750 <_sbrk_r>
    2ef8:	98c00217 	ldw	r3,8(r19)
    2efc:	1c47883a 	add	r3,r3,r17
    2f00:	10c00a26 	beq	r2,r3,2f2c <_malloc_trim_r+0x98>
    2f04:	9009883a 	mov	r4,r18
    2f08:	0003d9c0 	call	3d9c <__malloc_unlock>
    2f0c:	0005883a 	mov	r2,zero
    2f10:	dfc00417 	ldw	ra,16(sp)
    2f14:	dcc00317 	ldw	r19,12(sp)
    2f18:	dc800217 	ldw	r18,8(sp)
    2f1c:	dc400117 	ldw	r17,4(sp)
    2f20:	dc000017 	ldw	r16,0(sp)
    2f24:	dec00504 	addi	sp,sp,20
    2f28:	f800283a 	ret
    2f2c:	040bc83a 	sub	r5,zero,r16
    2f30:	9009883a 	mov	r4,r18
    2f34:	00027500 	call	2750 <_sbrk_r>
    2f38:	00ffffc4 	movi	r3,-1
    2f3c:	10c00d26 	beq	r2,r3,2f74 <_malloc_trim_r+0xe0>
    2f40:	00c10034 	movhi	r3,1024
    2f44:	18c6bd04 	addi	r3,r3,6900
    2f48:	18800017 	ldw	r2,0(r3)
    2f4c:	99000217 	ldw	r4,8(r19)
    2f50:	8c23c83a 	sub	r17,r17,r16
    2f54:	8c400054 	ori	r17,r17,1
    2f58:	1421c83a 	sub	r16,r2,r16
    2f5c:	24400115 	stw	r17,4(r4)
    2f60:	9009883a 	mov	r4,r18
    2f64:	1c000015 	stw	r16,0(r3)
    2f68:	0003d9c0 	call	3d9c <__malloc_unlock>
    2f6c:	00800044 	movi	r2,1
    2f70:	003fe706 	br	2f10 <_malloc_trim_r+0x7c>
    2f74:	000b883a 	mov	r5,zero
    2f78:	9009883a 	mov	r4,r18
    2f7c:	00027500 	call	2750 <_sbrk_r>
    2f80:	99000217 	ldw	r4,8(r19)
    2f84:	014003c4 	movi	r5,15
    2f88:	1107c83a 	sub	r3,r2,r4
    2f8c:	28ffdd0e 	bge	r5,r3,2f04 <_malloc_trim_r+0x70>
    2f90:	01410034 	movhi	r5,1024
    2f94:	2946a604 	addi	r5,r5,6808
    2f98:	29400017 	ldw	r5,0(r5)
    2f9c:	18c00054 	ori	r3,r3,1
    2fa0:	20c00115 	stw	r3,4(r4)
    2fa4:	00c10034 	movhi	r3,1024
    2fa8:	1145c83a 	sub	r2,r2,r5
    2fac:	18c6bd04 	addi	r3,r3,6900
    2fb0:	18800015 	stw	r2,0(r3)
    2fb4:	003fd306 	br	2f04 <_malloc_trim_r+0x70>

00002fb8 <_free_r>:
    2fb8:	28004126 	beq	r5,zero,30c0 <_free_r+0x108>
    2fbc:	defffd04 	addi	sp,sp,-12
    2fc0:	dc400115 	stw	r17,4(sp)
    2fc4:	dc000015 	stw	r16,0(sp)
    2fc8:	2023883a 	mov	r17,r4
    2fcc:	2821883a 	mov	r16,r5
    2fd0:	dfc00215 	stw	ra,8(sp)
    2fd4:	0003d780 	call	3d78 <__malloc_lock>
    2fd8:	81ffff17 	ldw	r7,-4(r16)
    2fdc:	00bfff84 	movi	r2,-2
    2fe0:	01010034 	movhi	r4,1024
    2fe4:	81bffe04 	addi	r6,r16,-8
    2fe8:	3884703a 	and	r2,r7,r2
    2fec:	21012004 	addi	r4,r4,1152
    2ff0:	308b883a 	add	r5,r6,r2
    2ff4:	2a400117 	ldw	r9,4(r5)
    2ff8:	22000217 	ldw	r8,8(r4)
    2ffc:	00ffff04 	movi	r3,-4
    3000:	48c6703a 	and	r3,r9,r3
    3004:	2a005726 	beq	r5,r8,3164 <_free_r+0x1ac>
    3008:	28c00115 	stw	r3,4(r5)
    300c:	39c0004c 	andi	r7,r7,1
    3010:	3800091e 	bne	r7,zero,3038 <_free_r+0x80>
    3014:	823ffe17 	ldw	r8,-8(r16)
    3018:	22400204 	addi	r9,r4,8
    301c:	320dc83a 	sub	r6,r6,r8
    3020:	31c00217 	ldw	r7,8(r6)
    3024:	1205883a 	add	r2,r2,r8
    3028:	3a406526 	beq	r7,r9,31c0 <_free_r+0x208>
    302c:	32000317 	ldw	r8,12(r6)
    3030:	3a000315 	stw	r8,12(r7)
    3034:	41c00215 	stw	r7,8(r8)
    3038:	28cf883a 	add	r7,r5,r3
    303c:	39c00117 	ldw	r7,4(r7)
    3040:	39c0004c 	andi	r7,r7,1
    3044:	38003a26 	beq	r7,zero,3130 <_free_r+0x178>
    3048:	10c00054 	ori	r3,r2,1
    304c:	30c00115 	stw	r3,4(r6)
    3050:	3087883a 	add	r3,r6,r2
    3054:	18800015 	stw	r2,0(r3)
    3058:	00c07fc4 	movi	r3,511
    305c:	18801936 	bltu	r3,r2,30c4 <_free_r+0x10c>
    3060:	1004d0fa 	srli	r2,r2,3
    3064:	01c00044 	movi	r7,1
    3068:	21400117 	ldw	r5,4(r4)
    306c:	10c00044 	addi	r3,r2,1
    3070:	18c7883a 	add	r3,r3,r3
    3074:	1005d0ba 	srai	r2,r2,2
    3078:	18c7883a 	add	r3,r3,r3
    307c:	18c7883a 	add	r3,r3,r3
    3080:	1907883a 	add	r3,r3,r4
    3084:	3884983a 	sll	r2,r7,r2
    3088:	19c00017 	ldw	r7,0(r3)
    308c:	1a3ffe04 	addi	r8,r3,-8
    3090:	1144b03a 	or	r2,r2,r5
    3094:	32000315 	stw	r8,12(r6)
    3098:	31c00215 	stw	r7,8(r6)
    309c:	20800115 	stw	r2,4(r4)
    30a0:	19800015 	stw	r6,0(r3)
    30a4:	39800315 	stw	r6,12(r7)
    30a8:	8809883a 	mov	r4,r17
    30ac:	dfc00217 	ldw	ra,8(sp)
    30b0:	dc400117 	ldw	r17,4(sp)
    30b4:	dc000017 	ldw	r16,0(sp)
    30b8:	dec00304 	addi	sp,sp,12
    30bc:	0003d9c1 	jmpi	3d9c <__malloc_unlock>
    30c0:	f800283a 	ret
    30c4:	100ad27a 	srli	r5,r2,9
    30c8:	00c00104 	movi	r3,4
    30cc:	19404a36 	bltu	r3,r5,31f8 <_free_r+0x240>
    30d0:	100ad1ba 	srli	r5,r2,6
    30d4:	28c00e44 	addi	r3,r5,57
    30d8:	18c7883a 	add	r3,r3,r3
    30dc:	29400e04 	addi	r5,r5,56
    30e0:	18c7883a 	add	r3,r3,r3
    30e4:	18c7883a 	add	r3,r3,r3
    30e8:	1909883a 	add	r4,r3,r4
    30ec:	20c00017 	ldw	r3,0(r4)
    30f0:	01c10034 	movhi	r7,1024
    30f4:	213ffe04 	addi	r4,r4,-8
    30f8:	39c12004 	addi	r7,r7,1152
    30fc:	20c04426 	beq	r4,r3,3210 <_free_r+0x258>
    3100:	01ffff04 	movi	r7,-4
    3104:	19400117 	ldw	r5,4(r3)
    3108:	29ca703a 	and	r5,r5,r7
    310c:	1140022e 	bgeu	r2,r5,3118 <_free_r+0x160>
    3110:	18c00217 	ldw	r3,8(r3)
    3114:	20fffb1e 	bne	r4,r3,3104 <_free_r+0x14c>
    3118:	19000317 	ldw	r4,12(r3)
    311c:	31000315 	stw	r4,12(r6)
    3120:	30c00215 	stw	r3,8(r6)
    3124:	21800215 	stw	r6,8(r4)
    3128:	19800315 	stw	r6,12(r3)
    312c:	003fde06 	br	30a8 <_free_r+0xf0>
    3130:	29c00217 	ldw	r7,8(r5)
    3134:	10c5883a 	add	r2,r2,r3
    3138:	00c10034 	movhi	r3,1024
    313c:	18c12204 	addi	r3,r3,1160
    3140:	38c03b26 	beq	r7,r3,3230 <_free_r+0x278>
    3144:	2a000317 	ldw	r8,12(r5)
    3148:	11400054 	ori	r5,r2,1
    314c:	3087883a 	add	r3,r6,r2
    3150:	3a000315 	stw	r8,12(r7)
    3154:	41c00215 	stw	r7,8(r8)
    3158:	31400115 	stw	r5,4(r6)
    315c:	18800015 	stw	r2,0(r3)
    3160:	003fbd06 	br	3058 <_free_r+0xa0>
    3164:	39c0004c 	andi	r7,r7,1
    3168:	10c5883a 	add	r2,r2,r3
    316c:	3800071e 	bne	r7,zero,318c <_free_r+0x1d4>
    3170:	81fffe17 	ldw	r7,-8(r16)
    3174:	31cdc83a 	sub	r6,r6,r7
    3178:	30c00317 	ldw	r3,12(r6)
    317c:	31400217 	ldw	r5,8(r6)
    3180:	11c5883a 	add	r2,r2,r7
    3184:	28c00315 	stw	r3,12(r5)
    3188:	19400215 	stw	r5,8(r3)
    318c:	10c00054 	ori	r3,r2,1
    3190:	30c00115 	stw	r3,4(r6)
    3194:	00c10034 	movhi	r3,1024
    3198:	18c6a704 	addi	r3,r3,6812
    319c:	18c00017 	ldw	r3,0(r3)
    31a0:	21800215 	stw	r6,8(r4)
    31a4:	10ffc036 	bltu	r2,r3,30a8 <_free_r+0xf0>
    31a8:	00810034 	movhi	r2,1024
    31ac:	1086b404 	addi	r2,r2,6864
    31b0:	11400017 	ldw	r5,0(r2)
    31b4:	8809883a 	mov	r4,r17
    31b8:	0002e940 	call	2e94 <_malloc_trim_r>
    31bc:	003fba06 	br	30a8 <_free_r+0xf0>
    31c0:	28c9883a 	add	r4,r5,r3
    31c4:	21000117 	ldw	r4,4(r4)
    31c8:	2100004c 	andi	r4,r4,1
    31cc:	2000391e 	bne	r4,zero,32b4 <_free_r+0x2fc>
    31d0:	29c00217 	ldw	r7,8(r5)
    31d4:	29000317 	ldw	r4,12(r5)
    31d8:	1885883a 	add	r2,r3,r2
    31dc:	10c00054 	ori	r3,r2,1
    31e0:	39000315 	stw	r4,12(r7)
    31e4:	21c00215 	stw	r7,8(r4)
    31e8:	30c00115 	stw	r3,4(r6)
    31ec:	308d883a 	add	r6,r6,r2
    31f0:	30800015 	stw	r2,0(r6)
    31f4:	003fac06 	br	30a8 <_free_r+0xf0>
    31f8:	00c00504 	movi	r3,20
    31fc:	19401536 	bltu	r3,r5,3254 <_free_r+0x29c>
    3200:	28c01704 	addi	r3,r5,92
    3204:	18c7883a 	add	r3,r3,r3
    3208:	294016c4 	addi	r5,r5,91
    320c:	003fb406 	br	30e0 <_free_r+0x128>
    3210:	280bd0ba 	srai	r5,r5,2
    3214:	00c00044 	movi	r3,1
    3218:	38800117 	ldw	r2,4(r7)
    321c:	194a983a 	sll	r5,r3,r5
    3220:	2007883a 	mov	r3,r4
    3224:	2884b03a 	or	r2,r5,r2
    3228:	38800115 	stw	r2,4(r7)
    322c:	003fbb06 	br	311c <_free_r+0x164>
    3230:	21800515 	stw	r6,20(r4)
    3234:	21800415 	stw	r6,16(r4)
    3238:	10c00054 	ori	r3,r2,1
    323c:	31c00315 	stw	r7,12(r6)
    3240:	31c00215 	stw	r7,8(r6)
    3244:	30c00115 	stw	r3,4(r6)
    3248:	308d883a 	add	r6,r6,r2
    324c:	30800015 	stw	r2,0(r6)
    3250:	003f9506 	br	30a8 <_free_r+0xf0>
    3254:	00c01504 	movi	r3,84
    3258:	19400536 	bltu	r3,r5,3270 <_free_r+0x2b8>
    325c:	100ad33a 	srli	r5,r2,12
    3260:	28c01bc4 	addi	r3,r5,111
    3264:	18c7883a 	add	r3,r3,r3
    3268:	29401b84 	addi	r5,r5,110
    326c:	003f9c06 	br	30e0 <_free_r+0x128>
    3270:	00c05504 	movi	r3,340
    3274:	19400536 	bltu	r3,r5,328c <_free_r+0x2d4>
    3278:	100ad3fa 	srli	r5,r2,15
    327c:	28c01e04 	addi	r3,r5,120
    3280:	18c7883a 	add	r3,r3,r3
    3284:	29401dc4 	addi	r5,r5,119
    3288:	003f9506 	br	30e0 <_free_r+0x128>
    328c:	00c15504 	movi	r3,1364
    3290:	19400536 	bltu	r3,r5,32a8 <_free_r+0x2f0>
    3294:	100ad4ba 	srli	r5,r2,18
    3298:	28c01f44 	addi	r3,r5,125
    329c:	18c7883a 	add	r3,r3,r3
    32a0:	29401f04 	addi	r5,r5,124
    32a4:	003f8e06 	br	30e0 <_free_r+0x128>
    32a8:	00c03f84 	movi	r3,254
    32ac:	01401f84 	movi	r5,126
    32b0:	003f8b06 	br	30e0 <_free_r+0x128>
    32b4:	10c00054 	ori	r3,r2,1
    32b8:	30c00115 	stw	r3,4(r6)
    32bc:	308d883a 	add	r6,r6,r2
    32c0:	30800015 	stw	r2,0(r6)
    32c4:	003f7806 	br	30a8 <_free_r+0xf0>

000032c8 <_lseek_r>:
    32c8:	defffd04 	addi	sp,sp,-12
    32cc:	2805883a 	mov	r2,r5
    32d0:	dc000015 	stw	r16,0(sp)
    32d4:	04010034 	movhi	r16,1024
    32d8:	dc400115 	stw	r17,4(sp)
    32dc:	300b883a 	mov	r5,r6
    32e0:	8406b504 	addi	r16,r16,6868
    32e4:	2023883a 	mov	r17,r4
    32e8:	380d883a 	mov	r6,r7
    32ec:	1009883a 	mov	r4,r2
    32f0:	dfc00215 	stw	ra,8(sp)
    32f4:	80000015 	stw	zero,0(r16)
    32f8:	0003c200 	call	3c20 <lseek>
    32fc:	00ffffc4 	movi	r3,-1
    3300:	10c00526 	beq	r2,r3,3318 <_lseek_r+0x50>
    3304:	dfc00217 	ldw	ra,8(sp)
    3308:	dc400117 	ldw	r17,4(sp)
    330c:	dc000017 	ldw	r16,0(sp)
    3310:	dec00304 	addi	sp,sp,12
    3314:	f800283a 	ret
    3318:	80c00017 	ldw	r3,0(r16)
    331c:	183ff926 	beq	r3,zero,3304 <_lseek_r+0x3c>
    3320:	88c00015 	stw	r3,0(r17)
    3324:	003ff706 	br	3304 <_lseek_r+0x3c>

00003328 <__smakebuf_r>:
    3328:	2880030b 	ldhu	r2,12(r5)
    332c:	10c0008c 	andi	r3,r2,2
    3330:	1800411e 	bne	r3,zero,3438 <__smakebuf_r+0x110>
    3334:	deffec04 	addi	sp,sp,-80
    3338:	dc000f15 	stw	r16,60(sp)
    333c:	2821883a 	mov	r16,r5
    3340:	2940038f 	ldh	r5,14(r5)
    3344:	dc401015 	stw	r17,64(sp)
    3348:	dfc01315 	stw	ra,76(sp)
    334c:	dcc01215 	stw	r19,72(sp)
    3350:	dc801115 	stw	r18,68(sp)
    3354:	2023883a 	mov	r17,r4
    3358:	28001c16 	blt	r5,zero,33cc <__smakebuf_r+0xa4>
    335c:	d80d883a 	mov	r6,sp
    3360:	00035440 	call	3544 <_fstat_r>
    3364:	10001816 	blt	r2,zero,33c8 <__smakebuf_r+0xa0>
    3368:	d8800117 	ldw	r2,4(sp)
    336c:	00e00014 	movui	r3,32768
    3370:	10bc000c 	andi	r2,r2,61440
    3374:	14c80020 	cmpeqi	r19,r2,8192
    3378:	10c03726 	beq	r2,r3,3458 <__smakebuf_r+0x130>
    337c:	80c0030b 	ldhu	r3,12(r16)
    3380:	18c20014 	ori	r3,r3,2048
    3384:	80c0030d 	sth	r3,12(r16)
    3388:	00c80004 	movi	r3,8192
    338c:	10c0521e 	bne	r2,r3,34d8 <__smakebuf_r+0x1b0>
    3390:	8140038f 	ldh	r5,14(r16)
    3394:	8809883a 	mov	r4,r17
    3398:	00035a00 	call	35a0 <_isatty_r>
    339c:	10004c26 	beq	r2,zero,34d0 <__smakebuf_r+0x1a8>
    33a0:	8080030b 	ldhu	r2,12(r16)
    33a4:	80c010c4 	addi	r3,r16,67
    33a8:	80c00015 	stw	r3,0(r16)
    33ac:	10800054 	ori	r2,r2,1
    33b0:	8080030d 	sth	r2,12(r16)
    33b4:	00800044 	movi	r2,1
    33b8:	80c00415 	stw	r3,16(r16)
    33bc:	80800515 	stw	r2,20(r16)
    33c0:	04810004 	movi	r18,1024
    33c4:	00000706 	br	33e4 <__smakebuf_r+0xbc>
    33c8:	8080030b 	ldhu	r2,12(r16)
    33cc:	10c0200c 	andi	r3,r2,128
    33d0:	18001f1e 	bne	r3,zero,3450 <__smakebuf_r+0x128>
    33d4:	04810004 	movi	r18,1024
    33d8:	10820014 	ori	r2,r2,2048
    33dc:	8080030d 	sth	r2,12(r16)
    33e0:	0027883a 	mov	r19,zero
    33e4:	900b883a 	mov	r5,r18
    33e8:	8809883a 	mov	r4,r17
    33ec:	00015300 	call	1530 <_malloc_r>
    33f0:	10002c26 	beq	r2,zero,34a4 <__smakebuf_r+0x17c>
    33f4:	80c0030b 	ldhu	r3,12(r16)
    33f8:	01000034 	movhi	r4,0
    33fc:	2102ce04 	addi	r4,r4,2872
    3400:	89000f15 	stw	r4,60(r17)
    3404:	18c02014 	ori	r3,r3,128
    3408:	80c0030d 	sth	r3,12(r16)
    340c:	80800015 	stw	r2,0(r16)
    3410:	80800415 	stw	r2,16(r16)
    3414:	84800515 	stw	r18,20(r16)
    3418:	98001a1e 	bne	r19,zero,3484 <__smakebuf_r+0x15c>
    341c:	dfc01317 	ldw	ra,76(sp)
    3420:	dcc01217 	ldw	r19,72(sp)
    3424:	dc801117 	ldw	r18,68(sp)
    3428:	dc401017 	ldw	r17,64(sp)
    342c:	dc000f17 	ldw	r16,60(sp)
    3430:	dec01404 	addi	sp,sp,80
    3434:	f800283a 	ret
    3438:	288010c4 	addi	r2,r5,67
    343c:	28800015 	stw	r2,0(r5)
    3440:	28800415 	stw	r2,16(r5)
    3444:	00800044 	movi	r2,1
    3448:	28800515 	stw	r2,20(r5)
    344c:	f800283a 	ret
    3450:	04801004 	movi	r18,64
    3454:	003fe006 	br	33d8 <__smakebuf_r+0xb0>
    3458:	81000a17 	ldw	r4,40(r16)
    345c:	00c00034 	movhi	r3,0
    3460:	18ca1f04 	addi	r3,r3,10364
    3464:	20ffc51e 	bne	r4,r3,337c <__smakebuf_r+0x54>
    3468:	8080030b 	ldhu	r2,12(r16)
    346c:	04810004 	movi	r18,1024
    3470:	84801315 	stw	r18,76(r16)
    3474:	1484b03a 	or	r2,r2,r18
    3478:	8080030d 	sth	r2,12(r16)
    347c:	0027883a 	mov	r19,zero
    3480:	003fd806 	br	33e4 <__smakebuf_r+0xbc>
    3484:	8140038f 	ldh	r5,14(r16)
    3488:	8809883a 	mov	r4,r17
    348c:	00035a00 	call	35a0 <_isatty_r>
    3490:	103fe226 	beq	r2,zero,341c <__smakebuf_r+0xf4>
    3494:	8080030b 	ldhu	r2,12(r16)
    3498:	10800054 	ori	r2,r2,1
    349c:	8080030d 	sth	r2,12(r16)
    34a0:	003fde06 	br	341c <__smakebuf_r+0xf4>
    34a4:	8080030b 	ldhu	r2,12(r16)
    34a8:	10c0800c 	andi	r3,r2,512
    34ac:	183fdb1e 	bne	r3,zero,341c <__smakebuf_r+0xf4>
    34b0:	10800094 	ori	r2,r2,2
    34b4:	80c010c4 	addi	r3,r16,67
    34b8:	8080030d 	sth	r2,12(r16)
    34bc:	00800044 	movi	r2,1
    34c0:	80c00015 	stw	r3,0(r16)
    34c4:	80c00415 	stw	r3,16(r16)
    34c8:	80800515 	stw	r2,20(r16)
    34cc:	003fd306 	br	341c <__smakebuf_r+0xf4>
    34d0:	04810004 	movi	r18,1024
    34d4:	003fc306 	br	33e4 <__smakebuf_r+0xbc>
    34d8:	0027883a 	mov	r19,zero
    34dc:	04810004 	movi	r18,1024
    34e0:	003fc006 	br	33e4 <__smakebuf_r+0xbc>

000034e4 <_read_r>:
    34e4:	defffd04 	addi	sp,sp,-12
    34e8:	2805883a 	mov	r2,r5
    34ec:	dc000015 	stw	r16,0(sp)
    34f0:	04010034 	movhi	r16,1024
    34f4:	dc400115 	stw	r17,4(sp)
    34f8:	300b883a 	mov	r5,r6
    34fc:	8406b504 	addi	r16,r16,6868
    3500:	2023883a 	mov	r17,r4
    3504:	380d883a 	mov	r6,r7
    3508:	1009883a 	mov	r4,r2
    350c:	dfc00215 	stw	ra,8(sp)
    3510:	80000015 	stw	zero,0(r16)
    3514:	0003dfc0 	call	3dfc <read>
    3518:	00ffffc4 	movi	r3,-1
    351c:	10c00526 	beq	r2,r3,3534 <_read_r+0x50>
    3520:	dfc00217 	ldw	ra,8(sp)
    3524:	dc400117 	ldw	r17,4(sp)
    3528:	dc000017 	ldw	r16,0(sp)
    352c:	dec00304 	addi	sp,sp,12
    3530:	f800283a 	ret
    3534:	80c00017 	ldw	r3,0(r16)
    3538:	183ff926 	beq	r3,zero,3520 <_read_r+0x3c>
    353c:	88c00015 	stw	r3,0(r17)
    3540:	003ff706 	br	3520 <_read_r+0x3c>

00003544 <_fstat_r>:
    3544:	defffd04 	addi	sp,sp,-12
    3548:	2805883a 	mov	r2,r5
    354c:	dc000015 	stw	r16,0(sp)
    3550:	04010034 	movhi	r16,1024
    3554:	dc400115 	stw	r17,4(sp)
    3558:	8406b504 	addi	r16,r16,6868
    355c:	2023883a 	mov	r17,r4
    3560:	300b883a 	mov	r5,r6
    3564:	1009883a 	mov	r4,r2
    3568:	dfc00215 	stw	ra,8(sp)
    356c:	80000015 	stw	zero,0(r16)
    3570:	00039580 	call	3958 <fstat>
    3574:	00ffffc4 	movi	r3,-1
    3578:	10c00526 	beq	r2,r3,3590 <_fstat_r+0x4c>
    357c:	dfc00217 	ldw	ra,8(sp)
    3580:	dc400117 	ldw	r17,4(sp)
    3584:	dc000017 	ldw	r16,0(sp)
    3588:	dec00304 	addi	sp,sp,12
    358c:	f800283a 	ret
    3590:	80c00017 	ldw	r3,0(r16)
    3594:	183ff926 	beq	r3,zero,357c <_fstat_r+0x38>
    3598:	88c00015 	stw	r3,0(r17)
    359c:	003ff706 	br	357c <_fstat_r+0x38>

000035a0 <_isatty_r>:
    35a0:	defffd04 	addi	sp,sp,-12
    35a4:	dc000015 	stw	r16,0(sp)
    35a8:	04010034 	movhi	r16,1024
    35ac:	dc400115 	stw	r17,4(sp)
    35b0:	8406b504 	addi	r16,r16,6868
    35b4:	2023883a 	mov	r17,r4
    35b8:	2809883a 	mov	r4,r5
    35bc:	dfc00215 	stw	ra,8(sp)
    35c0:	80000015 	stw	zero,0(r16)
    35c4:	0003a4c0 	call	3a4c <isatty>
    35c8:	00ffffc4 	movi	r3,-1
    35cc:	10c00526 	beq	r2,r3,35e4 <_isatty_r+0x44>
    35d0:	dfc00217 	ldw	ra,8(sp)
    35d4:	dc400117 	ldw	r17,4(sp)
    35d8:	dc000017 	ldw	r16,0(sp)
    35dc:	dec00304 	addi	sp,sp,12
    35e0:	f800283a 	ret
    35e4:	80c00017 	ldw	r3,0(r16)
    35e8:	183ff926 	beq	r3,zero,35d0 <_isatty_r+0x30>
    35ec:	88c00015 	stw	r3,0(r17)
    35f0:	003ff706 	br	35d0 <_isatty_r+0x30>

000035f4 <__divsi3>:
    35f4:	20001b16 	blt	r4,zero,3664 <__divsi3+0x70>
    35f8:	000f883a 	mov	r7,zero
    35fc:	28001616 	blt	r5,zero,3658 <__divsi3+0x64>
    3600:	200d883a 	mov	r6,r4
    3604:	29001a2e 	bgeu	r5,r4,3670 <__divsi3+0x7c>
    3608:	00800804 	movi	r2,32
    360c:	00c00044 	movi	r3,1
    3610:	00000106 	br	3618 <__divsi3+0x24>
    3614:	10000d26 	beq	r2,zero,364c <__divsi3+0x58>
    3618:	294b883a 	add	r5,r5,r5
    361c:	10bfffc4 	addi	r2,r2,-1
    3620:	18c7883a 	add	r3,r3,r3
    3624:	293ffb36 	bltu	r5,r4,3614 <__divsi3+0x20>
    3628:	0005883a 	mov	r2,zero
    362c:	18000726 	beq	r3,zero,364c <__divsi3+0x58>
    3630:	0005883a 	mov	r2,zero
    3634:	31400236 	bltu	r6,r5,3640 <__divsi3+0x4c>
    3638:	314dc83a 	sub	r6,r6,r5
    363c:	10c4b03a 	or	r2,r2,r3
    3640:	1806d07a 	srli	r3,r3,1
    3644:	280ad07a 	srli	r5,r5,1
    3648:	183ffa1e 	bne	r3,zero,3634 <__divsi3+0x40>
    364c:	38000126 	beq	r7,zero,3654 <__divsi3+0x60>
    3650:	0085c83a 	sub	r2,zero,r2
    3654:	f800283a 	ret
    3658:	014bc83a 	sub	r5,zero,r5
    365c:	39c0005c 	xori	r7,r7,1
    3660:	003fe706 	br	3600 <__divsi3+0xc>
    3664:	0109c83a 	sub	r4,zero,r4
    3668:	01c00044 	movi	r7,1
    366c:	003fe306 	br	35fc <__divsi3+0x8>
    3670:	00c00044 	movi	r3,1
    3674:	003fee06 	br	3630 <__divsi3+0x3c>

00003678 <__modsi3>:
    3678:	20001716 	blt	r4,zero,36d8 <__modsi3+0x60>
    367c:	000f883a 	mov	r7,zero
    3680:	2005883a 	mov	r2,r4
    3684:	28001216 	blt	r5,zero,36d0 <__modsi3+0x58>
    3688:	2900162e 	bgeu	r5,r4,36e4 <__modsi3+0x6c>
    368c:	01800804 	movi	r6,32
    3690:	00c00044 	movi	r3,1
    3694:	00000106 	br	369c <__modsi3+0x24>
    3698:	30000a26 	beq	r6,zero,36c4 <__modsi3+0x4c>
    369c:	294b883a 	add	r5,r5,r5
    36a0:	31bfffc4 	addi	r6,r6,-1
    36a4:	18c7883a 	add	r3,r3,r3
    36a8:	293ffb36 	bltu	r5,r4,3698 <__modsi3+0x20>
    36ac:	18000526 	beq	r3,zero,36c4 <__modsi3+0x4c>
    36b0:	1806d07a 	srli	r3,r3,1
    36b4:	11400136 	bltu	r2,r5,36bc <__modsi3+0x44>
    36b8:	1145c83a 	sub	r2,r2,r5
    36bc:	280ad07a 	srli	r5,r5,1
    36c0:	183ffb1e 	bne	r3,zero,36b0 <__modsi3+0x38>
    36c4:	38000126 	beq	r7,zero,36cc <__modsi3+0x54>
    36c8:	0085c83a 	sub	r2,zero,r2
    36cc:	f800283a 	ret
    36d0:	014bc83a 	sub	r5,zero,r5
    36d4:	003fec06 	br	3688 <__modsi3+0x10>
    36d8:	0109c83a 	sub	r4,zero,r4
    36dc:	01c00044 	movi	r7,1
    36e0:	003fe706 	br	3680 <__modsi3+0x8>
    36e4:	00c00044 	movi	r3,1
    36e8:	003ff106 	br	36b0 <__modsi3+0x38>

000036ec <__udivsi3>:
    36ec:	200d883a 	mov	r6,r4
    36f0:	2900152e 	bgeu	r5,r4,3748 <__udivsi3+0x5c>
    36f4:	28001416 	blt	r5,zero,3748 <__udivsi3+0x5c>
    36f8:	00800804 	movi	r2,32
    36fc:	00c00044 	movi	r3,1
    3700:	00000206 	br	370c <__udivsi3+0x20>
    3704:	10000e26 	beq	r2,zero,3740 <__udivsi3+0x54>
    3708:	28000516 	blt	r5,zero,3720 <__udivsi3+0x34>
    370c:	294b883a 	add	r5,r5,r5
    3710:	10bfffc4 	addi	r2,r2,-1
    3714:	18c7883a 	add	r3,r3,r3
    3718:	293ffa36 	bltu	r5,r4,3704 <__udivsi3+0x18>
    371c:	18000826 	beq	r3,zero,3740 <__udivsi3+0x54>
    3720:	0005883a 	mov	r2,zero
    3724:	31400236 	bltu	r6,r5,3730 <__udivsi3+0x44>
    3728:	314dc83a 	sub	r6,r6,r5
    372c:	10c4b03a 	or	r2,r2,r3
    3730:	1806d07a 	srli	r3,r3,1
    3734:	280ad07a 	srli	r5,r5,1
    3738:	183ffa1e 	bne	r3,zero,3724 <__udivsi3+0x38>
    373c:	f800283a 	ret
    3740:	0005883a 	mov	r2,zero
    3744:	f800283a 	ret
    3748:	00c00044 	movi	r3,1
    374c:	003ff406 	br	3720 <__udivsi3+0x34>

00003750 <__umodsi3>:
    3750:	2005883a 	mov	r2,r4
    3754:	2900122e 	bgeu	r5,r4,37a0 <__umodsi3+0x50>
    3758:	28001116 	blt	r5,zero,37a0 <__umodsi3+0x50>
    375c:	01800804 	movi	r6,32
    3760:	00c00044 	movi	r3,1
    3764:	00000206 	br	3770 <__umodsi3+0x20>
    3768:	30000c26 	beq	r6,zero,379c <__umodsi3+0x4c>
    376c:	28000516 	blt	r5,zero,3784 <__umodsi3+0x34>
    3770:	294b883a 	add	r5,r5,r5
    3774:	31bfffc4 	addi	r6,r6,-1
    3778:	18c7883a 	add	r3,r3,r3
    377c:	293ffa36 	bltu	r5,r4,3768 <__umodsi3+0x18>
    3780:	18000626 	beq	r3,zero,379c <__umodsi3+0x4c>
    3784:	1806d07a 	srli	r3,r3,1
    3788:	11400136 	bltu	r2,r5,3790 <__umodsi3+0x40>
    378c:	1145c83a 	sub	r2,r2,r5
    3790:	280ad07a 	srli	r5,r5,1
    3794:	183ffb1e 	bne	r3,zero,3784 <__umodsi3+0x34>
    3798:	f800283a 	ret
    379c:	f800283a 	ret
    37a0:	00c00044 	movi	r3,1
    37a4:	003ff706 	br	3784 <__umodsi3+0x34>

000037a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    37a8:	defffe04 	addi	sp,sp,-8
    37ac:	dfc00115 	stw	ra,4(sp)
    37b0:	df000015 	stw	fp,0(sp)
    37b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    37b8:	d0a00917 	ldw	r2,-32732(gp)
    37bc:	10000326 	beq	r2,zero,37cc <alt_get_errno+0x24>
    37c0:	d0a00917 	ldw	r2,-32732(gp)
    37c4:	103ee83a 	callr	r2
    37c8:	00000106 	br	37d0 <alt_get_errno+0x28>
    37cc:	d0a01104 	addi	r2,gp,-32700
}
    37d0:	e037883a 	mov	sp,fp
    37d4:	dfc00117 	ldw	ra,4(sp)
    37d8:	df000017 	ldw	fp,0(sp)
    37dc:	dec00204 	addi	sp,sp,8
    37e0:	f800283a 	ret

000037e4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    37e4:	defffb04 	addi	sp,sp,-20
    37e8:	dfc00415 	stw	ra,16(sp)
    37ec:	df000315 	stw	fp,12(sp)
    37f0:	df000304 	addi	fp,sp,12
    37f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    37f8:	e0bfff17 	ldw	r2,-4(fp)
    37fc:	10000816 	blt	r2,zero,3820 <close+0x3c>
    3800:	01400304 	movi	r5,12
    3804:	e13fff17 	ldw	r4,-4(fp)
    3808:	00007e40 	call	7e4 <__mulsi3>
    380c:	1007883a 	mov	r3,r2
    3810:	00810034 	movhi	r2,1024
    3814:	10822c04 	addi	r2,r2,2224
    3818:	1885883a 	add	r2,r3,r2
    381c:	00000106 	br	3824 <close+0x40>
    3820:	0005883a 	mov	r2,zero
    3824:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    3828:	e0bffd17 	ldw	r2,-12(fp)
    382c:	10001926 	beq	r2,zero,3894 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    3830:	e0bffd17 	ldw	r2,-12(fp)
    3834:	10800017 	ldw	r2,0(r2)
    3838:	10800417 	ldw	r2,16(r2)
    383c:	10000626 	beq	r2,zero,3858 <close+0x74>
    3840:	e0bffd17 	ldw	r2,-12(fp)
    3844:	10800017 	ldw	r2,0(r2)
    3848:	10800417 	ldw	r2,16(r2)
    384c:	e13ffd17 	ldw	r4,-12(fp)
    3850:	103ee83a 	callr	r2
    3854:	00000106 	br	385c <close+0x78>
    3858:	0005883a 	mov	r2,zero
    385c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3860:	e13fff17 	ldw	r4,-4(fp)
    3864:	0003f000 	call	3f00 <alt_release_fd>
    if (rval < 0)
    3868:	e0bffe17 	ldw	r2,-8(fp)
    386c:	1000070e 	bge	r2,zero,388c <close+0xa8>
    {
      ALT_ERRNO = -rval;
    3870:	00037a80 	call	37a8 <alt_get_errno>
    3874:	1007883a 	mov	r3,r2
    3878:	e0bffe17 	ldw	r2,-8(fp)
    387c:	0085c83a 	sub	r2,zero,r2
    3880:	18800015 	stw	r2,0(r3)
      return -1;
    3884:	00bfffc4 	movi	r2,-1
    3888:	00000706 	br	38a8 <close+0xc4>
    }
    return 0;
    388c:	0005883a 	mov	r2,zero
    3890:	00000506 	br	38a8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3894:	00037a80 	call	37a8 <alt_get_errno>
    3898:	1007883a 	mov	r3,r2
    389c:	00801444 	movi	r2,81
    38a0:	18800015 	stw	r2,0(r3)
    return -1;
    38a4:	00bfffc4 	movi	r2,-1
  }
}
    38a8:	e037883a 	mov	sp,fp
    38ac:	dfc00117 	ldw	ra,4(sp)
    38b0:	df000017 	ldw	fp,0(sp)
    38b4:	dec00204 	addi	sp,sp,8
    38b8:	f800283a 	ret

000038bc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    38bc:	defffc04 	addi	sp,sp,-16
    38c0:	df000315 	stw	fp,12(sp)
    38c4:	df000304 	addi	fp,sp,12
    38c8:	e13ffd15 	stw	r4,-12(fp)
    38cc:	e17ffe15 	stw	r5,-8(fp)
    38d0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    38d4:	e0bfff17 	ldw	r2,-4(fp)
}
    38d8:	e037883a 	mov	sp,fp
    38dc:	df000017 	ldw	fp,0(sp)
    38e0:	dec00104 	addi	sp,sp,4
    38e4:	f800283a 	ret

000038e8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    38e8:	defffd04 	addi	sp,sp,-12
    38ec:	df000215 	stw	fp,8(sp)
    38f0:	df000204 	addi	fp,sp,8
    38f4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    38f8:	0001883a 	nop
    38fc:	e0bfff17 	ldw	r2,-4(fp)
    3900:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    3904:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    3908:	10000226 	beq	r2,zero,3914 <_exit+0x2c>
    ALT_SIM_FAIL();
    390c:	002af070 	cmpltui	zero,zero,43969
    3910:	00000106 	br	3918 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    3914:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    3918:	003fff06 	br	3918 <_exit+0x30>

0000391c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    391c:	defffe04 	addi	sp,sp,-8
    3920:	dfc00115 	stw	ra,4(sp)
    3924:	df000015 	stw	fp,0(sp)
    3928:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    392c:	d0a00917 	ldw	r2,-32732(gp)
    3930:	10000326 	beq	r2,zero,3940 <alt_get_errno+0x24>
    3934:	d0a00917 	ldw	r2,-32732(gp)
    3938:	103ee83a 	callr	r2
    393c:	00000106 	br	3944 <alt_get_errno+0x28>
    3940:	d0a01104 	addi	r2,gp,-32700
}
    3944:	e037883a 	mov	sp,fp
    3948:	dfc00117 	ldw	ra,4(sp)
    394c:	df000017 	ldw	fp,0(sp)
    3950:	dec00204 	addi	sp,sp,8
    3954:	f800283a 	ret

00003958 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    3958:	defffb04 	addi	sp,sp,-20
    395c:	dfc00415 	stw	ra,16(sp)
    3960:	df000315 	stw	fp,12(sp)
    3964:	df000304 	addi	fp,sp,12
    3968:	e13ffe15 	stw	r4,-8(fp)
    396c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3970:	e0bffe17 	ldw	r2,-8(fp)
    3974:	10000816 	blt	r2,zero,3998 <fstat+0x40>
    3978:	01400304 	movi	r5,12
    397c:	e13ffe17 	ldw	r4,-8(fp)
    3980:	00007e40 	call	7e4 <__mulsi3>
    3984:	1007883a 	mov	r3,r2
    3988:	00810034 	movhi	r2,1024
    398c:	10822c04 	addi	r2,r2,2224
    3990:	1885883a 	add	r2,r3,r2
    3994:	00000106 	br	399c <fstat+0x44>
    3998:	0005883a 	mov	r2,zero
    399c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    39a0:	e0bffd17 	ldw	r2,-12(fp)
    39a4:	10001026 	beq	r2,zero,39e8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    39a8:	e0bffd17 	ldw	r2,-12(fp)
    39ac:	10800017 	ldw	r2,0(r2)
    39b0:	10800817 	ldw	r2,32(r2)
    39b4:	10000726 	beq	r2,zero,39d4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    39b8:	e0bffd17 	ldw	r2,-12(fp)
    39bc:	10800017 	ldw	r2,0(r2)
    39c0:	10800817 	ldw	r2,32(r2)
    39c4:	e17fff17 	ldw	r5,-4(fp)
    39c8:	e13ffd17 	ldw	r4,-12(fp)
    39cc:	103ee83a 	callr	r2
    39d0:	00000a06 	br	39fc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    39d4:	e0bfff17 	ldw	r2,-4(fp)
    39d8:	00c80004 	movi	r3,8192
    39dc:	10c00115 	stw	r3,4(r2)
      return 0;
    39e0:	0005883a 	mov	r2,zero
    39e4:	00000506 	br	39fc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    39e8:	000391c0 	call	391c <alt_get_errno>
    39ec:	1007883a 	mov	r3,r2
    39f0:	00801444 	movi	r2,81
    39f4:	18800015 	stw	r2,0(r3)
    return -1;
    39f8:	00bfffc4 	movi	r2,-1
  }
}
    39fc:	e037883a 	mov	sp,fp
    3a00:	dfc00117 	ldw	ra,4(sp)
    3a04:	df000017 	ldw	fp,0(sp)
    3a08:	dec00204 	addi	sp,sp,8
    3a0c:	f800283a 	ret

00003a10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3a10:	defffe04 	addi	sp,sp,-8
    3a14:	dfc00115 	stw	ra,4(sp)
    3a18:	df000015 	stw	fp,0(sp)
    3a1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3a20:	d0a00917 	ldw	r2,-32732(gp)
    3a24:	10000326 	beq	r2,zero,3a34 <alt_get_errno+0x24>
    3a28:	d0a00917 	ldw	r2,-32732(gp)
    3a2c:	103ee83a 	callr	r2
    3a30:	00000106 	br	3a38 <alt_get_errno+0x28>
    3a34:	d0a01104 	addi	r2,gp,-32700
}
    3a38:	e037883a 	mov	sp,fp
    3a3c:	dfc00117 	ldw	ra,4(sp)
    3a40:	df000017 	ldw	fp,0(sp)
    3a44:	dec00204 	addi	sp,sp,8
    3a48:	f800283a 	ret

00003a4c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    3a4c:	deffed04 	addi	sp,sp,-76
    3a50:	dfc01215 	stw	ra,72(sp)
    3a54:	df001115 	stw	fp,68(sp)
    3a58:	df001104 	addi	fp,sp,68
    3a5c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3a60:	e0bfff17 	ldw	r2,-4(fp)
    3a64:	10000816 	blt	r2,zero,3a88 <isatty+0x3c>
    3a68:	01400304 	movi	r5,12
    3a6c:	e13fff17 	ldw	r4,-4(fp)
    3a70:	00007e40 	call	7e4 <__mulsi3>
    3a74:	1007883a 	mov	r3,r2
    3a78:	00810034 	movhi	r2,1024
    3a7c:	10822c04 	addi	r2,r2,2224
    3a80:	1885883a 	add	r2,r3,r2
    3a84:	00000106 	br	3a8c <isatty+0x40>
    3a88:	0005883a 	mov	r2,zero
    3a8c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    3a90:	e0bfef17 	ldw	r2,-68(fp)
    3a94:	10000e26 	beq	r2,zero,3ad0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    3a98:	e0bfef17 	ldw	r2,-68(fp)
    3a9c:	10800017 	ldw	r2,0(r2)
    3aa0:	10800817 	ldw	r2,32(r2)
    3aa4:	1000021e 	bne	r2,zero,3ab0 <isatty+0x64>
    {
      return 1;
    3aa8:	00800044 	movi	r2,1
    3aac:	00000d06 	br	3ae4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    3ab0:	e0bff004 	addi	r2,fp,-64
    3ab4:	100b883a 	mov	r5,r2
    3ab8:	e13fff17 	ldw	r4,-4(fp)
    3abc:	00039580 	call	3958 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    3ac0:	e0bff117 	ldw	r2,-60(fp)
    3ac4:	10880020 	cmpeqi	r2,r2,8192
    3ac8:	10803fcc 	andi	r2,r2,255
    3acc:	00000506 	br	3ae4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3ad0:	0003a100 	call	3a10 <alt_get_errno>
    3ad4:	1007883a 	mov	r3,r2
    3ad8:	00801444 	movi	r2,81
    3adc:	18800015 	stw	r2,0(r3)
    return 0;
    3ae0:	0005883a 	mov	r2,zero
  }
}
    3ae4:	e037883a 	mov	sp,fp
    3ae8:	dfc00117 	ldw	ra,4(sp)
    3aec:	df000017 	ldw	fp,0(sp)
    3af0:	dec00204 	addi	sp,sp,8
    3af4:	f800283a 	ret

00003af8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    3af8:	defffc04 	addi	sp,sp,-16
    3afc:	df000315 	stw	fp,12(sp)
    3b00:	df000304 	addi	fp,sp,12
    3b04:	e13ffd15 	stw	r4,-12(fp)
    3b08:	e17ffe15 	stw	r5,-8(fp)
    3b0c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    3b10:	e0fffe17 	ldw	r3,-8(fp)
    3b14:	e0bffd17 	ldw	r2,-12(fp)
    3b18:	18800c26 	beq	r3,r2,3b4c <alt_load_section+0x54>
  {
    while( to != end )
    3b1c:	00000806 	br	3b40 <alt_load_section+0x48>
    {
      *to++ = *from++;
    3b20:	e0bffe17 	ldw	r2,-8(fp)
    3b24:	10c00104 	addi	r3,r2,4
    3b28:	e0fffe15 	stw	r3,-8(fp)
    3b2c:	e0fffd17 	ldw	r3,-12(fp)
    3b30:	19000104 	addi	r4,r3,4
    3b34:	e13ffd15 	stw	r4,-12(fp)
    3b38:	18c00017 	ldw	r3,0(r3)
    3b3c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    3b40:	e0fffe17 	ldw	r3,-8(fp)
    3b44:	e0bfff17 	ldw	r2,-4(fp)
    3b48:	18bff51e 	bne	r3,r2,3b20 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    3b4c:	0001883a 	nop
    3b50:	e037883a 	mov	sp,fp
    3b54:	df000017 	ldw	fp,0(sp)
    3b58:	dec00104 	addi	sp,sp,4
    3b5c:	f800283a 	ret

00003b60 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    3b60:	defffe04 	addi	sp,sp,-8
    3b64:	dfc00115 	stw	ra,4(sp)
    3b68:	df000015 	stw	fp,0(sp)
    3b6c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    3b70:	01810034 	movhi	r6,1024
    3b74:	3186b204 	addi	r6,r6,6856
    3b78:	01410034 	movhi	r5,1024
    3b7c:	29401704 	addi	r5,r5,92
    3b80:	01000034 	movhi	r4,0
    3b84:	21173904 	addi	r4,r4,23780
    3b88:	0003af80 	call	3af8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    3b8c:	01800034 	movhi	r6,0
    3b90:	31808c04 	addi	r6,r6,560
    3b94:	01400034 	movhi	r5,0
    3b98:	29400804 	addi	r5,r5,32
    3b9c:	01000034 	movhi	r4,0
    3ba0:	21000804 	addi	r4,r4,32
    3ba4:	0003af80 	call	3af8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    3ba8:	01810034 	movhi	r6,1024
    3bac:	31801704 	addi	r6,r6,92
    3bb0:	01410034 	movhi	r5,1024
    3bb4:	29400004 	addi	r5,r5,0
    3bb8:	01000034 	movhi	r4,0
    3bbc:	21172204 	addi	r4,r4,23688
    3bc0:	0003af80 	call	3af8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3bc4:	0004dbc0 	call	4dbc <alt_dcache_flush_all>
  alt_icache_flush_all();
    3bc8:	0004f7c0 	call	4f7c <alt_icache_flush_all>
}
    3bcc:	0001883a 	nop
    3bd0:	e037883a 	mov	sp,fp
    3bd4:	dfc00117 	ldw	ra,4(sp)
    3bd8:	df000017 	ldw	fp,0(sp)
    3bdc:	dec00204 	addi	sp,sp,8
    3be0:	f800283a 	ret

00003be4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3be4:	defffe04 	addi	sp,sp,-8
    3be8:	dfc00115 	stw	ra,4(sp)
    3bec:	df000015 	stw	fp,0(sp)
    3bf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3bf4:	d0a00917 	ldw	r2,-32732(gp)
    3bf8:	10000326 	beq	r2,zero,3c08 <alt_get_errno+0x24>
    3bfc:	d0a00917 	ldw	r2,-32732(gp)
    3c00:	103ee83a 	callr	r2
    3c04:	00000106 	br	3c0c <alt_get_errno+0x28>
    3c08:	d0a01104 	addi	r2,gp,-32700
}
    3c0c:	e037883a 	mov	sp,fp
    3c10:	dfc00117 	ldw	ra,4(sp)
    3c14:	df000017 	ldw	fp,0(sp)
    3c18:	dec00204 	addi	sp,sp,8
    3c1c:	f800283a 	ret

00003c20 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    3c20:	defff904 	addi	sp,sp,-28
    3c24:	dfc00615 	stw	ra,24(sp)
    3c28:	df000515 	stw	fp,20(sp)
    3c2c:	df000504 	addi	fp,sp,20
    3c30:	e13ffd15 	stw	r4,-12(fp)
    3c34:	e17ffe15 	stw	r5,-8(fp)
    3c38:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    3c3c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3c40:	e0bffd17 	ldw	r2,-12(fp)
    3c44:	10000816 	blt	r2,zero,3c68 <lseek+0x48>
    3c48:	01400304 	movi	r5,12
    3c4c:	e13ffd17 	ldw	r4,-12(fp)
    3c50:	00007e40 	call	7e4 <__mulsi3>
    3c54:	1007883a 	mov	r3,r2
    3c58:	00810034 	movhi	r2,1024
    3c5c:	10822c04 	addi	r2,r2,2224
    3c60:	1885883a 	add	r2,r3,r2
    3c64:	00000106 	br	3c6c <lseek+0x4c>
    3c68:	0005883a 	mov	r2,zero
    3c6c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    3c70:	e0bffc17 	ldw	r2,-16(fp)
    3c74:	10001026 	beq	r2,zero,3cb8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    3c78:	e0bffc17 	ldw	r2,-16(fp)
    3c7c:	10800017 	ldw	r2,0(r2)
    3c80:	10800717 	ldw	r2,28(r2)
    3c84:	10000926 	beq	r2,zero,3cac <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    3c88:	e0bffc17 	ldw	r2,-16(fp)
    3c8c:	10800017 	ldw	r2,0(r2)
    3c90:	10800717 	ldw	r2,28(r2)
    3c94:	e1bfff17 	ldw	r6,-4(fp)
    3c98:	e17ffe17 	ldw	r5,-8(fp)
    3c9c:	e13ffc17 	ldw	r4,-16(fp)
    3ca0:	103ee83a 	callr	r2
    3ca4:	e0bffb15 	stw	r2,-20(fp)
    3ca8:	00000506 	br	3cc0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3cac:	00bfde84 	movi	r2,-134
    3cb0:	e0bffb15 	stw	r2,-20(fp)
    3cb4:	00000206 	br	3cc0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    3cb8:	00bfebc4 	movi	r2,-81
    3cbc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    3cc0:	e0bffb17 	ldw	r2,-20(fp)
    3cc4:	1000070e 	bge	r2,zero,3ce4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    3cc8:	0003be40 	call	3be4 <alt_get_errno>
    3ccc:	1007883a 	mov	r3,r2
    3cd0:	e0bffb17 	ldw	r2,-20(fp)
    3cd4:	0085c83a 	sub	r2,zero,r2
    3cd8:	18800015 	stw	r2,0(r3)
    rc = -1;
    3cdc:	00bfffc4 	movi	r2,-1
    3ce0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    3ce4:	e0bffb17 	ldw	r2,-20(fp)
}
    3ce8:	e037883a 	mov	sp,fp
    3cec:	dfc00117 	ldw	ra,4(sp)
    3cf0:	df000017 	ldw	fp,0(sp)
    3cf4:	dec00204 	addi	sp,sp,8
    3cf8:	f800283a 	ret

00003cfc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3cfc:	defffd04 	addi	sp,sp,-12
    3d00:	dfc00215 	stw	ra,8(sp)
    3d04:	df000115 	stw	fp,4(sp)
    3d08:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3d0c:	0009883a 	mov	r4,zero
    3d10:	00041a40 	call	41a4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    3d14:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3d18:	00041dc0 	call	41dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    3d1c:	01810034 	movhi	r6,1024
    3d20:	31800d04 	addi	r6,r6,52
    3d24:	01410034 	movhi	r5,1024
    3d28:	29400d04 	addi	r5,r5,52
    3d2c:	01010034 	movhi	r4,1024
    3d30:	21000d04 	addi	r4,r4,52
    3d34:	00053200 	call	5320 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3d38:	0004ebc0 	call	4ebc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3d3c:	01000034 	movhi	r4,0
    3d40:	2113c704 	addi	r4,r4,20252
    3d44:	0005ae00 	call	5ae0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3d48:	d0a01217 	ldw	r2,-32696(gp)
    3d4c:	d0e01317 	ldw	r3,-32692(gp)
    3d50:	d1201417 	ldw	r4,-32688(gp)
    3d54:	200d883a 	mov	r6,r4
    3d58:	180b883a 	mov	r5,r3
    3d5c:	1009883a 	mov	r4,r2
    3d60:	00007180 	call	718 <main>
    3d64:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3d68:	01000044 	movi	r4,1
    3d6c:	00037e40 	call	37e4 <close>
  exit (result);
    3d70:	e13fff17 	ldw	r4,-4(fp)
    3d74:	000080c0 	call	80c <exit>

00003d78 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    3d78:	defffe04 	addi	sp,sp,-8
    3d7c:	df000115 	stw	fp,4(sp)
    3d80:	df000104 	addi	fp,sp,4
    3d84:	e13fff15 	stw	r4,-4(fp)
}
    3d88:	0001883a 	nop
    3d8c:	e037883a 	mov	sp,fp
    3d90:	df000017 	ldw	fp,0(sp)
    3d94:	dec00104 	addi	sp,sp,4
    3d98:	f800283a 	ret

00003d9c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3d9c:	defffe04 	addi	sp,sp,-8
    3da0:	df000115 	stw	fp,4(sp)
    3da4:	df000104 	addi	fp,sp,4
    3da8:	e13fff15 	stw	r4,-4(fp)
}
    3dac:	0001883a 	nop
    3db0:	e037883a 	mov	sp,fp
    3db4:	df000017 	ldw	fp,0(sp)
    3db8:	dec00104 	addi	sp,sp,4
    3dbc:	f800283a 	ret

00003dc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3dc0:	defffe04 	addi	sp,sp,-8
    3dc4:	dfc00115 	stw	ra,4(sp)
    3dc8:	df000015 	stw	fp,0(sp)
    3dcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3dd0:	d0a00917 	ldw	r2,-32732(gp)
    3dd4:	10000326 	beq	r2,zero,3de4 <alt_get_errno+0x24>
    3dd8:	d0a00917 	ldw	r2,-32732(gp)
    3ddc:	103ee83a 	callr	r2
    3de0:	00000106 	br	3de8 <alt_get_errno+0x28>
    3de4:	d0a01104 	addi	r2,gp,-32700
}
    3de8:	e037883a 	mov	sp,fp
    3dec:	dfc00117 	ldw	ra,4(sp)
    3df0:	df000017 	ldw	fp,0(sp)
    3df4:	dec00204 	addi	sp,sp,8
    3df8:	f800283a 	ret

00003dfc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    3dfc:	defff904 	addi	sp,sp,-28
    3e00:	dfc00615 	stw	ra,24(sp)
    3e04:	df000515 	stw	fp,20(sp)
    3e08:	df000504 	addi	fp,sp,20
    3e0c:	e13ffd15 	stw	r4,-12(fp)
    3e10:	e17ffe15 	stw	r5,-8(fp)
    3e14:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3e18:	e0bffd17 	ldw	r2,-12(fp)
    3e1c:	10000816 	blt	r2,zero,3e40 <read+0x44>
    3e20:	01400304 	movi	r5,12
    3e24:	e13ffd17 	ldw	r4,-12(fp)
    3e28:	00007e40 	call	7e4 <__mulsi3>
    3e2c:	1007883a 	mov	r3,r2
    3e30:	00810034 	movhi	r2,1024
    3e34:	10822c04 	addi	r2,r2,2224
    3e38:	1885883a 	add	r2,r3,r2
    3e3c:	00000106 	br	3e44 <read+0x48>
    3e40:	0005883a 	mov	r2,zero
    3e44:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3e48:	e0bffb17 	ldw	r2,-20(fp)
    3e4c:	10002226 	beq	r2,zero,3ed8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3e50:	e0bffb17 	ldw	r2,-20(fp)
    3e54:	10800217 	ldw	r2,8(r2)
    3e58:	108000cc 	andi	r2,r2,3
    3e5c:	10800060 	cmpeqi	r2,r2,1
    3e60:	1000181e 	bne	r2,zero,3ec4 <read+0xc8>
        (fd->dev->read))
    3e64:	e0bffb17 	ldw	r2,-20(fp)
    3e68:	10800017 	ldw	r2,0(r2)
    3e6c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3e70:	10001426 	beq	r2,zero,3ec4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    3e74:	e0bffb17 	ldw	r2,-20(fp)
    3e78:	10800017 	ldw	r2,0(r2)
    3e7c:	10800517 	ldw	r2,20(r2)
    3e80:	e0ffff17 	ldw	r3,-4(fp)
    3e84:	180d883a 	mov	r6,r3
    3e88:	e17ffe17 	ldw	r5,-8(fp)
    3e8c:	e13ffb17 	ldw	r4,-20(fp)
    3e90:	103ee83a 	callr	r2
    3e94:	e0bffc15 	stw	r2,-16(fp)
    3e98:	e0bffc17 	ldw	r2,-16(fp)
    3e9c:	1000070e 	bge	r2,zero,3ebc <read+0xc0>
        {
          ALT_ERRNO = -rval;
    3ea0:	0003dc00 	call	3dc0 <alt_get_errno>
    3ea4:	1007883a 	mov	r3,r2
    3ea8:	e0bffc17 	ldw	r2,-16(fp)
    3eac:	0085c83a 	sub	r2,zero,r2
    3eb0:	18800015 	stw	r2,0(r3)
          return -1;
    3eb4:	00bfffc4 	movi	r2,-1
    3eb8:	00000c06 	br	3eec <read+0xf0>
        }
        return rval;
    3ebc:	e0bffc17 	ldw	r2,-16(fp)
    3ec0:	00000a06 	br	3eec <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    3ec4:	0003dc00 	call	3dc0 <alt_get_errno>
    3ec8:	1007883a 	mov	r3,r2
    3ecc:	00800344 	movi	r2,13
    3ed0:	18800015 	stw	r2,0(r3)
    3ed4:	00000406 	br	3ee8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3ed8:	0003dc00 	call	3dc0 <alt_get_errno>
    3edc:	1007883a 	mov	r3,r2
    3ee0:	00801444 	movi	r2,81
    3ee4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3ee8:	00bfffc4 	movi	r2,-1
}
    3eec:	e037883a 	mov	sp,fp
    3ef0:	dfc00117 	ldw	ra,4(sp)
    3ef4:	df000017 	ldw	fp,0(sp)
    3ef8:	dec00204 	addi	sp,sp,8
    3efc:	f800283a 	ret

00003f00 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3f00:	defffc04 	addi	sp,sp,-16
    3f04:	dfc00315 	stw	ra,12(sp)
    3f08:	df000215 	stw	fp,8(sp)
    3f0c:	dc000115 	stw	r16,4(sp)
    3f10:	df000204 	addi	fp,sp,8
    3f14:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    3f18:	e0bffe17 	ldw	r2,-8(fp)
    3f1c:	108000d0 	cmplti	r2,r2,3
    3f20:	1000111e 	bne	r2,zero,3f68 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    3f24:	04010034 	movhi	r16,1024
    3f28:	84022c04 	addi	r16,r16,2224
    3f2c:	e0bffe17 	ldw	r2,-8(fp)
    3f30:	01400304 	movi	r5,12
    3f34:	1009883a 	mov	r4,r2
    3f38:	00007e40 	call	7e4 <__mulsi3>
    3f3c:	8085883a 	add	r2,r16,r2
    3f40:	10800204 	addi	r2,r2,8
    3f44:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3f48:	04010034 	movhi	r16,1024
    3f4c:	84022c04 	addi	r16,r16,2224
    3f50:	e0bffe17 	ldw	r2,-8(fp)
    3f54:	01400304 	movi	r5,12
    3f58:	1009883a 	mov	r4,r2
    3f5c:	00007e40 	call	7e4 <__mulsi3>
    3f60:	8085883a 	add	r2,r16,r2
    3f64:	10000015 	stw	zero,0(r2)
  }
}
    3f68:	0001883a 	nop
    3f6c:	e6ffff04 	addi	sp,fp,-4
    3f70:	dfc00217 	ldw	ra,8(sp)
    3f74:	df000117 	ldw	fp,4(sp)
    3f78:	dc000017 	ldw	r16,0(sp)
    3f7c:	dec00304 	addi	sp,sp,12
    3f80:	f800283a 	ret

00003f84 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    3f84:	defff904 	addi	sp,sp,-28
    3f88:	df000615 	stw	fp,24(sp)
    3f8c:	df000604 	addi	fp,sp,24
    3f90:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3f94:	0005303a 	rdctl	r2,status
    3f98:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3f9c:	e0fffe17 	ldw	r3,-8(fp)
    3fa0:	00bfff84 	movi	r2,-2
    3fa4:	1884703a 	and	r2,r3,r2
    3fa8:	1001703a 	wrctl	status,r2
  
  return context;
    3fac:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    3fb0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    3fb4:	d0a00a17 	ldw	r2,-32728(gp)
    3fb8:	10c000c4 	addi	r3,r2,3
    3fbc:	00bfff04 	movi	r2,-4
    3fc0:	1884703a 	and	r2,r3,r2
    3fc4:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3fc8:	d0e00a17 	ldw	r3,-32728(gp)
    3fcc:	e0bfff17 	ldw	r2,-4(fp)
    3fd0:	1887883a 	add	r3,r3,r2
    3fd4:	00820034 	movhi	r2,2048
    3fd8:	10800004 	addi	r2,r2,0
    3fdc:	10c0062e 	bgeu	r2,r3,3ff8 <sbrk+0x74>
    3fe0:	e0bffb17 	ldw	r2,-20(fp)
    3fe4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3fe8:	e0bffa17 	ldw	r2,-24(fp)
    3fec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    3ff0:	00bfffc4 	movi	r2,-1
    3ff4:	00000b06 	br	4024 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    3ff8:	d0a00a17 	ldw	r2,-32728(gp)
    3ffc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    4000:	d0e00a17 	ldw	r3,-32728(gp)
    4004:	e0bfff17 	ldw	r2,-4(fp)
    4008:	1885883a 	add	r2,r3,r2
    400c:	d0a00a15 	stw	r2,-32728(gp)
    4010:	e0bffb17 	ldw	r2,-20(fp)
    4014:	e0bffc15 	stw	r2,-16(fp)
    4018:	e0bffc17 	ldw	r2,-16(fp)
    401c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    4020:	e0bffd17 	ldw	r2,-12(fp)
} 
    4024:	e037883a 	mov	sp,fp
    4028:	df000017 	ldw	fp,0(sp)
    402c:	dec00104 	addi	sp,sp,4
    4030:	f800283a 	ret

00004034 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4034:	defffe04 	addi	sp,sp,-8
    4038:	dfc00115 	stw	ra,4(sp)
    403c:	df000015 	stw	fp,0(sp)
    4040:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4044:	d0a00917 	ldw	r2,-32732(gp)
    4048:	10000326 	beq	r2,zero,4058 <alt_get_errno+0x24>
    404c:	d0a00917 	ldw	r2,-32732(gp)
    4050:	103ee83a 	callr	r2
    4054:	00000106 	br	405c <alt_get_errno+0x28>
    4058:	d0a01104 	addi	r2,gp,-32700
}
    405c:	e037883a 	mov	sp,fp
    4060:	dfc00117 	ldw	ra,4(sp)
    4064:	df000017 	ldw	fp,0(sp)
    4068:	dec00204 	addi	sp,sp,8
    406c:	f800283a 	ret

00004070 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4070:	defff904 	addi	sp,sp,-28
    4074:	dfc00615 	stw	ra,24(sp)
    4078:	df000515 	stw	fp,20(sp)
    407c:	df000504 	addi	fp,sp,20
    4080:	e13ffd15 	stw	r4,-12(fp)
    4084:	e17ffe15 	stw	r5,-8(fp)
    4088:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    408c:	e0bffd17 	ldw	r2,-12(fp)
    4090:	10000816 	blt	r2,zero,40b4 <write+0x44>
    4094:	01400304 	movi	r5,12
    4098:	e13ffd17 	ldw	r4,-12(fp)
    409c:	00007e40 	call	7e4 <__mulsi3>
    40a0:	1007883a 	mov	r3,r2
    40a4:	00810034 	movhi	r2,1024
    40a8:	10822c04 	addi	r2,r2,2224
    40ac:	1885883a 	add	r2,r3,r2
    40b0:	00000106 	br	40b8 <write+0x48>
    40b4:	0005883a 	mov	r2,zero
    40b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    40bc:	e0bffb17 	ldw	r2,-20(fp)
    40c0:	10002126 	beq	r2,zero,4148 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    40c4:	e0bffb17 	ldw	r2,-20(fp)
    40c8:	10800217 	ldw	r2,8(r2)
    40cc:	108000cc 	andi	r2,r2,3
    40d0:	10001826 	beq	r2,zero,4134 <write+0xc4>
    40d4:	e0bffb17 	ldw	r2,-20(fp)
    40d8:	10800017 	ldw	r2,0(r2)
    40dc:	10800617 	ldw	r2,24(r2)
    40e0:	10001426 	beq	r2,zero,4134 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    40e4:	e0bffb17 	ldw	r2,-20(fp)
    40e8:	10800017 	ldw	r2,0(r2)
    40ec:	10800617 	ldw	r2,24(r2)
    40f0:	e0ffff17 	ldw	r3,-4(fp)
    40f4:	180d883a 	mov	r6,r3
    40f8:	e17ffe17 	ldw	r5,-8(fp)
    40fc:	e13ffb17 	ldw	r4,-20(fp)
    4100:	103ee83a 	callr	r2
    4104:	e0bffc15 	stw	r2,-16(fp)
    4108:	e0bffc17 	ldw	r2,-16(fp)
    410c:	1000070e 	bge	r2,zero,412c <write+0xbc>
      {
        ALT_ERRNO = -rval;
    4110:	00040340 	call	4034 <alt_get_errno>
    4114:	1007883a 	mov	r3,r2
    4118:	e0bffc17 	ldw	r2,-16(fp)
    411c:	0085c83a 	sub	r2,zero,r2
    4120:	18800015 	stw	r2,0(r3)
        return -1;
    4124:	00bfffc4 	movi	r2,-1
    4128:	00000c06 	br	415c <write+0xec>
      }
      return rval;
    412c:	e0bffc17 	ldw	r2,-16(fp)
    4130:	00000a06 	br	415c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    4134:	00040340 	call	4034 <alt_get_errno>
    4138:	1007883a 	mov	r3,r2
    413c:	00800344 	movi	r2,13
    4140:	18800015 	stw	r2,0(r3)
    4144:	00000406 	br	4158 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    4148:	00040340 	call	4034 <alt_get_errno>
    414c:	1007883a 	mov	r3,r2
    4150:	00801444 	movi	r2,81
    4154:	18800015 	stw	r2,0(r3)
  }
  return -1;
    4158:	00bfffc4 	movi	r2,-1
}
    415c:	e037883a 	mov	sp,fp
    4160:	dfc00117 	ldw	ra,4(sp)
    4164:	df000017 	ldw	fp,0(sp)
    4168:	dec00204 	addi	sp,sp,8
    416c:	f800283a 	ret

00004170 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    4170:	defffd04 	addi	sp,sp,-12
    4174:	dfc00215 	stw	ra,8(sp)
    4178:	df000115 	stw	fp,4(sp)
    417c:	df000104 	addi	fp,sp,4
    4180:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    4184:	d1600604 	addi	r5,gp,-32744
    4188:	e13fff17 	ldw	r4,-4(fp)
    418c:	0004e180 	call	4e18 <alt_dev_llist_insert>
}
    4190:	e037883a 	mov	sp,fp
    4194:	dfc00117 	ldw	ra,4(sp)
    4198:	df000017 	ldw	fp,0(sp)
    419c:	dec00204 	addi	sp,sp,8
    41a0:	f800283a 	ret

000041a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    41a4:	defffd04 	addi	sp,sp,-12
    41a8:	dfc00215 	stw	ra,8(sp)
    41ac:	df000115 	stw	fp,4(sp)
    41b0:	df000104 	addi	fp,sp,4
    41b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    41b8:	00057c40 	call	57c4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    41bc:	00800044 	movi	r2,1
    41c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    41c4:	0001883a 	nop
    41c8:	e037883a 	mov	sp,fp
    41cc:	dfc00117 	ldw	ra,4(sp)
    41d0:	df000017 	ldw	fp,0(sp)
    41d4:	dec00204 	addi	sp,sp,8
    41d8:	f800283a 	ret

000041dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    41dc:	defffe04 	addi	sp,sp,-8
    41e0:	dfc00115 	stw	ra,4(sp)
    41e4:	df000015 	stw	fp,0(sp)
    41e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    41ec:	000d883a 	mov	r6,zero
    41f0:	000b883a 	mov	r5,zero
    41f4:	01010034 	movhi	r4,1024
    41f8:	21029604 	addi	r4,r4,2648
    41fc:	000438c0 	call	438c <altera_avalon_jtag_uart_init>
    4200:	01010034 	movhi	r4,1024
    4204:	21028c04 	addi	r4,r4,2608
    4208:	00041700 	call	4170 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    420c:	0001883a 	nop
}
    4210:	0001883a 	nop
    4214:	e037883a 	mov	sp,fp
    4218:	dfc00117 	ldw	ra,4(sp)
    421c:	df000017 	ldw	fp,0(sp)
    4220:	dec00204 	addi	sp,sp,8
    4224:	f800283a 	ret

00004228 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    4228:	defffa04 	addi	sp,sp,-24
    422c:	dfc00515 	stw	ra,20(sp)
    4230:	df000415 	stw	fp,16(sp)
    4234:	df000404 	addi	fp,sp,16
    4238:	e13ffd15 	stw	r4,-12(fp)
    423c:	e17ffe15 	stw	r5,-8(fp)
    4240:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4244:	e0bffd17 	ldw	r2,-12(fp)
    4248:	10800017 	ldw	r2,0(r2)
    424c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    4250:	e0bffc17 	ldw	r2,-16(fp)
    4254:	10c00a04 	addi	r3,r2,40
    4258:	e0bffd17 	ldw	r2,-12(fp)
    425c:	10800217 	ldw	r2,8(r2)
    4260:	100f883a 	mov	r7,r2
    4264:	e1bfff17 	ldw	r6,-4(fp)
    4268:	e17ffe17 	ldw	r5,-8(fp)
    426c:	1809883a 	mov	r4,r3
    4270:	00048500 	call	4850 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    4274:	e037883a 	mov	sp,fp
    4278:	dfc00117 	ldw	ra,4(sp)
    427c:	df000017 	ldw	fp,0(sp)
    4280:	dec00204 	addi	sp,sp,8
    4284:	f800283a 	ret

00004288 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    4288:	defffa04 	addi	sp,sp,-24
    428c:	dfc00515 	stw	ra,20(sp)
    4290:	df000415 	stw	fp,16(sp)
    4294:	df000404 	addi	fp,sp,16
    4298:	e13ffd15 	stw	r4,-12(fp)
    429c:	e17ffe15 	stw	r5,-8(fp)
    42a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    42a4:	e0bffd17 	ldw	r2,-12(fp)
    42a8:	10800017 	ldw	r2,0(r2)
    42ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    42b0:	e0bffc17 	ldw	r2,-16(fp)
    42b4:	10c00a04 	addi	r3,r2,40
    42b8:	e0bffd17 	ldw	r2,-12(fp)
    42bc:	10800217 	ldw	r2,8(r2)
    42c0:	100f883a 	mov	r7,r2
    42c4:	e1bfff17 	ldw	r6,-4(fp)
    42c8:	e17ffe17 	ldw	r5,-8(fp)
    42cc:	1809883a 	mov	r4,r3
    42d0:	0004a6c0 	call	4a6c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    42d4:	e037883a 	mov	sp,fp
    42d8:	dfc00117 	ldw	ra,4(sp)
    42dc:	df000017 	ldw	fp,0(sp)
    42e0:	dec00204 	addi	sp,sp,8
    42e4:	f800283a 	ret

000042e8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    42e8:	defffc04 	addi	sp,sp,-16
    42ec:	dfc00315 	stw	ra,12(sp)
    42f0:	df000215 	stw	fp,8(sp)
    42f4:	df000204 	addi	fp,sp,8
    42f8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    42fc:	e0bfff17 	ldw	r2,-4(fp)
    4300:	10800017 	ldw	r2,0(r2)
    4304:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    4308:	e0bffe17 	ldw	r2,-8(fp)
    430c:	10c00a04 	addi	r3,r2,40
    4310:	e0bfff17 	ldw	r2,-4(fp)
    4314:	10800217 	ldw	r2,8(r2)
    4318:	100b883a 	mov	r5,r2
    431c:	1809883a 	mov	r4,r3
    4320:	00046f80 	call	46f8 <altera_avalon_jtag_uart_close>
}
    4324:	e037883a 	mov	sp,fp
    4328:	dfc00117 	ldw	ra,4(sp)
    432c:	df000017 	ldw	fp,0(sp)
    4330:	dec00204 	addi	sp,sp,8
    4334:	f800283a 	ret

00004338 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    4338:	defffa04 	addi	sp,sp,-24
    433c:	dfc00515 	stw	ra,20(sp)
    4340:	df000415 	stw	fp,16(sp)
    4344:	df000404 	addi	fp,sp,16
    4348:	e13ffd15 	stw	r4,-12(fp)
    434c:	e17ffe15 	stw	r5,-8(fp)
    4350:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    4354:	e0bffd17 	ldw	r2,-12(fp)
    4358:	10800017 	ldw	r2,0(r2)
    435c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    4360:	e0bffc17 	ldw	r2,-16(fp)
    4364:	10800a04 	addi	r2,r2,40
    4368:	e1bfff17 	ldw	r6,-4(fp)
    436c:	e17ffe17 	ldw	r5,-8(fp)
    4370:	1009883a 	mov	r4,r2
    4374:	00047600 	call	4760 <altera_avalon_jtag_uart_ioctl>
}
    4378:	e037883a 	mov	sp,fp
    437c:	dfc00117 	ldw	ra,4(sp)
    4380:	df000017 	ldw	fp,0(sp)
    4384:	dec00204 	addi	sp,sp,8
    4388:	f800283a 	ret

0000438c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    438c:	defffa04 	addi	sp,sp,-24
    4390:	dfc00515 	stw	ra,20(sp)
    4394:	df000415 	stw	fp,16(sp)
    4398:	df000404 	addi	fp,sp,16
    439c:	e13ffd15 	stw	r4,-12(fp)
    43a0:	e17ffe15 	stw	r5,-8(fp)
    43a4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    43a8:	e0bffd17 	ldw	r2,-12(fp)
    43ac:	00c00044 	movi	r3,1
    43b0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    43b4:	e0bffd17 	ldw	r2,-12(fp)
    43b8:	10800017 	ldw	r2,0(r2)
    43bc:	10800104 	addi	r2,r2,4
    43c0:	1007883a 	mov	r3,r2
    43c4:	e0bffd17 	ldw	r2,-12(fp)
    43c8:	10800817 	ldw	r2,32(r2)
    43cc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    43d0:	e0bffe17 	ldw	r2,-8(fp)
    43d4:	e0ffff17 	ldw	r3,-4(fp)
    43d8:	d8000015 	stw	zero,0(sp)
    43dc:	e1fffd17 	ldw	r7,-12(fp)
    43e0:	01800034 	movhi	r6,0
    43e4:	31911304 	addi	r6,r6,17484
    43e8:	180b883a 	mov	r5,r3
    43ec:	1009883a 	mov	r4,r2
    43f0:	0004f9c0 	call	4f9c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    43f4:	e0bffd17 	ldw	r2,-12(fp)
    43f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    43fc:	e0bffd17 	ldw	r2,-12(fp)
    4400:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    4404:	d0e01617 	ldw	r3,-32680(gp)
    4408:	e1fffd17 	ldw	r7,-12(fp)
    440c:	01800034 	movhi	r6,0
    4410:	31919604 	addi	r6,r6,18008
    4414:	180b883a 	mov	r5,r3
    4418:	1009883a 	mov	r4,r2
    441c:	0004c900 	call	4c90 <alt_alarm_start>
    4420:	1000040e 	bge	r2,zero,4434 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    4424:	e0fffd17 	ldw	r3,-12(fp)
    4428:	00a00034 	movhi	r2,32768
    442c:	10bfffc4 	addi	r2,r2,-1
    4430:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    4434:	0001883a 	nop
    4438:	e037883a 	mov	sp,fp
    443c:	dfc00117 	ldw	ra,4(sp)
    4440:	df000017 	ldw	fp,0(sp)
    4444:	dec00204 	addi	sp,sp,8
    4448:	f800283a 	ret

0000444c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    444c:	defff804 	addi	sp,sp,-32
    4450:	df000715 	stw	fp,28(sp)
    4454:	df000704 	addi	fp,sp,28
    4458:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    445c:	e0bfff17 	ldw	r2,-4(fp)
    4460:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    4464:	e0bffb17 	ldw	r2,-20(fp)
    4468:	10800017 	ldw	r2,0(r2)
    446c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4470:	e0bffc17 	ldw	r2,-16(fp)
    4474:	10800104 	addi	r2,r2,4
    4478:	10800037 	ldwio	r2,0(r2)
    447c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    4480:	e0bffd17 	ldw	r2,-12(fp)
    4484:	1080c00c 	andi	r2,r2,768
    4488:	10006d26 	beq	r2,zero,4640 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    448c:	e0bffd17 	ldw	r2,-12(fp)
    4490:	1080400c 	andi	r2,r2,256
    4494:	10003526 	beq	r2,zero,456c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    4498:	00800074 	movhi	r2,1
    449c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    44a0:	e0bffb17 	ldw	r2,-20(fp)
    44a4:	10800a17 	ldw	r2,40(r2)
    44a8:	10800044 	addi	r2,r2,1
    44ac:	1081ffcc 	andi	r2,r2,2047
    44b0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    44b4:	e0bffb17 	ldw	r2,-20(fp)
    44b8:	10c00b17 	ldw	r3,44(r2)
    44bc:	e0bffe17 	ldw	r2,-8(fp)
    44c0:	18801526 	beq	r3,r2,4518 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    44c4:	e0bffc17 	ldw	r2,-16(fp)
    44c8:	10800037 	ldwio	r2,0(r2)
    44cc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    44d0:	e0bff917 	ldw	r2,-28(fp)
    44d4:	10a0000c 	andi	r2,r2,32768
    44d8:	10001126 	beq	r2,zero,4520 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    44dc:	e0bffb17 	ldw	r2,-20(fp)
    44e0:	10800a17 	ldw	r2,40(r2)
    44e4:	e0fff917 	ldw	r3,-28(fp)
    44e8:	1809883a 	mov	r4,r3
    44ec:	e0fffb17 	ldw	r3,-20(fp)
    44f0:	1885883a 	add	r2,r3,r2
    44f4:	10800e04 	addi	r2,r2,56
    44f8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    44fc:	e0bffb17 	ldw	r2,-20(fp)
    4500:	10800a17 	ldw	r2,40(r2)
    4504:	10800044 	addi	r2,r2,1
    4508:	10c1ffcc 	andi	r3,r2,2047
    450c:	e0bffb17 	ldw	r2,-20(fp)
    4510:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    4514:	003fe206 	br	44a0 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    4518:	0001883a 	nop
    451c:	00000106 	br	4524 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    4520:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    4524:	e0bff917 	ldw	r2,-28(fp)
    4528:	10bfffec 	andhi	r2,r2,65535
    452c:	10000f26 	beq	r2,zero,456c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4530:	e0bffb17 	ldw	r2,-20(fp)
    4534:	10c00817 	ldw	r3,32(r2)
    4538:	00bfff84 	movi	r2,-2
    453c:	1886703a 	and	r3,r3,r2
    4540:	e0bffb17 	ldw	r2,-20(fp)
    4544:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    4548:	e0bffc17 	ldw	r2,-16(fp)
    454c:	10800104 	addi	r2,r2,4
    4550:	1007883a 	mov	r3,r2
    4554:	e0bffb17 	ldw	r2,-20(fp)
    4558:	10800817 	ldw	r2,32(r2)
    455c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4560:	e0bffc17 	ldw	r2,-16(fp)
    4564:	10800104 	addi	r2,r2,4
    4568:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    456c:	e0bffd17 	ldw	r2,-12(fp)
    4570:	1080800c 	andi	r2,r2,512
    4574:	103fbe26 	beq	r2,zero,4470 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    4578:	e0bffd17 	ldw	r2,-12(fp)
    457c:	1004d43a 	srli	r2,r2,16
    4580:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    4584:	00001406 	br	45d8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    4588:	e0bffc17 	ldw	r2,-16(fp)
    458c:	e0fffb17 	ldw	r3,-20(fp)
    4590:	18c00d17 	ldw	r3,52(r3)
    4594:	e13ffb17 	ldw	r4,-20(fp)
    4598:	20c7883a 	add	r3,r4,r3
    459c:	18c20e04 	addi	r3,r3,2104
    45a0:	18c00003 	ldbu	r3,0(r3)
    45a4:	18c03fcc 	andi	r3,r3,255
    45a8:	18c0201c 	xori	r3,r3,128
    45ac:	18ffe004 	addi	r3,r3,-128
    45b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    45b4:	e0bffb17 	ldw	r2,-20(fp)
    45b8:	10800d17 	ldw	r2,52(r2)
    45bc:	10800044 	addi	r2,r2,1
    45c0:	10c1ffcc 	andi	r3,r2,2047
    45c4:	e0bffb17 	ldw	r2,-20(fp)
    45c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    45cc:	e0bffa17 	ldw	r2,-24(fp)
    45d0:	10bfffc4 	addi	r2,r2,-1
    45d4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    45d8:	e0bffa17 	ldw	r2,-24(fp)
    45dc:	10000526 	beq	r2,zero,45f4 <altera_avalon_jtag_uart_irq+0x1a8>
    45e0:	e0bffb17 	ldw	r2,-20(fp)
    45e4:	10c00d17 	ldw	r3,52(r2)
    45e8:	e0bffb17 	ldw	r2,-20(fp)
    45ec:	10800c17 	ldw	r2,48(r2)
    45f0:	18bfe51e 	bne	r3,r2,4588 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    45f4:	e0bffa17 	ldw	r2,-24(fp)
    45f8:	103f9d26 	beq	r2,zero,4470 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    45fc:	e0bffb17 	ldw	r2,-20(fp)
    4600:	10c00817 	ldw	r3,32(r2)
    4604:	00bfff44 	movi	r2,-3
    4608:	1886703a 	and	r3,r3,r2
    460c:	e0bffb17 	ldw	r2,-20(fp)
    4610:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4614:	e0bffb17 	ldw	r2,-20(fp)
    4618:	10800017 	ldw	r2,0(r2)
    461c:	10800104 	addi	r2,r2,4
    4620:	1007883a 	mov	r3,r2
    4624:	e0bffb17 	ldw	r2,-20(fp)
    4628:	10800817 	ldw	r2,32(r2)
    462c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4630:	e0bffc17 	ldw	r2,-16(fp)
    4634:	10800104 	addi	r2,r2,4
    4638:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    463c:	003f8c06 	br	4470 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    4640:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    4644:	0001883a 	nop
    4648:	e037883a 	mov	sp,fp
    464c:	df000017 	ldw	fp,0(sp)
    4650:	dec00104 	addi	sp,sp,4
    4654:	f800283a 	ret

00004658 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    4658:	defff804 	addi	sp,sp,-32
    465c:	df000715 	stw	fp,28(sp)
    4660:	df000704 	addi	fp,sp,28
    4664:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    4668:	e0bffb17 	ldw	r2,-20(fp)
    466c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    4670:	e0bff917 	ldw	r2,-28(fp)
    4674:	10800017 	ldw	r2,0(r2)
    4678:	10800104 	addi	r2,r2,4
    467c:	10800037 	ldwio	r2,0(r2)
    4680:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    4684:	e0bffa17 	ldw	r2,-24(fp)
    4688:	1081000c 	andi	r2,r2,1024
    468c:	10000b26 	beq	r2,zero,46bc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    4690:	e0bff917 	ldw	r2,-28(fp)
    4694:	10800017 	ldw	r2,0(r2)
    4698:	10800104 	addi	r2,r2,4
    469c:	1007883a 	mov	r3,r2
    46a0:	e0bff917 	ldw	r2,-28(fp)
    46a4:	10800817 	ldw	r2,32(r2)
    46a8:	10810014 	ori	r2,r2,1024
    46ac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    46b0:	e0bff917 	ldw	r2,-28(fp)
    46b4:	10000915 	stw	zero,36(r2)
    46b8:	00000a06 	br	46e4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    46bc:	e0bff917 	ldw	r2,-28(fp)
    46c0:	10c00917 	ldw	r3,36(r2)
    46c4:	00a00034 	movhi	r2,32768
    46c8:	10bfff04 	addi	r2,r2,-4
    46cc:	10c00536 	bltu	r2,r3,46e4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    46d0:	e0bff917 	ldw	r2,-28(fp)
    46d4:	10800917 	ldw	r2,36(r2)
    46d8:	10c00044 	addi	r3,r2,1
    46dc:	e0bff917 	ldw	r2,-28(fp)
    46e0:	10c00915 	stw	r3,36(r2)
    46e4:	d0a01617 	ldw	r2,-32680(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    46e8:	e037883a 	mov	sp,fp
    46ec:	df000017 	ldw	fp,0(sp)
    46f0:	dec00104 	addi	sp,sp,4
    46f4:	f800283a 	ret

000046f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    46f8:	defffd04 	addi	sp,sp,-12
    46fc:	df000215 	stw	fp,8(sp)
    4700:	df000204 	addi	fp,sp,8
    4704:	e13ffe15 	stw	r4,-8(fp)
    4708:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    470c:	00000506 	br	4724 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    4710:	e0bfff17 	ldw	r2,-4(fp)
    4714:	1090000c 	andi	r2,r2,16384
    4718:	10000226 	beq	r2,zero,4724 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    471c:	00bffd44 	movi	r2,-11
    4720:	00000b06 	br	4750 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4724:	e0bffe17 	ldw	r2,-8(fp)
    4728:	10c00d17 	ldw	r3,52(r2)
    472c:	e0bffe17 	ldw	r2,-8(fp)
    4730:	10800c17 	ldw	r2,48(r2)
    4734:	18800526 	beq	r3,r2,474c <altera_avalon_jtag_uart_close+0x54>
    4738:	e0bffe17 	ldw	r2,-8(fp)
    473c:	10c00917 	ldw	r3,36(r2)
    4740:	e0bffe17 	ldw	r2,-8(fp)
    4744:	10800117 	ldw	r2,4(r2)
    4748:	18bff136 	bltu	r3,r2,4710 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    474c:	0005883a 	mov	r2,zero
}
    4750:	e037883a 	mov	sp,fp
    4754:	df000017 	ldw	fp,0(sp)
    4758:	dec00104 	addi	sp,sp,4
    475c:	f800283a 	ret

00004760 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    4760:	defffa04 	addi	sp,sp,-24
    4764:	df000515 	stw	fp,20(sp)
    4768:	df000504 	addi	fp,sp,20
    476c:	e13ffd15 	stw	r4,-12(fp)
    4770:	e17ffe15 	stw	r5,-8(fp)
    4774:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    4778:	00bff9c4 	movi	r2,-25
    477c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    4780:	e0bffe17 	ldw	r2,-8(fp)
    4784:	10da8060 	cmpeqi	r3,r2,27137
    4788:	1800031e 	bne	r3,zero,4798 <altera_avalon_jtag_uart_ioctl+0x38>
    478c:	109a80a0 	cmpeqi	r2,r2,27138
    4790:	1000181e 	bne	r2,zero,47f4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    4794:	00002906 	br	483c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    4798:	e0bffd17 	ldw	r2,-12(fp)
    479c:	10c00117 	ldw	r3,4(r2)
    47a0:	00a00034 	movhi	r2,32768
    47a4:	10bfffc4 	addi	r2,r2,-1
    47a8:	18802126 	beq	r3,r2,4830 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    47ac:	e0bfff17 	ldw	r2,-4(fp)
    47b0:	10800017 	ldw	r2,0(r2)
    47b4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    47b8:	e0bffc17 	ldw	r2,-16(fp)
    47bc:	10800090 	cmplti	r2,r2,2
    47c0:	1000061e 	bne	r2,zero,47dc <altera_avalon_jtag_uart_ioctl+0x7c>
    47c4:	e0fffc17 	ldw	r3,-16(fp)
    47c8:	00a00034 	movhi	r2,32768
    47cc:	10bfffc4 	addi	r2,r2,-1
    47d0:	18800226 	beq	r3,r2,47dc <altera_avalon_jtag_uart_ioctl+0x7c>
    47d4:	e0bffc17 	ldw	r2,-16(fp)
    47d8:	00000206 	br	47e4 <altera_avalon_jtag_uart_ioctl+0x84>
    47dc:	00a00034 	movhi	r2,32768
    47e0:	10bfff84 	addi	r2,r2,-2
    47e4:	e0fffd17 	ldw	r3,-12(fp)
    47e8:	18800115 	stw	r2,4(r3)
      rc = 0;
    47ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    47f0:	00000f06 	br	4830 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    47f4:	e0bffd17 	ldw	r2,-12(fp)
    47f8:	10c00117 	ldw	r3,4(r2)
    47fc:	00a00034 	movhi	r2,32768
    4800:	10bfffc4 	addi	r2,r2,-1
    4804:	18800c26 	beq	r3,r2,4838 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    4808:	e0bffd17 	ldw	r2,-12(fp)
    480c:	10c00917 	ldw	r3,36(r2)
    4810:	e0bffd17 	ldw	r2,-12(fp)
    4814:	10800117 	ldw	r2,4(r2)
    4818:	1885803a 	cmpltu	r2,r3,r2
    481c:	10c03fcc 	andi	r3,r2,255
    4820:	e0bfff17 	ldw	r2,-4(fp)
    4824:	10c00015 	stw	r3,0(r2)
      rc = 0;
    4828:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    482c:	00000206 	br	4838 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    4830:	0001883a 	nop
    4834:	00000106 	br	483c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    4838:	0001883a 	nop

  default:
    break;
  }

  return rc;
    483c:	e0bffb17 	ldw	r2,-20(fp)
}
    4840:	e037883a 	mov	sp,fp
    4844:	df000017 	ldw	fp,0(sp)
    4848:	dec00104 	addi	sp,sp,4
    484c:	f800283a 	ret

00004850 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    4850:	defff304 	addi	sp,sp,-52
    4854:	dfc00c15 	stw	ra,48(sp)
    4858:	df000b15 	stw	fp,44(sp)
    485c:	df000b04 	addi	fp,sp,44
    4860:	e13ffc15 	stw	r4,-16(fp)
    4864:	e17ffd15 	stw	r5,-12(fp)
    4868:	e1bffe15 	stw	r6,-8(fp)
    486c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    4870:	e0bffd17 	ldw	r2,-12(fp)
    4874:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4878:	00004706 	br	4998 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    487c:	e0bffc17 	ldw	r2,-16(fp)
    4880:	10800a17 	ldw	r2,40(r2)
    4884:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    4888:	e0bffc17 	ldw	r2,-16(fp)
    488c:	10800b17 	ldw	r2,44(r2)
    4890:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    4894:	e0fff717 	ldw	r3,-36(fp)
    4898:	e0bff817 	ldw	r2,-32(fp)
    489c:	18800536 	bltu	r3,r2,48b4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    48a0:	e0fff717 	ldw	r3,-36(fp)
    48a4:	e0bff817 	ldw	r2,-32(fp)
    48a8:	1885c83a 	sub	r2,r3,r2
    48ac:	e0bff615 	stw	r2,-40(fp)
    48b0:	00000406 	br	48c4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    48b4:	00c20004 	movi	r3,2048
    48b8:	e0bff817 	ldw	r2,-32(fp)
    48bc:	1885c83a 	sub	r2,r3,r2
    48c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    48c4:	e0bff617 	ldw	r2,-40(fp)
    48c8:	10001e26 	beq	r2,zero,4944 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    48cc:	e0fffe17 	ldw	r3,-8(fp)
    48d0:	e0bff617 	ldw	r2,-40(fp)
    48d4:	1880022e 	bgeu	r3,r2,48e0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    48d8:	e0bffe17 	ldw	r2,-8(fp)
    48dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    48e0:	e0bffc17 	ldw	r2,-16(fp)
    48e4:	10c00e04 	addi	r3,r2,56
    48e8:	e0bff817 	ldw	r2,-32(fp)
    48ec:	1885883a 	add	r2,r3,r2
    48f0:	e1bff617 	ldw	r6,-40(fp)
    48f4:	100b883a 	mov	r5,r2
    48f8:	e13ff517 	ldw	r4,-44(fp)
    48fc:	0001e200 	call	1e20 <memcpy>
      ptr   += n;
    4900:	e0fff517 	ldw	r3,-44(fp)
    4904:	e0bff617 	ldw	r2,-40(fp)
    4908:	1885883a 	add	r2,r3,r2
    490c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    4910:	e0fffe17 	ldw	r3,-8(fp)
    4914:	e0bff617 	ldw	r2,-40(fp)
    4918:	1885c83a 	sub	r2,r3,r2
    491c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4920:	e0fff817 	ldw	r3,-32(fp)
    4924:	e0bff617 	ldw	r2,-40(fp)
    4928:	1885883a 	add	r2,r3,r2
    492c:	10c1ffcc 	andi	r3,r2,2047
    4930:	e0bffc17 	ldw	r2,-16(fp)
    4934:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    4938:	e0bffe17 	ldw	r2,-8(fp)
    493c:	00bfcf16 	blt	zero,r2,487c <altera_avalon_jtag_uart_read+0x2c>
    4940:	00000106 	br	4948 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    4944:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    4948:	e0fff517 	ldw	r3,-44(fp)
    494c:	e0bffd17 	ldw	r2,-12(fp)
    4950:	1880141e 	bne	r3,r2,49a4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    4954:	e0bfff17 	ldw	r2,-4(fp)
    4958:	1090000c 	andi	r2,r2,16384
    495c:	1000131e 	bne	r2,zero,49ac <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    4960:	0001883a 	nop
    4964:	e0bffc17 	ldw	r2,-16(fp)
    4968:	10c00a17 	ldw	r3,40(r2)
    496c:	e0bff717 	ldw	r2,-36(fp)
    4970:	1880051e 	bne	r3,r2,4988 <altera_avalon_jtag_uart_read+0x138>
    4974:	e0bffc17 	ldw	r2,-16(fp)
    4978:	10c00917 	ldw	r3,36(r2)
    497c:	e0bffc17 	ldw	r2,-16(fp)
    4980:	10800117 	ldw	r2,4(r2)
    4984:	18bff736 	bltu	r3,r2,4964 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    4988:	e0bffc17 	ldw	r2,-16(fp)
    498c:	10c00a17 	ldw	r3,40(r2)
    4990:	e0bff717 	ldw	r2,-36(fp)
    4994:	18800726 	beq	r3,r2,49b4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4998:	e0bffe17 	ldw	r2,-8(fp)
    499c:	00bfb716 	blt	zero,r2,487c <altera_avalon_jtag_uart_read+0x2c>
    49a0:	00000506 	br	49b8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    49a4:	0001883a 	nop
    49a8:	00000306 	br	49b8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    49ac:	0001883a 	nop
    49b0:	00000106 	br	49b8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    49b4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    49b8:	e0fff517 	ldw	r3,-44(fp)
    49bc:	e0bffd17 	ldw	r2,-12(fp)
    49c0:	18801826 	beq	r3,r2,4a24 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    49c4:	0005303a 	rdctl	r2,status
    49c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    49cc:	e0fffb17 	ldw	r3,-20(fp)
    49d0:	00bfff84 	movi	r2,-2
    49d4:	1884703a 	and	r2,r3,r2
    49d8:	1001703a 	wrctl	status,r2
  
  return context;
    49dc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    49e0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    49e4:	e0bffc17 	ldw	r2,-16(fp)
    49e8:	10800817 	ldw	r2,32(r2)
    49ec:	10c00054 	ori	r3,r2,1
    49f0:	e0bffc17 	ldw	r2,-16(fp)
    49f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    49f8:	e0bffc17 	ldw	r2,-16(fp)
    49fc:	10800017 	ldw	r2,0(r2)
    4a00:	10800104 	addi	r2,r2,4
    4a04:	1007883a 	mov	r3,r2
    4a08:	e0bffc17 	ldw	r2,-16(fp)
    4a0c:	10800817 	ldw	r2,32(r2)
    4a10:	18800035 	stwio	r2,0(r3)
    4a14:	e0bffa17 	ldw	r2,-24(fp)
    4a18:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4a1c:	e0bff917 	ldw	r2,-28(fp)
    4a20:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    4a24:	e0fff517 	ldw	r3,-44(fp)
    4a28:	e0bffd17 	ldw	r2,-12(fp)
    4a2c:	18800426 	beq	r3,r2,4a40 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    4a30:	e0fff517 	ldw	r3,-44(fp)
    4a34:	e0bffd17 	ldw	r2,-12(fp)
    4a38:	1885c83a 	sub	r2,r3,r2
    4a3c:	00000606 	br	4a58 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    4a40:	e0bfff17 	ldw	r2,-4(fp)
    4a44:	1090000c 	andi	r2,r2,16384
    4a48:	10000226 	beq	r2,zero,4a54 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    4a4c:	00bffd44 	movi	r2,-11
    4a50:	00000106 	br	4a58 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    4a54:	00bffec4 	movi	r2,-5
}
    4a58:	e037883a 	mov	sp,fp
    4a5c:	dfc00117 	ldw	ra,4(sp)
    4a60:	df000017 	ldw	fp,0(sp)
    4a64:	dec00204 	addi	sp,sp,8
    4a68:	f800283a 	ret

00004a6c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4a6c:	defff304 	addi	sp,sp,-52
    4a70:	dfc00c15 	stw	ra,48(sp)
    4a74:	df000b15 	stw	fp,44(sp)
    4a78:	df000b04 	addi	fp,sp,44
    4a7c:	e13ffc15 	stw	r4,-16(fp)
    4a80:	e17ffd15 	stw	r5,-12(fp)
    4a84:	e1bffe15 	stw	r6,-8(fp)
    4a88:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    4a8c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    4a90:	e0bffd17 	ldw	r2,-12(fp)
    4a94:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4a98:	00003706 	br	4b78 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    4a9c:	e0bffc17 	ldw	r2,-16(fp)
    4aa0:	10800c17 	ldw	r2,48(r2)
    4aa4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    4aa8:	e0bffc17 	ldw	r2,-16(fp)
    4aac:	10800d17 	ldw	r2,52(r2)
    4ab0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    4ab4:	e0fff917 	ldw	r3,-28(fp)
    4ab8:	e0bff517 	ldw	r2,-44(fp)
    4abc:	1880062e 	bgeu	r3,r2,4ad8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    4ac0:	e0fff517 	ldw	r3,-44(fp)
    4ac4:	e0bff917 	ldw	r2,-28(fp)
    4ac8:	1885c83a 	sub	r2,r3,r2
    4acc:	10bfffc4 	addi	r2,r2,-1
    4ad0:	e0bff615 	stw	r2,-40(fp)
    4ad4:	00000b06 	br	4b04 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    4ad8:	e0bff517 	ldw	r2,-44(fp)
    4adc:	10000526 	beq	r2,zero,4af4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    4ae0:	00c20004 	movi	r3,2048
    4ae4:	e0bff917 	ldw	r2,-28(fp)
    4ae8:	1885c83a 	sub	r2,r3,r2
    4aec:	e0bff615 	stw	r2,-40(fp)
    4af0:	00000406 	br	4b04 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    4af4:	00c1ffc4 	movi	r3,2047
    4af8:	e0bff917 	ldw	r2,-28(fp)
    4afc:	1885c83a 	sub	r2,r3,r2
    4b00:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    4b04:	e0bff617 	ldw	r2,-40(fp)
    4b08:	10001e26 	beq	r2,zero,4b84 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    4b0c:	e0fffe17 	ldw	r3,-8(fp)
    4b10:	e0bff617 	ldw	r2,-40(fp)
    4b14:	1880022e 	bgeu	r3,r2,4b20 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    4b18:	e0bffe17 	ldw	r2,-8(fp)
    4b1c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    4b20:	e0bffc17 	ldw	r2,-16(fp)
    4b24:	10c20e04 	addi	r3,r2,2104
    4b28:	e0bff917 	ldw	r2,-28(fp)
    4b2c:	1885883a 	add	r2,r3,r2
    4b30:	e1bff617 	ldw	r6,-40(fp)
    4b34:	e17ffd17 	ldw	r5,-12(fp)
    4b38:	1009883a 	mov	r4,r2
    4b3c:	0001e200 	call	1e20 <memcpy>
      ptr   += n;
    4b40:	e0fffd17 	ldw	r3,-12(fp)
    4b44:	e0bff617 	ldw	r2,-40(fp)
    4b48:	1885883a 	add	r2,r3,r2
    4b4c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    4b50:	e0fffe17 	ldw	r3,-8(fp)
    4b54:	e0bff617 	ldw	r2,-40(fp)
    4b58:	1885c83a 	sub	r2,r3,r2
    4b5c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4b60:	e0fff917 	ldw	r3,-28(fp)
    4b64:	e0bff617 	ldw	r2,-40(fp)
    4b68:	1885883a 	add	r2,r3,r2
    4b6c:	10c1ffcc 	andi	r3,r2,2047
    4b70:	e0bffc17 	ldw	r2,-16(fp)
    4b74:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4b78:	e0bffe17 	ldw	r2,-8(fp)
    4b7c:	00bfc716 	blt	zero,r2,4a9c <altera_avalon_jtag_uart_write+0x30>
    4b80:	00000106 	br	4b88 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    4b84:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4b88:	0005303a 	rdctl	r2,status
    4b8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4b90:	e0fffb17 	ldw	r3,-20(fp)
    4b94:	00bfff84 	movi	r2,-2
    4b98:	1884703a 	and	r2,r3,r2
    4b9c:	1001703a 	wrctl	status,r2
  
  return context;
    4ba0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    4ba4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4ba8:	e0bffc17 	ldw	r2,-16(fp)
    4bac:	10800817 	ldw	r2,32(r2)
    4bb0:	10c00094 	ori	r3,r2,2
    4bb4:	e0bffc17 	ldw	r2,-16(fp)
    4bb8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4bbc:	e0bffc17 	ldw	r2,-16(fp)
    4bc0:	10800017 	ldw	r2,0(r2)
    4bc4:	10800104 	addi	r2,r2,4
    4bc8:	1007883a 	mov	r3,r2
    4bcc:	e0bffc17 	ldw	r2,-16(fp)
    4bd0:	10800817 	ldw	r2,32(r2)
    4bd4:	18800035 	stwio	r2,0(r3)
    4bd8:	e0bffa17 	ldw	r2,-24(fp)
    4bdc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4be0:	e0bff817 	ldw	r2,-32(fp)
    4be4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    4be8:	e0bffe17 	ldw	r2,-8(fp)
    4bec:	0080100e 	bge	zero,r2,4c30 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    4bf0:	e0bfff17 	ldw	r2,-4(fp)
    4bf4:	1090000c 	andi	r2,r2,16384
    4bf8:	1000101e 	bne	r2,zero,4c3c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    4bfc:	0001883a 	nop
    4c00:	e0bffc17 	ldw	r2,-16(fp)
    4c04:	10c00d17 	ldw	r3,52(r2)
    4c08:	e0bff517 	ldw	r2,-44(fp)
    4c0c:	1880051e 	bne	r3,r2,4c24 <altera_avalon_jtag_uart_write+0x1b8>
    4c10:	e0bffc17 	ldw	r2,-16(fp)
    4c14:	10c00917 	ldw	r3,36(r2)
    4c18:	e0bffc17 	ldw	r2,-16(fp)
    4c1c:	10800117 	ldw	r2,4(r2)
    4c20:	18bff736 	bltu	r3,r2,4c00 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    4c24:	e0bffc17 	ldw	r2,-16(fp)
    4c28:	10800917 	ldw	r2,36(r2)
    4c2c:	1000051e 	bne	r2,zero,4c44 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    4c30:	e0bffe17 	ldw	r2,-8(fp)
    4c34:	00bfd016 	blt	zero,r2,4b78 <altera_avalon_jtag_uart_write+0x10c>
    4c38:	00000306 	br	4c48 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    4c3c:	0001883a 	nop
    4c40:	00000106 	br	4c48 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    4c44:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    4c48:	e0fffd17 	ldw	r3,-12(fp)
    4c4c:	e0bff717 	ldw	r2,-36(fp)
    4c50:	18800426 	beq	r3,r2,4c64 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    4c54:	e0fffd17 	ldw	r3,-12(fp)
    4c58:	e0bff717 	ldw	r2,-36(fp)
    4c5c:	1885c83a 	sub	r2,r3,r2
    4c60:	00000606 	br	4c7c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    4c64:	e0bfff17 	ldw	r2,-4(fp)
    4c68:	1090000c 	andi	r2,r2,16384
    4c6c:	10000226 	beq	r2,zero,4c78 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    4c70:	00bffd44 	movi	r2,-11
    4c74:	00000106 	br	4c7c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    4c78:	00bffec4 	movi	r2,-5
}
    4c7c:	e037883a 	mov	sp,fp
    4c80:	dfc00117 	ldw	ra,4(sp)
    4c84:	df000017 	ldw	fp,0(sp)
    4c88:	dec00204 	addi	sp,sp,8
    4c8c:	f800283a 	ret

00004c90 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    4c90:	defff504 	addi	sp,sp,-44
    4c94:	df000a15 	stw	fp,40(sp)
    4c98:	df000a04 	addi	fp,sp,40
    4c9c:	e13ffc15 	stw	r4,-16(fp)
    4ca0:	e17ffd15 	stw	r5,-12(fp)
    4ca4:	e1bffe15 	stw	r6,-8(fp)
    4ca8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    4cac:	e03ff615 	stw	zero,-40(fp)
    4cb0:	d0a01617 	ldw	r2,-32680(gp)
  
  if (alt_ticks_per_second ())
    4cb4:	10003c26 	beq	r2,zero,4da8 <alt_alarm_start+0x118>
  {
    if (alarm)
    4cb8:	e0bffc17 	ldw	r2,-16(fp)
    4cbc:	10003826 	beq	r2,zero,4da0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    4cc0:	e0bffc17 	ldw	r2,-16(fp)
    4cc4:	e0fffe17 	ldw	r3,-8(fp)
    4cc8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    4ccc:	e0bffc17 	ldw	r2,-16(fp)
    4cd0:	e0ffff17 	ldw	r3,-4(fp)
    4cd4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4cd8:	0005303a 	rdctl	r2,status
    4cdc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4ce0:	e0fff917 	ldw	r3,-28(fp)
    4ce4:	00bfff84 	movi	r2,-2
    4ce8:	1884703a 	and	r2,r3,r2
    4cec:	1001703a 	wrctl	status,r2
  
  return context;
    4cf0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    4cf4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    4cf8:	d0a01717 	ldw	r2,-32676(gp)
      
      current_nticks = alt_nticks();
    4cfc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    4d00:	e0fffd17 	ldw	r3,-12(fp)
    4d04:	e0bff617 	ldw	r2,-40(fp)
    4d08:	1885883a 	add	r2,r3,r2
    4d0c:	10c00044 	addi	r3,r2,1
    4d10:	e0bffc17 	ldw	r2,-16(fp)
    4d14:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    4d18:	e0bffc17 	ldw	r2,-16(fp)
    4d1c:	10c00217 	ldw	r3,8(r2)
    4d20:	e0bff617 	ldw	r2,-40(fp)
    4d24:	1880042e 	bgeu	r3,r2,4d38 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    4d28:	e0bffc17 	ldw	r2,-16(fp)
    4d2c:	00c00044 	movi	r3,1
    4d30:	10c00405 	stb	r3,16(r2)
    4d34:	00000206 	br	4d40 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    4d38:	e0bffc17 	ldw	r2,-16(fp)
    4d3c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    4d40:	e0bffc17 	ldw	r2,-16(fp)
    4d44:	d0e00c04 	addi	r3,gp,-32720
    4d48:	e0fffa15 	stw	r3,-24(fp)
    4d4c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    4d50:	e0bffb17 	ldw	r2,-20(fp)
    4d54:	e0fffa17 	ldw	r3,-24(fp)
    4d58:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    4d5c:	e0bffa17 	ldw	r2,-24(fp)
    4d60:	10c00017 	ldw	r3,0(r2)
    4d64:	e0bffb17 	ldw	r2,-20(fp)
    4d68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    4d6c:	e0bffa17 	ldw	r2,-24(fp)
    4d70:	10800017 	ldw	r2,0(r2)
    4d74:	e0fffb17 	ldw	r3,-20(fp)
    4d78:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    4d7c:	e0bffa17 	ldw	r2,-24(fp)
    4d80:	e0fffb17 	ldw	r3,-20(fp)
    4d84:	10c00015 	stw	r3,0(r2)
    4d88:	e0bff817 	ldw	r2,-32(fp)
    4d8c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4d90:	e0bff717 	ldw	r2,-36(fp)
    4d94:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    4d98:	0005883a 	mov	r2,zero
    4d9c:	00000306 	br	4dac <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    4da0:	00bffa84 	movi	r2,-22
    4da4:	00000106 	br	4dac <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    4da8:	00bfde84 	movi	r2,-134
  }
}
    4dac:	e037883a 	mov	sp,fp
    4db0:	df000017 	ldw	fp,0(sp)
    4db4:	dec00104 	addi	sp,sp,4
    4db8:	f800283a 	ret

00004dbc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4dbc:	deffff04 	addi	sp,sp,-4
    4dc0:	df000015 	stw	fp,0(sp)
    4dc4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4dc8:	0001883a 	nop
    4dcc:	e037883a 	mov	sp,fp
    4dd0:	df000017 	ldw	fp,0(sp)
    4dd4:	dec00104 	addi	sp,sp,4
    4dd8:	f800283a 	ret

00004ddc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4ddc:	defffe04 	addi	sp,sp,-8
    4de0:	dfc00115 	stw	ra,4(sp)
    4de4:	df000015 	stw	fp,0(sp)
    4de8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4dec:	d0a00917 	ldw	r2,-32732(gp)
    4df0:	10000326 	beq	r2,zero,4e00 <alt_get_errno+0x24>
    4df4:	d0a00917 	ldw	r2,-32732(gp)
    4df8:	103ee83a 	callr	r2
    4dfc:	00000106 	br	4e04 <alt_get_errno+0x28>
    4e00:	d0a01104 	addi	r2,gp,-32700
}
    4e04:	e037883a 	mov	sp,fp
    4e08:	dfc00117 	ldw	ra,4(sp)
    4e0c:	df000017 	ldw	fp,0(sp)
    4e10:	dec00204 	addi	sp,sp,8
    4e14:	f800283a 	ret

00004e18 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    4e18:	defffa04 	addi	sp,sp,-24
    4e1c:	dfc00515 	stw	ra,20(sp)
    4e20:	df000415 	stw	fp,16(sp)
    4e24:	df000404 	addi	fp,sp,16
    4e28:	e13ffe15 	stw	r4,-8(fp)
    4e2c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    4e30:	e0bffe17 	ldw	r2,-8(fp)
    4e34:	10000326 	beq	r2,zero,4e44 <alt_dev_llist_insert+0x2c>
    4e38:	e0bffe17 	ldw	r2,-8(fp)
    4e3c:	10800217 	ldw	r2,8(r2)
    4e40:	1000061e 	bne	r2,zero,4e5c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    4e44:	0004ddc0 	call	4ddc <alt_get_errno>
    4e48:	1007883a 	mov	r3,r2
    4e4c:	00800584 	movi	r2,22
    4e50:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    4e54:	00bffa84 	movi	r2,-22
    4e58:	00001306 	br	4ea8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    4e5c:	e0bffe17 	ldw	r2,-8(fp)
    4e60:	e0ffff17 	ldw	r3,-4(fp)
    4e64:	e0fffc15 	stw	r3,-16(fp)
    4e68:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    4e6c:	e0bffd17 	ldw	r2,-12(fp)
    4e70:	e0fffc17 	ldw	r3,-16(fp)
    4e74:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    4e78:	e0bffc17 	ldw	r2,-16(fp)
    4e7c:	10c00017 	ldw	r3,0(r2)
    4e80:	e0bffd17 	ldw	r2,-12(fp)
    4e84:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    4e88:	e0bffc17 	ldw	r2,-16(fp)
    4e8c:	10800017 	ldw	r2,0(r2)
    4e90:	e0fffd17 	ldw	r3,-12(fp)
    4e94:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    4e98:	e0bffc17 	ldw	r2,-16(fp)
    4e9c:	e0fffd17 	ldw	r3,-12(fp)
    4ea0:	10c00015 	stw	r3,0(r2)

  return 0;  
    4ea4:	0005883a 	mov	r2,zero
}
    4ea8:	e037883a 	mov	sp,fp
    4eac:	dfc00117 	ldw	ra,4(sp)
    4eb0:	df000017 	ldw	fp,0(sp)
    4eb4:	dec00204 	addi	sp,sp,8
    4eb8:	f800283a 	ret

00004ebc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    4ebc:	defffd04 	addi	sp,sp,-12
    4ec0:	dfc00215 	stw	ra,8(sp)
    4ec4:	df000115 	stw	fp,4(sp)
    4ec8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4ecc:	00800034 	movhi	r2,0
    4ed0:	10972104 	addi	r2,r2,23684
    4ed4:	e0bfff15 	stw	r2,-4(fp)
    4ed8:	00000606 	br	4ef4 <_do_ctors+0x38>
        (*ctor) (); 
    4edc:	e0bfff17 	ldw	r2,-4(fp)
    4ee0:	10800017 	ldw	r2,0(r2)
    4ee4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4ee8:	e0bfff17 	ldw	r2,-4(fp)
    4eec:	10bfff04 	addi	r2,r2,-4
    4ef0:	e0bfff15 	stw	r2,-4(fp)
    4ef4:	e0ffff17 	ldw	r3,-4(fp)
    4ef8:	00800034 	movhi	r2,0
    4efc:	10972204 	addi	r2,r2,23688
    4f00:	18bff62e 	bgeu	r3,r2,4edc <_do_ctors+0x20>
        (*ctor) (); 
}
    4f04:	0001883a 	nop
    4f08:	e037883a 	mov	sp,fp
    4f0c:	dfc00117 	ldw	ra,4(sp)
    4f10:	df000017 	ldw	fp,0(sp)
    4f14:	dec00204 	addi	sp,sp,8
    4f18:	f800283a 	ret

00004f1c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    4f1c:	defffd04 	addi	sp,sp,-12
    4f20:	dfc00215 	stw	ra,8(sp)
    4f24:	df000115 	stw	fp,4(sp)
    4f28:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4f2c:	00800034 	movhi	r2,0
    4f30:	10972104 	addi	r2,r2,23684
    4f34:	e0bfff15 	stw	r2,-4(fp)
    4f38:	00000606 	br	4f54 <_do_dtors+0x38>
        (*dtor) (); 
    4f3c:	e0bfff17 	ldw	r2,-4(fp)
    4f40:	10800017 	ldw	r2,0(r2)
    4f44:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4f48:	e0bfff17 	ldw	r2,-4(fp)
    4f4c:	10bfff04 	addi	r2,r2,-4
    4f50:	e0bfff15 	stw	r2,-4(fp)
    4f54:	e0ffff17 	ldw	r3,-4(fp)
    4f58:	00800034 	movhi	r2,0
    4f5c:	10972204 	addi	r2,r2,23688
    4f60:	18bff62e 	bgeu	r3,r2,4f3c <_do_dtors+0x20>
        (*dtor) (); 
}
    4f64:	0001883a 	nop
    4f68:	e037883a 	mov	sp,fp
    4f6c:	dfc00117 	ldw	ra,4(sp)
    4f70:	df000017 	ldw	fp,0(sp)
    4f74:	dec00204 	addi	sp,sp,8
    4f78:	f800283a 	ret

00004f7c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4f7c:	deffff04 	addi	sp,sp,-4
    4f80:	df000015 	stw	fp,0(sp)
    4f84:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    4f88:	0001883a 	nop
    4f8c:	e037883a 	mov	sp,fp
    4f90:	df000017 	ldw	fp,0(sp)
    4f94:	dec00104 	addi	sp,sp,4
    4f98:	f800283a 	ret

00004f9c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4f9c:	defff904 	addi	sp,sp,-28
    4fa0:	dfc00615 	stw	ra,24(sp)
    4fa4:	df000515 	stw	fp,20(sp)
    4fa8:	df000504 	addi	fp,sp,20
    4fac:	e13ffc15 	stw	r4,-16(fp)
    4fb0:	e17ffd15 	stw	r5,-12(fp)
    4fb4:	e1bffe15 	stw	r6,-8(fp)
    4fb8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    4fbc:	e0800217 	ldw	r2,8(fp)
    4fc0:	d8800015 	stw	r2,0(sp)
    4fc4:	e1ffff17 	ldw	r7,-4(fp)
    4fc8:	e1bffe17 	ldw	r6,-8(fp)
    4fcc:	e17ffd17 	ldw	r5,-12(fp)
    4fd0:	e13ffc17 	ldw	r4,-16(fp)
    4fd4:	000514c0 	call	514c <alt_iic_isr_register>
}  
    4fd8:	e037883a 	mov	sp,fp
    4fdc:	dfc00117 	ldw	ra,4(sp)
    4fe0:	df000017 	ldw	fp,0(sp)
    4fe4:	dec00204 	addi	sp,sp,8
    4fe8:	f800283a 	ret

00004fec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    4fec:	defff904 	addi	sp,sp,-28
    4ff0:	df000615 	stw	fp,24(sp)
    4ff4:	df000604 	addi	fp,sp,24
    4ff8:	e13ffe15 	stw	r4,-8(fp)
    4ffc:	e17fff15 	stw	r5,-4(fp)
    5000:	e0bfff17 	ldw	r2,-4(fp)
    5004:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5008:	0005303a 	rdctl	r2,status
    500c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5010:	e0fffb17 	ldw	r3,-20(fp)
    5014:	00bfff84 	movi	r2,-2
    5018:	1884703a 	and	r2,r3,r2
    501c:	1001703a 	wrctl	status,r2
  
  return context;
    5020:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5024:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    5028:	00c00044 	movi	r3,1
    502c:	e0bffa17 	ldw	r2,-24(fp)
    5030:	1884983a 	sll	r2,r3,r2
    5034:	1007883a 	mov	r3,r2
    5038:	d0a01517 	ldw	r2,-32684(gp)
    503c:	1884b03a 	or	r2,r3,r2
    5040:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5044:	d0a01517 	ldw	r2,-32684(gp)
    5048:	100170fa 	wrctl	ienable,r2
    504c:	e0bffc17 	ldw	r2,-16(fp)
    5050:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5054:	e0bffd17 	ldw	r2,-12(fp)
    5058:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    505c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    5060:	0001883a 	nop
}
    5064:	e037883a 	mov	sp,fp
    5068:	df000017 	ldw	fp,0(sp)
    506c:	dec00104 	addi	sp,sp,4
    5070:	f800283a 	ret

00005074 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    5074:	defff904 	addi	sp,sp,-28
    5078:	df000615 	stw	fp,24(sp)
    507c:	df000604 	addi	fp,sp,24
    5080:	e13ffe15 	stw	r4,-8(fp)
    5084:	e17fff15 	stw	r5,-4(fp)
    5088:	e0bfff17 	ldw	r2,-4(fp)
    508c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5090:	0005303a 	rdctl	r2,status
    5094:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5098:	e0fffb17 	ldw	r3,-20(fp)
    509c:	00bfff84 	movi	r2,-2
    50a0:	1884703a 	and	r2,r3,r2
    50a4:	1001703a 	wrctl	status,r2
  
  return context;
    50a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    50ac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    50b0:	00c00044 	movi	r3,1
    50b4:	e0bffa17 	ldw	r2,-24(fp)
    50b8:	1884983a 	sll	r2,r3,r2
    50bc:	0084303a 	nor	r2,zero,r2
    50c0:	1007883a 	mov	r3,r2
    50c4:	d0a01517 	ldw	r2,-32684(gp)
    50c8:	1884703a 	and	r2,r3,r2
    50cc:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    50d0:	d0a01517 	ldw	r2,-32684(gp)
    50d4:	100170fa 	wrctl	ienable,r2
    50d8:	e0bffc17 	ldw	r2,-16(fp)
    50dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    50e0:	e0bffd17 	ldw	r2,-12(fp)
    50e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    50e8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    50ec:	0001883a 	nop
}
    50f0:	e037883a 	mov	sp,fp
    50f4:	df000017 	ldw	fp,0(sp)
    50f8:	dec00104 	addi	sp,sp,4
    50fc:	f800283a 	ret

00005100 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    5100:	defffc04 	addi	sp,sp,-16
    5104:	df000315 	stw	fp,12(sp)
    5108:	df000304 	addi	fp,sp,12
    510c:	e13ffe15 	stw	r4,-8(fp)
    5110:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    5114:	000530fa 	rdctl	r2,ienable
    5118:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    511c:	00c00044 	movi	r3,1
    5120:	e0bfff17 	ldw	r2,-4(fp)
    5124:	1884983a 	sll	r2,r3,r2
    5128:	1007883a 	mov	r3,r2
    512c:	e0bffd17 	ldw	r2,-12(fp)
    5130:	1884703a 	and	r2,r3,r2
    5134:	1004c03a 	cmpne	r2,r2,zero
    5138:	10803fcc 	andi	r2,r2,255
}
    513c:	e037883a 	mov	sp,fp
    5140:	df000017 	ldw	fp,0(sp)
    5144:	dec00104 	addi	sp,sp,4
    5148:	f800283a 	ret

0000514c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    514c:	defff504 	addi	sp,sp,-44
    5150:	dfc00a15 	stw	ra,40(sp)
    5154:	df000915 	stw	fp,36(sp)
    5158:	df000904 	addi	fp,sp,36
    515c:	e13ffc15 	stw	r4,-16(fp)
    5160:	e17ffd15 	stw	r5,-12(fp)
    5164:	e1bffe15 	stw	r6,-8(fp)
    5168:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    516c:	00bffa84 	movi	r2,-22
    5170:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    5174:	e0bffd17 	ldw	r2,-12(fp)
    5178:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    517c:	e0bff817 	ldw	r2,-32(fp)
    5180:	10800808 	cmpgei	r2,r2,32
    5184:	1000271e 	bne	r2,zero,5224 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5188:	0005303a 	rdctl	r2,status
    518c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5190:	e0fffb17 	ldw	r3,-20(fp)
    5194:	00bfff84 	movi	r2,-2
    5198:	1884703a 	and	r2,r3,r2
    519c:	1001703a 	wrctl	status,r2
  
  return context;
    51a0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    51a4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    51a8:	00810034 	movhi	r2,1024
    51ac:	1086c704 	addi	r2,r2,6940
    51b0:	e0fff817 	ldw	r3,-32(fp)
    51b4:	180690fa 	slli	r3,r3,3
    51b8:	10c5883a 	add	r2,r2,r3
    51bc:	e0fffe17 	ldw	r3,-8(fp)
    51c0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    51c4:	00810034 	movhi	r2,1024
    51c8:	1086c704 	addi	r2,r2,6940
    51cc:	e0fff817 	ldw	r3,-32(fp)
    51d0:	180690fa 	slli	r3,r3,3
    51d4:	10c5883a 	add	r2,r2,r3
    51d8:	10800104 	addi	r2,r2,4
    51dc:	e0ffff17 	ldw	r3,-4(fp)
    51e0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    51e4:	e0bffe17 	ldw	r2,-8(fp)
    51e8:	10000526 	beq	r2,zero,5200 <alt_iic_isr_register+0xb4>
    51ec:	e0bff817 	ldw	r2,-32(fp)
    51f0:	100b883a 	mov	r5,r2
    51f4:	e13ffc17 	ldw	r4,-16(fp)
    51f8:	0004fec0 	call	4fec <alt_ic_irq_enable>
    51fc:	00000406 	br	5210 <alt_iic_isr_register+0xc4>
    5200:	e0bff817 	ldw	r2,-32(fp)
    5204:	100b883a 	mov	r5,r2
    5208:	e13ffc17 	ldw	r4,-16(fp)
    520c:	00050740 	call	5074 <alt_ic_irq_disable>
    5210:	e0bff715 	stw	r2,-36(fp)
    5214:	e0bffa17 	ldw	r2,-24(fp)
    5218:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    521c:	e0bff917 	ldw	r2,-28(fp)
    5220:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    5224:	e0bff717 	ldw	r2,-36(fp)
}
    5228:	e037883a 	mov	sp,fp
    522c:	dfc00117 	ldw	ra,4(sp)
    5230:	df000017 	ldw	fp,0(sp)
    5234:	dec00204 	addi	sp,sp,8
    5238:	f800283a 	ret

0000523c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    523c:	defff804 	addi	sp,sp,-32
    5240:	dfc00715 	stw	ra,28(sp)
    5244:	df000615 	stw	fp,24(sp)
    5248:	dc000515 	stw	r16,20(sp)
    524c:	df000604 	addi	fp,sp,24
    5250:	e13ffb15 	stw	r4,-20(fp)
    5254:	e17ffc15 	stw	r5,-16(fp)
    5258:	e1bffd15 	stw	r6,-12(fp)
    525c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    5260:	e1bffe17 	ldw	r6,-8(fp)
    5264:	e17ffd17 	ldw	r5,-12(fp)
    5268:	e13ffc17 	ldw	r4,-16(fp)
    526c:	00054c40 	call	54c4 <open>
    5270:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    5274:	e0bffa17 	ldw	r2,-24(fp)
    5278:	10002216 	blt	r2,zero,5304 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    527c:	04010034 	movhi	r16,1024
    5280:	84022c04 	addi	r16,r16,2224
    5284:	e0bffa17 	ldw	r2,-24(fp)
    5288:	01400304 	movi	r5,12
    528c:	1009883a 	mov	r4,r2
    5290:	00007e40 	call	7e4 <__mulsi3>
    5294:	8085883a 	add	r2,r16,r2
    5298:	10c00017 	ldw	r3,0(r2)
    529c:	e0bffb17 	ldw	r2,-20(fp)
    52a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    52a4:	04010034 	movhi	r16,1024
    52a8:	84022c04 	addi	r16,r16,2224
    52ac:	e0bffa17 	ldw	r2,-24(fp)
    52b0:	01400304 	movi	r5,12
    52b4:	1009883a 	mov	r4,r2
    52b8:	00007e40 	call	7e4 <__mulsi3>
    52bc:	8085883a 	add	r2,r16,r2
    52c0:	10800104 	addi	r2,r2,4
    52c4:	10c00017 	ldw	r3,0(r2)
    52c8:	e0bffb17 	ldw	r2,-20(fp)
    52cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    52d0:	04010034 	movhi	r16,1024
    52d4:	84022c04 	addi	r16,r16,2224
    52d8:	e0bffa17 	ldw	r2,-24(fp)
    52dc:	01400304 	movi	r5,12
    52e0:	1009883a 	mov	r4,r2
    52e4:	00007e40 	call	7e4 <__mulsi3>
    52e8:	8085883a 	add	r2,r16,r2
    52ec:	10800204 	addi	r2,r2,8
    52f0:	10c00017 	ldw	r3,0(r2)
    52f4:	e0bffb17 	ldw	r2,-20(fp)
    52f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    52fc:	e13ffa17 	ldw	r4,-24(fp)
    5300:	0003f000 	call	3f00 <alt_release_fd>
  }
} 
    5304:	0001883a 	nop
    5308:	e6ffff04 	addi	sp,fp,-4
    530c:	dfc00217 	ldw	ra,8(sp)
    5310:	df000117 	ldw	fp,4(sp)
    5314:	dc000017 	ldw	r16,0(sp)
    5318:	dec00304 	addi	sp,sp,12
    531c:	f800283a 	ret

00005320 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    5320:	defffb04 	addi	sp,sp,-20
    5324:	dfc00415 	stw	ra,16(sp)
    5328:	df000315 	stw	fp,12(sp)
    532c:	df000304 	addi	fp,sp,12
    5330:	e13ffd15 	stw	r4,-12(fp)
    5334:	e17ffe15 	stw	r5,-8(fp)
    5338:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    533c:	01c07fc4 	movi	r7,511
    5340:	01800044 	movi	r6,1
    5344:	e17ffd17 	ldw	r5,-12(fp)
    5348:	01010034 	movhi	r4,1024
    534c:	21022f04 	addi	r4,r4,2236
    5350:	000523c0 	call	523c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    5354:	01c07fc4 	movi	r7,511
    5358:	000d883a 	mov	r6,zero
    535c:	e17ffe17 	ldw	r5,-8(fp)
    5360:	01010034 	movhi	r4,1024
    5364:	21022c04 	addi	r4,r4,2224
    5368:	000523c0 	call	523c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    536c:	01c07fc4 	movi	r7,511
    5370:	01800044 	movi	r6,1
    5374:	e17fff17 	ldw	r5,-4(fp)
    5378:	01010034 	movhi	r4,1024
    537c:	21023204 	addi	r4,r4,2248
    5380:	000523c0 	call	523c <alt_open_fd>
}  
    5384:	0001883a 	nop
    5388:	e037883a 	mov	sp,fp
    538c:	dfc00117 	ldw	ra,4(sp)
    5390:	df000017 	ldw	fp,0(sp)
    5394:	dec00204 	addi	sp,sp,8
    5398:	f800283a 	ret

0000539c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    539c:	defffe04 	addi	sp,sp,-8
    53a0:	dfc00115 	stw	ra,4(sp)
    53a4:	df000015 	stw	fp,0(sp)
    53a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    53ac:	d0a00917 	ldw	r2,-32732(gp)
    53b0:	10000326 	beq	r2,zero,53c0 <alt_get_errno+0x24>
    53b4:	d0a00917 	ldw	r2,-32732(gp)
    53b8:	103ee83a 	callr	r2
    53bc:	00000106 	br	53c4 <alt_get_errno+0x28>
    53c0:	d0a01104 	addi	r2,gp,-32700
}
    53c4:	e037883a 	mov	sp,fp
    53c8:	dfc00117 	ldw	ra,4(sp)
    53cc:	df000017 	ldw	fp,0(sp)
    53d0:	dec00204 	addi	sp,sp,8
    53d4:	f800283a 	ret

000053d8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    53d8:	defffb04 	addi	sp,sp,-20
    53dc:	dfc00415 	stw	ra,16(sp)
    53e0:	df000315 	stw	fp,12(sp)
    53e4:	dc000215 	stw	r16,8(sp)
    53e8:	df000304 	addi	fp,sp,12
    53ec:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    53f0:	e0bffe17 	ldw	r2,-8(fp)
    53f4:	10800217 	ldw	r2,8(r2)
    53f8:	10d00034 	orhi	r3,r2,16384
    53fc:	e0bffe17 	ldw	r2,-8(fp)
    5400:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5404:	e03ffd15 	stw	zero,-12(fp)
    5408:	00002306 	br	5498 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    540c:	04010034 	movhi	r16,1024
    5410:	84022c04 	addi	r16,r16,2224
    5414:	e0bffd17 	ldw	r2,-12(fp)
    5418:	01400304 	movi	r5,12
    541c:	1009883a 	mov	r4,r2
    5420:	00007e40 	call	7e4 <__mulsi3>
    5424:	8085883a 	add	r2,r16,r2
    5428:	10c00017 	ldw	r3,0(r2)
    542c:	e0bffe17 	ldw	r2,-8(fp)
    5430:	10800017 	ldw	r2,0(r2)
    5434:	1880151e 	bne	r3,r2,548c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5438:	04010034 	movhi	r16,1024
    543c:	84022c04 	addi	r16,r16,2224
    5440:	e0bffd17 	ldw	r2,-12(fp)
    5444:	01400304 	movi	r5,12
    5448:	1009883a 	mov	r4,r2
    544c:	00007e40 	call	7e4 <__mulsi3>
    5450:	8085883a 	add	r2,r16,r2
    5454:	10800204 	addi	r2,r2,8
    5458:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    545c:	10000b0e 	bge	r2,zero,548c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    5460:	01400304 	movi	r5,12
    5464:	e13ffd17 	ldw	r4,-12(fp)
    5468:	00007e40 	call	7e4 <__mulsi3>
    546c:	1007883a 	mov	r3,r2
    5470:	00810034 	movhi	r2,1024
    5474:	10822c04 	addi	r2,r2,2224
    5478:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    547c:	e0bffe17 	ldw	r2,-8(fp)
    5480:	18800226 	beq	r3,r2,548c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    5484:	00bffcc4 	movi	r2,-13
    5488:	00000806 	br	54ac <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    548c:	e0bffd17 	ldw	r2,-12(fp)
    5490:	10800044 	addi	r2,r2,1
    5494:	e0bffd15 	stw	r2,-12(fp)
    5498:	d0a00817 	ldw	r2,-32736(gp)
    549c:	1007883a 	mov	r3,r2
    54a0:	e0bffd17 	ldw	r2,-12(fp)
    54a4:	18bfd92e 	bgeu	r3,r2,540c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    54a8:	0005883a 	mov	r2,zero
}
    54ac:	e6ffff04 	addi	sp,fp,-4
    54b0:	dfc00217 	ldw	ra,8(sp)
    54b4:	df000117 	ldw	fp,4(sp)
    54b8:	dc000017 	ldw	r16,0(sp)
    54bc:	dec00304 	addi	sp,sp,12
    54c0:	f800283a 	ret

000054c4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    54c4:	defff604 	addi	sp,sp,-40
    54c8:	dfc00915 	stw	ra,36(sp)
    54cc:	df000815 	stw	fp,32(sp)
    54d0:	df000804 	addi	fp,sp,32
    54d4:	e13ffd15 	stw	r4,-12(fp)
    54d8:	e17ffe15 	stw	r5,-8(fp)
    54dc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    54e0:	00bfffc4 	movi	r2,-1
    54e4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    54e8:	00bffb44 	movi	r2,-19
    54ec:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    54f0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    54f4:	d1600604 	addi	r5,gp,-32744
    54f8:	e13ffd17 	ldw	r4,-12(fp)
    54fc:	00057e80 	call	57e8 <alt_find_dev>
    5500:	e0bff815 	stw	r2,-32(fp)
    5504:	e0bff817 	ldw	r2,-32(fp)
    5508:	1000051e 	bne	r2,zero,5520 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    550c:	e13ffd17 	ldw	r4,-12(fp)
    5510:	00058780 	call	5878 <alt_find_file>
    5514:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    5518:	00800044 	movi	r2,1
    551c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    5520:	e0bff817 	ldw	r2,-32(fp)
    5524:	10002b26 	beq	r2,zero,55d4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    5528:	e13ff817 	ldw	r4,-32(fp)
    552c:	00059800 	call	5980 <alt_get_fd>
    5530:	e0bff915 	stw	r2,-28(fp)
    5534:	e0bff917 	ldw	r2,-28(fp)
    5538:	1000030e 	bge	r2,zero,5548 <open+0x84>
    {
      status = index;
    553c:	e0bff917 	ldw	r2,-28(fp)
    5540:	e0bffa15 	stw	r2,-24(fp)
    5544:	00002506 	br	55dc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    5548:	01400304 	movi	r5,12
    554c:	e13ff917 	ldw	r4,-28(fp)
    5550:	00007e40 	call	7e4 <__mulsi3>
    5554:	1007883a 	mov	r3,r2
    5558:	00810034 	movhi	r2,1024
    555c:	10822c04 	addi	r2,r2,2224
    5560:	1885883a 	add	r2,r3,r2
    5564:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    5568:	e0fffe17 	ldw	r3,-8(fp)
    556c:	00900034 	movhi	r2,16384
    5570:	10bfffc4 	addi	r2,r2,-1
    5574:	1886703a 	and	r3,r3,r2
    5578:	e0bffc17 	ldw	r2,-16(fp)
    557c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    5580:	e0bffb17 	ldw	r2,-20(fp)
    5584:	1000051e 	bne	r2,zero,559c <open+0xd8>
    5588:	e13ffc17 	ldw	r4,-16(fp)
    558c:	00053d80 	call	53d8 <alt_file_locked>
    5590:	e0bffa15 	stw	r2,-24(fp)
    5594:	e0bffa17 	ldw	r2,-24(fp)
    5598:	10001016 	blt	r2,zero,55dc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    559c:	e0bff817 	ldw	r2,-32(fp)
    55a0:	10800317 	ldw	r2,12(r2)
    55a4:	10000826 	beq	r2,zero,55c8 <open+0x104>
    55a8:	e0bff817 	ldw	r2,-32(fp)
    55ac:	10800317 	ldw	r2,12(r2)
    55b0:	e1ffff17 	ldw	r7,-4(fp)
    55b4:	e1bffe17 	ldw	r6,-8(fp)
    55b8:	e17ffd17 	ldw	r5,-12(fp)
    55bc:	e13ffc17 	ldw	r4,-16(fp)
    55c0:	103ee83a 	callr	r2
    55c4:	00000106 	br	55cc <open+0x108>
    55c8:	0005883a 	mov	r2,zero
    55cc:	e0bffa15 	stw	r2,-24(fp)
    55d0:	00000206 	br	55dc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    55d4:	00bffb44 	movi	r2,-19
    55d8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    55dc:	e0bffa17 	ldw	r2,-24(fp)
    55e0:	1000090e 	bge	r2,zero,5608 <open+0x144>
  {
    alt_release_fd (index);  
    55e4:	e13ff917 	ldw	r4,-28(fp)
    55e8:	0003f000 	call	3f00 <alt_release_fd>
    ALT_ERRNO = -status;
    55ec:	000539c0 	call	539c <alt_get_errno>
    55f0:	1007883a 	mov	r3,r2
    55f4:	e0bffa17 	ldw	r2,-24(fp)
    55f8:	0085c83a 	sub	r2,zero,r2
    55fc:	18800015 	stw	r2,0(r3)
    return -1;
    5600:	00bfffc4 	movi	r2,-1
    5604:	00000106 	br	560c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    5608:	e0bff917 	ldw	r2,-28(fp)
}
    560c:	e037883a 	mov	sp,fp
    5610:	dfc00117 	ldw	ra,4(sp)
    5614:	df000017 	ldw	fp,0(sp)
    5618:	dec00204 	addi	sp,sp,8
    561c:	f800283a 	ret

00005620 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    5620:	defffa04 	addi	sp,sp,-24
    5624:	df000515 	stw	fp,20(sp)
    5628:	df000504 	addi	fp,sp,20
    562c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5630:	0005303a 	rdctl	r2,status
    5634:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5638:	e0fffc17 	ldw	r3,-16(fp)
    563c:	00bfff84 	movi	r2,-2
    5640:	1884703a 	and	r2,r3,r2
    5644:	1001703a 	wrctl	status,r2
  
  return context;
    5648:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    564c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    5650:	e0bfff17 	ldw	r2,-4(fp)
    5654:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    5658:	e0bffd17 	ldw	r2,-12(fp)
    565c:	10800017 	ldw	r2,0(r2)
    5660:	e0fffd17 	ldw	r3,-12(fp)
    5664:	18c00117 	ldw	r3,4(r3)
    5668:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    566c:	e0bffd17 	ldw	r2,-12(fp)
    5670:	10800117 	ldw	r2,4(r2)
    5674:	e0fffd17 	ldw	r3,-12(fp)
    5678:	18c00017 	ldw	r3,0(r3)
    567c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    5680:	e0bffd17 	ldw	r2,-12(fp)
    5684:	e0fffd17 	ldw	r3,-12(fp)
    5688:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    568c:	e0bffd17 	ldw	r2,-12(fp)
    5690:	e0fffd17 	ldw	r3,-12(fp)
    5694:	10c00015 	stw	r3,0(r2)
    5698:	e0bffb17 	ldw	r2,-20(fp)
    569c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    56a0:	e0bffe17 	ldw	r2,-8(fp)
    56a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    56a8:	0001883a 	nop
    56ac:	e037883a 	mov	sp,fp
    56b0:	df000017 	ldw	fp,0(sp)
    56b4:	dec00104 	addi	sp,sp,4
    56b8:	f800283a 	ret

000056bc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    56bc:	defffb04 	addi	sp,sp,-20
    56c0:	dfc00415 	stw	ra,16(sp)
    56c4:	df000315 	stw	fp,12(sp)
    56c8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    56cc:	d0a00c17 	ldw	r2,-32720(gp)
    56d0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    56d4:	d0a01717 	ldw	r2,-32676(gp)
    56d8:	10800044 	addi	r2,r2,1
    56dc:	d0a01715 	stw	r2,-32676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    56e0:	00002e06 	br	579c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    56e4:	e0bffd17 	ldw	r2,-12(fp)
    56e8:	10800017 	ldw	r2,0(r2)
    56ec:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    56f0:	e0bffd17 	ldw	r2,-12(fp)
    56f4:	10800403 	ldbu	r2,16(r2)
    56f8:	10803fcc 	andi	r2,r2,255
    56fc:	10000426 	beq	r2,zero,5710 <alt_tick+0x54>
    5700:	d0a01717 	ldw	r2,-32676(gp)
    5704:	1000021e 	bne	r2,zero,5710 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    5708:	e0bffd17 	ldw	r2,-12(fp)
    570c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    5710:	e0bffd17 	ldw	r2,-12(fp)
    5714:	10800217 	ldw	r2,8(r2)
    5718:	d0e01717 	ldw	r3,-32676(gp)
    571c:	18801d36 	bltu	r3,r2,5794 <alt_tick+0xd8>
    5720:	e0bffd17 	ldw	r2,-12(fp)
    5724:	10800403 	ldbu	r2,16(r2)
    5728:	10803fcc 	andi	r2,r2,255
    572c:	1000191e 	bne	r2,zero,5794 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    5730:	e0bffd17 	ldw	r2,-12(fp)
    5734:	10800317 	ldw	r2,12(r2)
    5738:	e0fffd17 	ldw	r3,-12(fp)
    573c:	18c00517 	ldw	r3,20(r3)
    5740:	1809883a 	mov	r4,r3
    5744:	103ee83a 	callr	r2
    5748:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    574c:	e0bfff17 	ldw	r2,-4(fp)
    5750:	1000031e 	bne	r2,zero,5760 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    5754:	e13ffd17 	ldw	r4,-12(fp)
    5758:	00056200 	call	5620 <alt_alarm_stop>
    575c:	00000d06 	br	5794 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    5760:	e0bffd17 	ldw	r2,-12(fp)
    5764:	10c00217 	ldw	r3,8(r2)
    5768:	e0bfff17 	ldw	r2,-4(fp)
    576c:	1887883a 	add	r3,r3,r2
    5770:	e0bffd17 	ldw	r2,-12(fp)
    5774:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    5778:	e0bffd17 	ldw	r2,-12(fp)
    577c:	10c00217 	ldw	r3,8(r2)
    5780:	d0a01717 	ldw	r2,-32676(gp)
    5784:	1880032e 	bgeu	r3,r2,5794 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    5788:	e0bffd17 	ldw	r2,-12(fp)
    578c:	00c00044 	movi	r3,1
    5790:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    5794:	e0bffe17 	ldw	r2,-8(fp)
    5798:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    579c:	e0fffd17 	ldw	r3,-12(fp)
    57a0:	d0a00c04 	addi	r2,gp,-32720
    57a4:	18bfcf1e 	bne	r3,r2,56e4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    57a8:	0001883a 	nop
}
    57ac:	0001883a 	nop
    57b0:	e037883a 	mov	sp,fp
    57b4:	dfc00117 	ldw	ra,4(sp)
    57b8:	df000017 	ldw	fp,0(sp)
    57bc:	dec00204 	addi	sp,sp,8
    57c0:	f800283a 	ret

000057c4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    57c4:	deffff04 	addi	sp,sp,-4
    57c8:	df000015 	stw	fp,0(sp)
    57cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    57d0:	000170fa 	wrctl	ienable,zero
}
    57d4:	0001883a 	nop
    57d8:	e037883a 	mov	sp,fp
    57dc:	df000017 	ldw	fp,0(sp)
    57e0:	dec00104 	addi	sp,sp,4
    57e4:	f800283a 	ret

000057e8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    57e8:	defffa04 	addi	sp,sp,-24
    57ec:	dfc00515 	stw	ra,20(sp)
    57f0:	df000415 	stw	fp,16(sp)
    57f4:	df000404 	addi	fp,sp,16
    57f8:	e13ffe15 	stw	r4,-8(fp)
    57fc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    5800:	e0bfff17 	ldw	r2,-4(fp)
    5804:	10800017 	ldw	r2,0(r2)
    5808:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    580c:	e13ffe17 	ldw	r4,-8(fp)
    5810:	00009180 	call	918 <strlen>
    5814:	10800044 	addi	r2,r2,1
    5818:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    581c:	00000d06 	br	5854 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    5820:	e0bffc17 	ldw	r2,-16(fp)
    5824:	10800217 	ldw	r2,8(r2)
    5828:	e0fffd17 	ldw	r3,-12(fp)
    582c:	180d883a 	mov	r6,r3
    5830:	e17ffe17 	ldw	r5,-8(fp)
    5834:	1009883a 	mov	r4,r2
    5838:	0005af40 	call	5af4 <memcmp>
    583c:	1000021e 	bne	r2,zero,5848 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    5840:	e0bffc17 	ldw	r2,-16(fp)
    5844:	00000706 	br	5864 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    5848:	e0bffc17 	ldw	r2,-16(fp)
    584c:	10800017 	ldw	r2,0(r2)
    5850:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5854:	e0fffc17 	ldw	r3,-16(fp)
    5858:	e0bfff17 	ldw	r2,-4(fp)
    585c:	18bff01e 	bne	r3,r2,5820 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    5860:	0005883a 	mov	r2,zero
}
    5864:	e037883a 	mov	sp,fp
    5868:	dfc00117 	ldw	ra,4(sp)
    586c:	df000017 	ldw	fp,0(sp)
    5870:	dec00204 	addi	sp,sp,8
    5874:	f800283a 	ret

00005878 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5878:	defffb04 	addi	sp,sp,-20
    587c:	dfc00415 	stw	ra,16(sp)
    5880:	df000315 	stw	fp,12(sp)
    5884:	df000304 	addi	fp,sp,12
    5888:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    588c:	d0a00417 	ldw	r2,-32752(gp)
    5890:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5894:	00003106 	br	595c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    5898:	e0bffd17 	ldw	r2,-12(fp)
    589c:	10800217 	ldw	r2,8(r2)
    58a0:	1009883a 	mov	r4,r2
    58a4:	00009180 	call	918 <strlen>
    58a8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    58ac:	e0bffd17 	ldw	r2,-12(fp)
    58b0:	10c00217 	ldw	r3,8(r2)
    58b4:	e0bffe17 	ldw	r2,-8(fp)
    58b8:	10bfffc4 	addi	r2,r2,-1
    58bc:	1885883a 	add	r2,r3,r2
    58c0:	10800003 	ldbu	r2,0(r2)
    58c4:	10803fcc 	andi	r2,r2,255
    58c8:	1080201c 	xori	r2,r2,128
    58cc:	10bfe004 	addi	r2,r2,-128
    58d0:	10800bd8 	cmpnei	r2,r2,47
    58d4:	1000031e 	bne	r2,zero,58e4 <alt_find_file+0x6c>
    {
      len -= 1;
    58d8:	e0bffe17 	ldw	r2,-8(fp)
    58dc:	10bfffc4 	addi	r2,r2,-1
    58e0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    58e4:	e0bffe17 	ldw	r2,-8(fp)
    58e8:	e0ffff17 	ldw	r3,-4(fp)
    58ec:	1885883a 	add	r2,r3,r2
    58f0:	10800003 	ldbu	r2,0(r2)
    58f4:	10803fcc 	andi	r2,r2,255
    58f8:	1080201c 	xori	r2,r2,128
    58fc:	10bfe004 	addi	r2,r2,-128
    5900:	10800be0 	cmpeqi	r2,r2,47
    5904:	1000081e 	bne	r2,zero,5928 <alt_find_file+0xb0>
    5908:	e0bffe17 	ldw	r2,-8(fp)
    590c:	e0ffff17 	ldw	r3,-4(fp)
    5910:	1885883a 	add	r2,r3,r2
    5914:	10800003 	ldbu	r2,0(r2)
    5918:	10803fcc 	andi	r2,r2,255
    591c:	1080201c 	xori	r2,r2,128
    5920:	10bfe004 	addi	r2,r2,-128
    5924:	10000a1e 	bne	r2,zero,5950 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    5928:	e0bffd17 	ldw	r2,-12(fp)
    592c:	10800217 	ldw	r2,8(r2)
    5930:	e0fffe17 	ldw	r3,-8(fp)
    5934:	180d883a 	mov	r6,r3
    5938:	e17fff17 	ldw	r5,-4(fp)
    593c:	1009883a 	mov	r4,r2
    5940:	0005af40 	call	5af4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5944:	1000021e 	bne	r2,zero,5950 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    5948:	e0bffd17 	ldw	r2,-12(fp)
    594c:	00000706 	br	596c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    5950:	e0bffd17 	ldw	r2,-12(fp)
    5954:	10800017 	ldw	r2,0(r2)
    5958:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    595c:	e0fffd17 	ldw	r3,-12(fp)
    5960:	d0a00404 	addi	r2,gp,-32752
    5964:	18bfcc1e 	bne	r3,r2,5898 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    5968:	0005883a 	mov	r2,zero
}
    596c:	e037883a 	mov	sp,fp
    5970:	dfc00117 	ldw	ra,4(sp)
    5974:	df000017 	ldw	fp,0(sp)
    5978:	dec00204 	addi	sp,sp,8
    597c:	f800283a 	ret

00005980 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    5980:	defffa04 	addi	sp,sp,-24
    5984:	dfc00515 	stw	ra,20(sp)
    5988:	df000415 	stw	fp,16(sp)
    598c:	dc000315 	stw	r16,12(sp)
    5990:	df000404 	addi	fp,sp,16
    5994:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    5998:	00bffa04 	movi	r2,-24
    599c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    59a0:	e03ffc15 	stw	zero,-16(fp)
    59a4:	00001d06 	br	5a1c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    59a8:	04010034 	movhi	r16,1024
    59ac:	84022c04 	addi	r16,r16,2224
    59b0:	e0bffc17 	ldw	r2,-16(fp)
    59b4:	01400304 	movi	r5,12
    59b8:	1009883a 	mov	r4,r2
    59bc:	00007e40 	call	7e4 <__mulsi3>
    59c0:	8085883a 	add	r2,r16,r2
    59c4:	10800017 	ldw	r2,0(r2)
    59c8:	1000111e 	bne	r2,zero,5a10 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    59cc:	04010034 	movhi	r16,1024
    59d0:	84022c04 	addi	r16,r16,2224
    59d4:	e0bffc17 	ldw	r2,-16(fp)
    59d8:	01400304 	movi	r5,12
    59dc:	1009883a 	mov	r4,r2
    59e0:	00007e40 	call	7e4 <__mulsi3>
    59e4:	8085883a 	add	r2,r16,r2
    59e8:	e0fffe17 	ldw	r3,-8(fp)
    59ec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    59f0:	d0e00817 	ldw	r3,-32736(gp)
    59f4:	e0bffc17 	ldw	r2,-16(fp)
    59f8:	1880020e 	bge	r3,r2,5a04 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    59fc:	e0bffc17 	ldw	r2,-16(fp)
    5a00:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    5a04:	e0bffc17 	ldw	r2,-16(fp)
    5a08:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    5a0c:	00000606 	br	5a28 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5a10:	e0bffc17 	ldw	r2,-16(fp)
    5a14:	10800044 	addi	r2,r2,1
    5a18:	e0bffc15 	stw	r2,-16(fp)
    5a1c:	e0bffc17 	ldw	r2,-16(fp)
    5a20:	10800810 	cmplti	r2,r2,32
    5a24:	103fe01e 	bne	r2,zero,59a8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    5a28:	e0bffd17 	ldw	r2,-12(fp)
}
    5a2c:	e6ffff04 	addi	sp,fp,-4
    5a30:	dfc00217 	ldw	ra,8(sp)
    5a34:	df000117 	ldw	fp,4(sp)
    5a38:	dc000017 	ldw	r16,0(sp)
    5a3c:	dec00304 	addi	sp,sp,12
    5a40:	f800283a 	ret

00005a44 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    5a44:	defffe04 	addi	sp,sp,-8
    5a48:	df000115 	stw	fp,4(sp)
    5a4c:	df000104 	addi	fp,sp,4
    5a50:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    5a54:	e0bfff17 	ldw	r2,-4(fp)
    5a58:	10bffe84 	addi	r2,r2,-6
    5a5c:	10c00428 	cmpgeui	r3,r2,16
    5a60:	18001a1e 	bne	r3,zero,5acc <alt_exception_cause_generated_bad_addr+0x88>
    5a64:	100690ba 	slli	r3,r2,2
    5a68:	00800034 	movhi	r2,0
    5a6c:	10969f04 	addi	r2,r2,23164
    5a70:	1885883a 	add	r2,r3,r2
    5a74:	10800017 	ldw	r2,0(r2)
    5a78:	1000683a 	jmp	r2
    5a7c:	00005abc 	xorhi	zero,zero,362
    5a80:	00005abc 	xorhi	zero,zero,362
    5a84:	00005acc 	andi	zero,zero,363
    5a88:	00005acc 	andi	zero,zero,363
    5a8c:	00005acc 	andi	zero,zero,363
    5a90:	00005abc 	xorhi	zero,zero,362
    5a94:	00005ac4 	movi	zero,363
    5a98:	00005acc 	andi	zero,zero,363
    5a9c:	00005abc 	xorhi	zero,zero,362
    5aa0:	00005abc 	xorhi	zero,zero,362
    5aa4:	00005acc 	andi	zero,zero,363
    5aa8:	00005abc 	xorhi	zero,zero,362
    5aac:	00005ac4 	movi	zero,363
    5ab0:	00005acc 	andi	zero,zero,363
    5ab4:	00005acc 	andi	zero,zero,363
    5ab8:	00005abc 	xorhi	zero,zero,362
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    5abc:	00800044 	movi	r2,1
    5ac0:	00000306 	br	5ad0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    5ac4:	0005883a 	mov	r2,zero
    5ac8:	00000106 	br	5ad0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    5acc:	0005883a 	mov	r2,zero
  }
}
    5ad0:	e037883a 	mov	sp,fp
    5ad4:	df000017 	ldw	fp,0(sp)
    5ad8:	dec00104 	addi	sp,sp,4
    5adc:	f800283a 	ret

00005ae0 <atexit>:
    5ae0:	200b883a 	mov	r5,r4
    5ae4:	000f883a 	mov	r7,zero
    5ae8:	000d883a 	mov	r6,zero
    5aec:	0009883a 	mov	r4,zero
    5af0:	0005b701 	jmpi	5b70 <__register_exitproc>

00005af4 <memcmp>:
    5af4:	01c000c4 	movi	r7,3
    5af8:	3980192e 	bgeu	r7,r6,5b60 <memcmp+0x6c>
    5afc:	2144b03a 	or	r2,r4,r5
    5b00:	11c4703a 	and	r2,r2,r7
    5b04:	10000f26 	beq	r2,zero,5b44 <memcmp+0x50>
    5b08:	20800003 	ldbu	r2,0(r4)
    5b0c:	28c00003 	ldbu	r3,0(r5)
    5b10:	10c0151e 	bne	r2,r3,5b68 <memcmp+0x74>
    5b14:	31bfff84 	addi	r6,r6,-2
    5b18:	01ffffc4 	movi	r7,-1
    5b1c:	00000406 	br	5b30 <memcmp+0x3c>
    5b20:	20800003 	ldbu	r2,0(r4)
    5b24:	28c00003 	ldbu	r3,0(r5)
    5b28:	31bfffc4 	addi	r6,r6,-1
    5b2c:	10c00e1e 	bne	r2,r3,5b68 <memcmp+0x74>
    5b30:	21000044 	addi	r4,r4,1
    5b34:	29400044 	addi	r5,r5,1
    5b38:	31fff91e 	bne	r6,r7,5b20 <memcmp+0x2c>
    5b3c:	0005883a 	mov	r2,zero
    5b40:	f800283a 	ret
    5b44:	20c00017 	ldw	r3,0(r4)
    5b48:	28800017 	ldw	r2,0(r5)
    5b4c:	18bfee1e 	bne	r3,r2,5b08 <memcmp+0x14>
    5b50:	31bfff04 	addi	r6,r6,-4
    5b54:	21000104 	addi	r4,r4,4
    5b58:	29400104 	addi	r5,r5,4
    5b5c:	39bff936 	bltu	r7,r6,5b44 <memcmp+0x50>
    5b60:	303fe91e 	bne	r6,zero,5b08 <memcmp+0x14>
    5b64:	003ff506 	br	5b3c <memcmp+0x48>
    5b68:	10c5c83a 	sub	r2,r2,r3
    5b6c:	f800283a 	ret

00005b70 <__register_exitproc>:
    5b70:	defffa04 	addi	sp,sp,-24
    5b74:	dc000315 	stw	r16,12(sp)
    5b78:	04010034 	movhi	r16,1024
    5b7c:	8406a404 	addi	r16,r16,6800
    5b80:	80c00017 	ldw	r3,0(r16)
    5b84:	dc400415 	stw	r17,16(sp)
    5b88:	dfc00515 	stw	ra,20(sp)
    5b8c:	18805217 	ldw	r2,328(r3)
    5b90:	2023883a 	mov	r17,r4
    5b94:	10003726 	beq	r2,zero,5c74 <__register_exitproc+0x104>
    5b98:	10c00117 	ldw	r3,4(r2)
    5b9c:	010007c4 	movi	r4,31
    5ba0:	20c00e16 	blt	r4,r3,5bdc <__register_exitproc+0x6c>
    5ba4:	1a000044 	addi	r8,r3,1
    5ba8:	8800221e 	bne	r17,zero,5c34 <__register_exitproc+0xc4>
    5bac:	18c00084 	addi	r3,r3,2
    5bb0:	18c7883a 	add	r3,r3,r3
    5bb4:	18c7883a 	add	r3,r3,r3
    5bb8:	12000115 	stw	r8,4(r2)
    5bbc:	10c7883a 	add	r3,r2,r3
    5bc0:	19400015 	stw	r5,0(r3)
    5bc4:	0005883a 	mov	r2,zero
    5bc8:	dfc00517 	ldw	ra,20(sp)
    5bcc:	dc400417 	ldw	r17,16(sp)
    5bd0:	dc000317 	ldw	r16,12(sp)
    5bd4:	dec00604 	addi	sp,sp,24
    5bd8:	f800283a 	ret
    5bdc:	00800034 	movhi	r2,0
    5be0:	10800004 	addi	r2,r2,0
    5be4:	10002626 	beq	r2,zero,5c80 <__register_exitproc+0x110>
    5be8:	01006404 	movi	r4,400
    5bec:	d9400015 	stw	r5,0(sp)
    5bf0:	d9800115 	stw	r6,4(sp)
    5bf4:	d9c00215 	stw	r7,8(sp)
    5bf8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    5bfc:	d9400017 	ldw	r5,0(sp)
    5c00:	d9800117 	ldw	r6,4(sp)
    5c04:	d9c00217 	ldw	r7,8(sp)
    5c08:	10001d26 	beq	r2,zero,5c80 <__register_exitproc+0x110>
    5c0c:	81000017 	ldw	r4,0(r16)
    5c10:	10000115 	stw	zero,4(r2)
    5c14:	02000044 	movi	r8,1
    5c18:	22405217 	ldw	r9,328(r4)
    5c1c:	0007883a 	mov	r3,zero
    5c20:	12400015 	stw	r9,0(r2)
    5c24:	20805215 	stw	r2,328(r4)
    5c28:	10006215 	stw	zero,392(r2)
    5c2c:	10006315 	stw	zero,396(r2)
    5c30:	883fde26 	beq	r17,zero,5bac <__register_exitproc+0x3c>
    5c34:	18c9883a 	add	r4,r3,r3
    5c38:	2109883a 	add	r4,r4,r4
    5c3c:	1109883a 	add	r4,r2,r4
    5c40:	21802215 	stw	r6,136(r4)
    5c44:	01800044 	movi	r6,1
    5c48:	12406217 	ldw	r9,392(r2)
    5c4c:	30cc983a 	sll	r6,r6,r3
    5c50:	4992b03a 	or	r9,r9,r6
    5c54:	12406215 	stw	r9,392(r2)
    5c58:	21c04215 	stw	r7,264(r4)
    5c5c:	01000084 	movi	r4,2
    5c60:	893fd21e 	bne	r17,r4,5bac <__register_exitproc+0x3c>
    5c64:	11006317 	ldw	r4,396(r2)
    5c68:	218cb03a 	or	r6,r4,r6
    5c6c:	11806315 	stw	r6,396(r2)
    5c70:	003fce06 	br	5bac <__register_exitproc+0x3c>
    5c74:	18805304 	addi	r2,r3,332
    5c78:	18805215 	stw	r2,328(r3)
    5c7c:	003fc606 	br	5b98 <__register_exitproc+0x28>
    5c80:	00bfffc4 	movi	r2,-1
    5c84:	003fd006 	br	5bc8 <__register_exitproc+0x58>
